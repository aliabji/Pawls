{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useRef, useState, useMemo } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { HapticService, HapticType } from \"../../../services\";\nexport default (function (_ref) {\n  var visible = _ref.visible,\n      position = _ref.position,\n      _ref$toastHeight = _ref.toastHeight,\n      toastHeight = _ref$toastHeight === void 0 ? 500 : _ref$toastHeight,\n      onAnimationEnd = _ref.onAnimationEnd,\n      enableHapticFeedback = _ref.enableHapticFeedback,\n      setTimer = _ref.setTimer,\n      playAccessibilityFeatures = _ref.playAccessibilityFeatures;\n  var toastAnimatedValue = useRef(new Animated.Value(0));\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAnimating = _useState2[0],\n      setIsAnimating = _useState2[1];\n\n  var _onAnimationEnd = function _onAnimationEnd() {\n    if (visible) {\n      setTimer();\n    } else {\n      setIsAnimating(false);\n    }\n\n    playAccessibilityFeatures();\n    onAnimationEnd == null ? void 0 : onAnimationEnd(visible);\n  };\n\n  var toggleToast = function toggleToast() {\n    var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        delay = _ref2.delay;\n\n    Animated.timing(toastAnimatedValue.current, {\n      toValue: Number(show),\n      duration: 300,\n      delay: delay,\n      easing: Easing.bezier(0.215, 0.61, 0.355, 1),\n      useNativeDriver: true\n    }).start(_onAnimationEnd);\n\n    if (enableHapticFeedback && show) {\n      HapticService.triggerHaptic(HapticType.impactMedium, 'Toast');\n    }\n\n    setIsAnimating(true);\n  };\n\n  var toastOpacity = toastAnimatedValue.current.interpolate({\n    inputRange: [0, 0.01, 1],\n    outputRange: [0, 1, 1]\n  });\n  var opacityStyle = useMemo(function () {\n    return {\n      opacity: toastOpacity\n    };\n  }, []);\n  var isTop = position === 'top';\n  var positionMultiplier = isTop ? -1 : 1;\n  var toastTranslateY = toastAnimatedValue.current.interpolate({\n    inputRange: [0, 1],\n    outputRange: [positionMultiplier * toastHeight, 0]\n  });\n  var translateStyle = useMemo(function () {\n    return {\n      transform: [{\n        translateY: toastTranslateY\n      }]\n    };\n  }, [toastHeight]);\n  return {\n    isAnimating: isAnimating,\n    toggleToast: toggleToast,\n    opacityStyle: opacityStyle,\n    translateStyle: translateStyle\n  };\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/toast/helpers/useToastAnimation.js"],"names":["React","useRef","useState","useMemo","HapticService","HapticType","visible","position","toastHeight","onAnimationEnd","enableHapticFeedback","setTimer","playAccessibilityFeatures","toastAnimatedValue","Animated","Value","isAnimating","setIsAnimating","_onAnimationEnd","toggleToast","show","delay","timing","current","toValue","Number","duration","easing","Easing","bezier","useNativeDriver","start","triggerHaptic","impactMedium","toastOpacity","interpolate","inputRange","outputRange","opacityStyle","opacity","isTop","positionMultiplier","toastTranslateY","translateStyle","transform","translateY"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useMemo } from 'react';\nimport { Animated, Easing } from 'react-native';\nimport { HapticService, HapticType } from \"../../../services\";\nexport default (({\n  visible,\n  position,\n  toastHeight = 500,\n  onAnimationEnd,\n  enableHapticFeedback,\n  setTimer,\n  playAccessibilityFeatures\n}) => {\n  const toastAnimatedValue = useRef(new Animated.Value(0));\n  const [isAnimating, setIsAnimating] = useState();\n\n  const _onAnimationEnd = () => {\n    if (visible) {\n      setTimer();\n    } else {\n      setIsAnimating(false);\n    }\n\n    playAccessibilityFeatures();\n    onAnimationEnd?.(visible);\n  };\n\n  const toggleToast = (show = false, {\n    delay\n  } = {}) => {\n    Animated.timing(toastAnimatedValue.current, {\n      toValue: Number(show),\n      duration: 300,\n      delay,\n      easing: Easing.bezier(0.215, 0.61, 0.355, 1),\n      useNativeDriver: true\n    }).start(_onAnimationEnd);\n\n    if (enableHapticFeedback && show) {\n      HapticService.triggerHaptic(HapticType.impactMedium, 'Toast');\n    }\n\n    setIsAnimating(true);\n  };\n\n  const toastOpacity = toastAnimatedValue.current.interpolate({\n    inputRange: [0, 0.01, 1],\n    outputRange: [0, 1, 1]\n  });\n  const opacityStyle = useMemo(() => {\n    return {\n      opacity: toastOpacity\n    };\n  }, []);\n  const isTop = position === 'top';\n  const positionMultiplier = isTop ? -1 : 1;\n  const toastTranslateY = toastAnimatedValue.current.interpolate({\n    inputRange: [0, 1],\n    outputRange: [positionMultiplier * toastHeight, 0]\n  });\n  const translateStyle = useMemo(() => {\n    return {\n      transform: [{\n        translateY: toastTranslateY\n      }]\n    };\n  }, [toastHeight]);\n  return {\n    isAnimating,\n    toggleToast,\n    opacityStyle,\n    translateStyle\n  };\n});"]},"metadata":{},"sourceType":"module"}