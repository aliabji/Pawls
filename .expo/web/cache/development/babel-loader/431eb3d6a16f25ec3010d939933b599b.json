{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"modifiers\", \"style\", \"disabled\", \"forwardedRef\", \"feedbackColor\", \"activeOpacity\", \"activeScale\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming, interpolate, interpolateColor, runOnJS } from 'react-native-reanimated';\nimport { TapGestureHandler, LongPressGestureHandler } from 'react-native-gesture-handler';\nimport { asBaseComponent, forwardRef } from \"../commons/new\";\nimport View from \"../components/view\";\nimport { Colors } from \"../../src/style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction TouchableOpacity(props) {\n  var children = props.children,\n      modifiers = props.modifiers,\n      style = props.style,\n      disabled = props.disabled,\n      forwardedRef = props.forwardedRef,\n      feedbackColor = props.feedbackColor,\n      _props$activeOpacity = props.activeOpacity,\n      activeOpacity = _props$activeOpacity === void 0 ? 0.2 : _props$activeOpacity,\n      _props$activeScale = props.activeScale,\n      activeScale = _props$activeScale === void 0 ? 1 : _props$activeScale,\n      others = _objectWithoutProperties(props, _excluded);\n\n  var borderRadius = modifiers.borderRadius,\n      paddings = modifiers.paddings,\n      margins = modifiers.margins,\n      alignments = modifiers.alignments,\n      flexStyle = modifiers.flexStyle;\n  var isActive = useSharedValue(0);\n  var isLongPressed = useSharedValue(false);\n  var backgroundColor = useMemo(function () {\n    return props.backgroundColor || modifiers.backgroundColor || Colors.transparent;\n  }, [props.backgroundColor, modifiers.backgroundColor]);\n  var onPress = useCallback(function () {\n    props.onPress == null ? void 0 : props.onPress(props);\n  }, [props.onPress, props.customValue]);\n  var onLongPress = useCallback(function () {\n    props.onLongPress == null ? void 0 : props.onLongPress(props);\n  }, [props.onLongPress, props.customValue]);\n\n  var toggleActive = function () {\n    var _f = function _f(value) {\n      isActive.value = withTiming(value, {\n        duration: 200\n      });\n    };\n\n    _f._closure = {\n      isActive: isActive,\n      withTiming: withTiming\n    };\n    _f.asString = \"function _f(value){const{isActive,withTiming}=jsThis._closure;{isActive.value=withTiming(value,{duration:200});}}\";\n    _f.__workletHash = 10841591471317;\n    _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js (47:23)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }();\n\n  var tapGestureHandler = useAnimatedGestureHandler({\n    onStart: function () {\n      var _f = function _f() {\n        toggleActive(1);\n      };\n\n      _f._closure = {\n        toggleActive: toggleActive\n      };\n      _f.asString = \"function _f(){const{toggleActive}=jsThis._closure;{toggleActive(1);}}\";\n      _f.__workletHash = 12689343218764;\n      _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js (56:13)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f() {\n        toggleActive(0);\n        runOnJS(onPress)();\n      };\n\n      _f._closure = {\n        toggleActive: toggleActive,\n        runOnJS: runOnJS,\n        onPress: onPress\n      };\n      _f.asString = \"function _f(){const{toggleActive,runOnJS,onPress}=jsThis._closure;{toggleActive(0);runOnJS(onPress)();}}\";\n      _f.__workletHash = 2201219804342;\n      _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js (59:11)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onFail: function () {\n      var _f = function _f() {\n        if (!isLongPressed.value) {\n          toggleActive(0);\n        }\n      };\n\n      _f._closure = {\n        isLongPressed: isLongPressed,\n        toggleActive: toggleActive\n      };\n      _f.asString = \"function _f(){const{isLongPressed,toggleActive}=jsThis._closure;{if(!isLongPressed.value){toggleActive(0);}}}\";\n      _f.__workletHash = 8040095903981;\n      _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js (63:12)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }()\n  });\n  var longPressGestureHandler = useAnimatedGestureHandler({\n    onActive: function () {\n      var _f = function _f() {\n        if (!isLongPressed.value) {\n          isLongPressed.value = true;\n          runOnJS(onLongPress)();\n        }\n      };\n\n      _f._closure = {\n        isLongPressed: isLongPressed,\n        runOnJS: runOnJS,\n        onLongPress: onLongPress\n      };\n      _f.asString = \"function _f(){const{isLongPressed,runOnJS,onLongPress}=jsThis._closure;{if(!isLongPressed.value){isLongPressed.value=true;runOnJS(onLongPress)();}}}\";\n      _f.__workletHash = 4829283310259;\n      _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js (70:14)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }(),\n    onFinish: function () {\n      var _f = function _f() {\n        toggleActive(0);\n        isLongPressed.value = false;\n      };\n\n      _f._closure = {\n        toggleActive: toggleActive,\n        isLongPressed: isLongPressed\n      };\n      _f.asString = \"function _f(){const{toggleActive,isLongPressed}=jsThis._closure;{toggleActive(0);isLongPressed.value=false;}}\";\n      _f.__workletHash = 919923223071;\n      _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js (76:14)\";\n\n      global.__reanimatedWorkletInit(_f);\n\n      return _f;\n    }()\n  });\n  var animatedStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      var activeColor = feedbackColor || backgroundColor;\n      var opacity = interpolate(isActive.value, [0, 1], [1, activeOpacity]);\n      var scale = interpolate(isActive.value, [0, 1], [1, activeScale]);\n      return {\n        backgroundColor: !feedbackColor ? backgroundColor : interpolateColor(isActive.value, [0, 1], [backgroundColor, activeColor]),\n        opacity: opacity,\n        transform: [{\n          scale: scale\n        }]\n      };\n    };\n\n    _f._closure = {\n      feedbackColor: feedbackColor,\n      backgroundColor: backgroundColor,\n      interpolate: interpolate,\n      isActive: isActive,\n      activeOpacity: activeOpacity,\n      activeScale: activeScale,\n      interpolateColor: interpolateColor\n    };\n    _f.asString = \"function _f(){const{feedbackColor,backgroundColor,interpolate,isActive,activeOpacity,activeScale,interpolateColor}=jsThis._closure;{const activeColor=feedbackColor||backgroundColor;const opacity=interpolate(isActive.value,[0,1],[1,activeOpacity]);const scale=interpolate(isActive.value,[0,1],[1,activeScale]);return{backgroundColor:!feedbackColor?backgroundColor:interpolateColor(isActive.value,[0,1],[backgroundColor,activeColor]),opacity:opacity,transform:[{scale:scale}]};}}\";\n    _f.__workletHash = 16677049926047;\n    _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js (81:41)\";\n    _f.__optimalization = 2;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [backgroundColor, feedbackColor]);\n  var Container = props.onLongPress ? LongPressGestureHandler : View;\n  return _jsx(TapGestureHandler, {\n    onGestureEvent: tapGestureHandler,\n    shouldCancelWhenOutside: true,\n    enabled: !disabled,\n    children: _jsx(Reanimated.View, {\n      children: _jsx(Container, {\n        onGestureEvent: longPressGestureHandler,\n        shouldCancelWhenOutside: true,\n        children: _jsx(Reanimated.View, _objectSpread(_objectSpread({}, others), {}, {\n          ref: forwardedRef,\n          style: [borderRadius && {\n            borderRadius: borderRadius\n          }, flexStyle, paddings, margins, alignments, {\n            backgroundColor: backgroundColor\n          }, style, animatedStyle],\n          children: children\n        }))\n      })\n    })\n  });\n}\n\nTouchableOpacity.displayName = 'Incubator.TouchableOpacity';\nexport default asBaseComponent(forwardRef(TouchableOpacity));","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js"],"names":["React","useCallback","useMemo","Reanimated","useAnimatedGestureHandler","useAnimatedStyle","useSharedValue","withTiming","interpolate","interpolateColor","runOnJS","TapGestureHandler","LongPressGestureHandler","asBaseComponent","forwardRef","View","Colors","TouchableOpacity","props","children","modifiers","style","disabled","forwardedRef","feedbackColor","activeOpacity","activeScale","others","borderRadius","paddings","margins","alignments","flexStyle","isActive","isLongPressed","backgroundColor","transparent","onPress","customValue","onLongPress","toggleActive","value","duration","tapGestureHandler","onStart","onEnd","onFail","longPressGestureHandler","onActive","onFinish","animatedStyle","activeColor","opacity","scale","transform","Container","displayName"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming, interpolate, interpolateColor, runOnJS } from 'react-native-reanimated';\nimport { TapGestureHandler, LongPressGestureHandler } from 'react-native-gesture-handler';\nimport { asBaseComponent, forwardRef } from \"../commons/new\";\nimport View from \"../components/view\";\nimport { Colors } from \"../../src/style\";\n\n/**\n * @description: a Better, enhanced TouchableOpacity component\n * @modifiers: flex, margin, padding, background\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TouchableOpacityScreen.js\n */\nfunction TouchableOpacity(props) {\n  const {\n    children,\n    modifiers,\n    style,\n    disabled,\n    forwardedRef,\n    feedbackColor,\n    activeOpacity = 0.2,\n    activeScale = 1,\n    ...others\n  } = props;\n  const {\n    borderRadius,\n    paddings,\n    margins,\n    alignments,\n    flexStyle\n  } = modifiers;\n  const isActive = useSharedValue(0);\n  /* This flag is for fixing an issue with long press triggering twice\n  TODO: Consider revisiting this issue to see if it still occurs */\n\n  const isLongPressed = useSharedValue(false);\n  const backgroundColor = useMemo(() => {\n    return props.backgroundColor || modifiers.backgroundColor || Colors.transparent;\n  }, [props.backgroundColor, modifiers.backgroundColor]);\n  const onPress = useCallback(() => {\n    props.onPress?.(props);\n  }, [props.onPress, props.customValue]);\n  const onLongPress = useCallback(() => {\n    props.onLongPress?.(props);\n  }, [props.onLongPress, props.customValue]);\n\n  const toggleActive = value => {\n    'worklet';\n\n    isActive.value = withTiming(value, {\n      duration: 200\n    });\n  };\n\n  const tapGestureHandler = useAnimatedGestureHandler({\n    onStart: () => {\n      toggleActive(1);\n    },\n    onEnd: () => {\n      toggleActive(0);\n      runOnJS(onPress)();\n    },\n    onFail: () => {\n      if (!isLongPressed.value) {\n        toggleActive(0);\n      }\n    }\n  });\n  const longPressGestureHandler = useAnimatedGestureHandler({\n    onActive: () => {\n      if (!isLongPressed.value) {\n        isLongPressed.value = true;\n        runOnJS(onLongPress)();\n      }\n    },\n    onFinish: () => {\n      toggleActive(0);\n      isLongPressed.value = false;\n    }\n  });\n  const animatedStyle = useAnimatedStyle(() => {\n    const activeColor = feedbackColor || backgroundColor;\n    const opacity = interpolate(isActive.value, [0, 1], [1, activeOpacity]);\n    const scale = interpolate(isActive.value, [0, 1], [1, activeScale]);\n    return {\n      backgroundColor: !feedbackColor ? backgroundColor : interpolateColor(isActive.value, [0, 1], [backgroundColor, activeColor]),\n      opacity,\n      transform: [{\n        scale\n      }]\n    };\n  }, [backgroundColor, feedbackColor]);\n  const Container = props.onLongPress ? LongPressGestureHandler : View;\n  return <TapGestureHandler // @ts-expect-error\n  onGestureEvent={tapGestureHandler} shouldCancelWhenOutside enabled={!disabled}>\n      <Reanimated.View>\n        {\n        /* @ts-expect-error */\n      }\n        <Container onGestureEvent={longPressGestureHandler} shouldCancelWhenOutside>\n          <Reanimated.View {...others} ref={forwardedRef} style={[borderRadius && {\n          borderRadius\n        }, flexStyle, paddings, margins, alignments, {\n          backgroundColor\n        }, style, animatedStyle]}>\n            {children}\n          </Reanimated.View>\n        </Container>\n      </Reanimated.View>\n    </TapGestureHandler>;\n}\n\nTouchableOpacity.displayName = 'Incubator.TouchableOpacity';\nexport default asBaseComponent(forwardRef(TouchableOpacity));"]},"metadata":{},"sourceType":"module"}