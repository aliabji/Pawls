{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport Assets from \"../../assets\";\nimport { Colors, Typography } from \"../../style\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Dialog from \"../dialog\";\nimport Button from \"../button\";\nimport ColorSliderGroup from \"../slider/ColorSliderGroup\";\nimport PanningProvider from \"../panningViews/panningProvider\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar KEYBOARD_HEIGHT = 216;\n\nvar ColorPickerDialog = function (_PureComponent) {\n  _inherits(ColorPickerDialog, _PureComponent);\n\n  var _super = _createSuper(ColorPickerDialog);\n\n  function ColorPickerDialog(props) {\n    var _this;\n\n    _classCallCheck(this, ColorPickerDialog);\n\n    _this = _super.call(this, props);\n    _this.textInput = React.createRef();\n\n    _this.keyboardDidShow = function (e) {\n      if (Constants.isIOS && _this.state.keyboardHeight !== e.endCoordinates.height) {\n        _this.setState({\n          keyboardHeight: e.endCoordinates.height\n        });\n      }\n\n      _this.changeHeight(0);\n    };\n\n    _this.keyboardDidHide = function () {\n      _this.changeHeight(KEYBOARD_HEIGHT);\n    };\n\n    _this.onFocus = function () {\n      _this.changeHeight(0);\n    };\n\n    _this.setFocus = function () {\n      var _this$textInput, _this$textInput$curre;\n\n      (_this$textInput = _this.textInput) == null ? void 0 : (_this$textInput$curre = _this$textInput.current) == null ? void 0 : _this$textInput$curre.focus();\n    };\n\n    _this.applyColor = function (text) {\n      var _this$getValidColorSt = _this.getValidColorString(text),\n          hex = _this$getValidColorSt.hex,\n          valid = _this$getValidColorSt.valid;\n\n      if (hex) {\n        _this.setState({\n          color: Colors.getHSL(hex),\n          text: text,\n          valid: valid\n        });\n      } else {\n        _this.setState({\n          text: text,\n          valid: valid\n        });\n      }\n    };\n\n    _this.onSliderValueChange = function (color) {\n      _this.updateColor(color);\n    };\n\n    _this.onChangeText = function (value) {\n      _this.applyColor(value);\n    };\n\n    _this.onDonePressed = function () {\n      var text = _this.state.text;\n\n      var _this$getValidColorSt2 = _this.getValidColorString(text),\n          hex = _this$getValidColorSt2.hex;\n\n      if (hex) {\n        _this.props.onSubmit == null ? void 0 : _this.props.onSubmit(hex, _this.getTextColor(hex));\n\n        _this.onDismiss();\n      }\n    };\n\n    _this.onDismiss = function () {\n      _this.resetValues();\n\n      _this.props.onDismiss == null ? void 0 : _this.props.onDismiss();\n    };\n\n    var _color = Colors.getHSL(props.initialColor);\n\n    var _text = _this.getColorValue(props.initialColor);\n\n    var _this$getValidColorSt3 = _this.getValidColorString(_text),\n        _valid = _this$getValidColorSt3.valid;\n\n    _this.state = {\n      keyboardHeight: KEYBOARD_HEIGHT,\n      color: _color,\n      text: _text,\n      valid: _valid\n    };\n    return _this;\n  }\n\n  _createClass(ColorPickerDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this.keyboardDidShow);\n      this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.keyboardDidShowListener.remove();\n      this.keyboardDidHideListener.remove();\n    }\n  }, {\n    key: \"changeHeight\",\n    value: function changeHeight(height) {\n      if (Constants.isAndroid && this.state.keyboardHeight !== height) {\n        LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n        this.setState({\n          keyboardHeight: height\n        });\n      }\n    }\n  }, {\n    key: \"getColorValue\",\n    value: function getColorValue(color) {\n      if (!color) {\n        return;\n      }\n\n      return color.replace('#', '');\n    }\n  }, {\n    key: \"getHexColor\",\n    value: function getHexColor(text) {\n      if (!Colors.isTransparent(text)) {\n        var trimmed = text.replace(/\\s+/g, '');\n        var hex = \"#\" + trimmed;\n        return hex;\n      }\n\n      return text;\n    }\n  }, {\n    key: \"getHexString\",\n    value: function getHexString(color) {\n      return _.toUpper(Colors.getHexString(color));\n    }\n  }, {\n    key: \"getTextColor\",\n    value: function getTextColor(color) {\n      return Colors.isDark(color) ? Colors.white : Colors.grey10;\n    }\n  }, {\n    key: \"getValidColorString\",\n    value: function getValidColorString(text) {\n      if (text) {\n        var hex = this.getHexColor(text);\n\n        if (Colors.isValidHex(hex)) {\n          return {\n            hex: hex,\n            valid: true\n          };\n        }\n      }\n\n      return {\n        undefined: undefined,\n        valid: false\n      };\n    }\n  }, {\n    key: \"updateColor\",\n    value: function updateColor(color) {\n      var hex = this.getHexString(color);\n      var text = this.getColorValue(hex);\n      this.setState({\n        color: color,\n        text: text,\n        valid: true\n      });\n    }\n  }, {\n    key: \"resetValues\",\n    value: function resetValues() {\n      var initialColor = this.props.initialColor;\n      var color = Colors.getHSL(initialColor);\n      var text = this.getColorValue(initialColor);\n\n      var _this$getValidColorSt4 = this.getValidColorString(text),\n          valid = _this$getValidColorSt4.valid;\n\n      this.setState({\n        color: color,\n        text: text,\n        valid: valid\n      });\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var _this$props = this.props,\n          doneButtonColor = _this$props.doneButtonColor,\n          accessibilityLabels = _this$props.accessibilityLabels;\n      var valid = this.state.valid;\n      return _jsxs(View, {\n        row: true,\n        spread: true,\n        \"bg-white\": true,\n        \"paddingH-20\": true,\n        style: styles.header,\n        children: [_jsx(Button, {\n          link: true,\n          iconSource: Assets.icons.x,\n          iconStyle: {\n            tintColor: Colors.grey10\n          },\n          onPress: this.onDismiss,\n          accessibilityLabel: _.get(accessibilityLabels, 'dismissButton')\n        }), _jsx(Button, {\n          color: doneButtonColor,\n          disabled: !valid,\n          link: true,\n          iconSource: Assets.icons.check,\n          onPress: this.onDonePressed,\n          accessibilityLabel: _.get(accessibilityLabels, 'doneButton')\n        })]\n      });\n    }\n  }, {\n    key: \"renderSliders\",\n    value: function renderSliders() {\n      var _this$state = this.state,\n          keyboardHeight = _this$state.keyboardHeight,\n          color = _this$state.color;\n      var colorValue = color.a === 0 ? Colors.black : Colors.getHexString(color);\n      return _jsx(ColorSliderGroup, {\n        initialColor: colorValue,\n        containerStyle: [styles.sliderGroup, {\n          height: keyboardHeight\n        }],\n        sliderContainerStyle: styles.slider,\n        showLabels: true,\n        labelsStyle: styles.label,\n        onValueChange: this.onSliderValueChange,\n        accessible: false\n      });\n    }\n  }, {\n    key: \"renderPreview\",\n    value: function renderPreview() {\n      var _this$props2 = this.props,\n          accessibilityLabels = _this$props2.accessibilityLabels,\n          previewInputStyle = _this$props2.previewInputStyle;\n      var _this$state2 = this.state,\n          color = _this$state2.color,\n          text = _this$state2.text;\n      var hex = this.getHexString(color);\n      var textColor = this.getTextColor(hex);\n      var fontScale = PixelRatio.getFontScale();\n      var value = Colors.isTransparent(text) ? '000000' : text;\n      return _jsx(View, {\n        style: [styles.preview, {\n          backgroundColor: hex\n        }],\n        children: _jsxs(TouchableOpacity, {\n          center: true,\n          onPress: this.setFocus,\n          activeOpacity: 1,\n          accessible: false,\n          children: [_jsxs(View, {\n            style: styles.inputContainer,\n            children: [_jsx(Text, {\n              text60: true,\n              white: true,\n              \"marginL-13\": true,\n              \"marginR-5\": Constants.isIOS,\n              style: {\n                color: textColor,\n                transform: [{\n                  scaleX: I18nManager.isRTL ? -1 : 1\n                }]\n              },\n              accessible: false,\n              children: \"#\"\n            }), _jsx(TextInput, {\n              ref: this.textInput,\n              value: value,\n              maxLength: 6,\n              numberOfLines: 1,\n              onChangeText: this.onChangeText,\n              style: [styles.input, {\n                color: textColor,\n                width: value ? (value.length + 1) * 16.5 * fontScale : undefined\n              }, Constants.isAndroid && {\n                padding: 0\n              }, previewInputStyle],\n              selectionColor: textColor,\n              underlineColorAndroid: \"transparent\",\n              autoCorrect: false,\n              autoComplete: 'off',\n              autoCapitalize: 'characters',\n              returnKeyType: 'done',\n              enablesReturnKeyAutomatically: true,\n              onFocus: this.onFocus,\n              accessibilityLabel: accessibilityLabels == null ? void 0 : accessibilityLabels.input\n            })]\n          }), _jsx(View, {\n            style: [{\n              backgroundColor: textColor\n            }, styles.underline]\n          })]\n        })\n      });\n    }\n  }, {\n    key: \"renderDialog\",\n    value: function renderDialog() {\n      var _this$props3 = this.props,\n          visible = _this$props3.visible,\n          dialogProps = _this$props3.dialogProps,\n          testID = _this$props3.testID;\n      return _jsxs(Dialog, _objectSpread(_objectSpread({\n        visible: visible,\n        width: \"100%\",\n        bottom: true,\n        centerH: true,\n        onDismiss: this.onDismiss,\n        containerStyle: styles.dialog,\n        panDirection: PanningProvider.Directions.DOWN,\n        testID: testID + \".dialog\",\n        supportedOrientations: ['portrait', 'landscape', 'landscape-left', 'landscape-right']\n      }, dialogProps), {}, {\n        children: [this.renderHeader(), this.renderPreview(), this.renderSliders()]\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.renderDialog();\n    }\n  }]);\n\n  return ColorPickerDialog;\n}(PureComponent);\n\nColorPickerDialog.propTypes = {\n  initialColor: _pt.string,\n  onSubmit: _pt.func,\n  dialogProps: _pt.object,\n  doneButtonColor: _pt.string,\n  accessibilityLabels: _pt.shape({\n    dismissButton: _pt.string,\n    doneButton: _pt.string,\n    input: _pt.string\n  })\n};\nColorPickerDialog.displayName = 'ColorPicker';\nColorPickerDialog.defaultProps = {\n  initialColor: Colors.grey80\n};\nexport default asBaseComponent(ColorPickerDialog);\nvar BORDER_RADIUS = 12;\nvar styles = StyleSheet.create({\n  dialog: {\n    backgroundColor: Colors.white,\n    borderTopLeftRadius: BORDER_RADIUS,\n    borderTopRightRadius: BORDER_RADIUS\n  },\n  preview: {\n    height: 200,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  header: {\n    height: 56,\n    borderTopLeftRadius: BORDER_RADIUS,\n    borderTopRightRadius: BORDER_RADIUS\n  },\n  inputContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    marginBottom: Constants.isAndroid ? 5 : 8,\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  },\n  input: _objectSpread(_objectSpread({}, Typography.text60), {}, {\n    letterSpacing: 3,\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  }),\n  underline: {\n    height: 1.5,\n    width: Constants.isAndroid ? 119 : 134,\n    marginRight: Constants.isAndroid ? 13 : 8\n  },\n  sliderGroup: {\n    paddingTop: 12,\n    marginHorizontal: 20\n  },\n  slider: {\n    marginBottom: 15,\n    height: 26\n  },\n  label: {\n    marginBottom: 3\n  }\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/colorPicker/ColorPickerDialog.js"],"names":["_pt","_","React","PureComponent","Constants","asBaseComponent","Assets","Colors","Typography","View","Text","TouchableOpacity","Dialog","Button","ColorSliderGroup","PanningProvider","KEYBOARD_HEIGHT","ColorPickerDialog","props","textInput","createRef","keyboardDidShow","e","isIOS","state","keyboardHeight","endCoordinates","height","setState","changeHeight","keyboardDidHide","onFocus","setFocus","current","focus","applyColor","text","getValidColorString","hex","valid","color","getHSL","onSliderValueChange","updateColor","onChangeText","value","onDonePressed","onSubmit","getTextColor","onDismiss","resetValues","initialColor","getColorValue","keyboardDidShowListener","Keyboard","addListener","keyboardDidHideListener","remove","isAndroid","LayoutAnimation","configureNext","Presets","easeInEaseOut","replace","isTransparent","trimmed","toUpper","getHexString","isDark","white","grey10","getHexColor","isValidHex","undefined","doneButtonColor","accessibilityLabels","styles","header","icons","x","tintColor","get","check","colorValue","a","black","sliderGroup","slider","label","previewInputStyle","textColor","fontScale","PixelRatio","getFontScale","preview","backgroundColor","inputContainer","transform","scaleX","I18nManager","isRTL","input","width","length","padding","underline","visible","dialogProps","testID","dialog","Directions","DOWN","renderHeader","renderPreview","renderSliders","renderDialog","propTypes","string","func","object","shape","dismissButton","doneButton","displayName","defaultProps","grey80","BORDER_RADIUS","StyleSheet","create","borderTopLeftRadius","borderTopRightRadius","alignItems","justifyContent","flexDirection","marginBottom","text60","letterSpacing","marginRight","paddingTop","marginHorizontal"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { LayoutAnimation, StyleSheet, Keyboard, TextInput, PixelRatio, I18nManager } from 'react-native';\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport Assets from \"../../assets\";\nimport { Colors, Typography } from \"../../style\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport Dialog from \"../dialog\";\nimport Button from \"../button\";\nimport ColorSliderGroup from \"../slider/ColorSliderGroup\";\nimport PanningProvider from \"../panningViews/panningProvider\";\nconst KEYBOARD_HEIGHT = 216;\n/**\n * @description: A color picker dialog component\n * @extends: Dialog\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx\n */\n\nclass ColorPickerDialog extends PureComponent {\n  static propTypes = {\n    /**\n       * The initial color to pass the picker dialog\n       */\n    initialColor: _pt.string,\n\n    /**\n       * onSubmit callback for the picker dialog color change\n       */\n    onSubmit: _pt.func,\n\n    /**\n       * Props to pass the Dialog component // TODO: deprecate 'dialogProps' prop\n       */\n    dialogProps: _pt.object,\n\n    /**\n       * Ok (v) button color\n       */\n\n    /**\n       * Accessibility labels as an object of strings, ex. {addButton: 'add custom color using hex code', dismissButton: 'dismiss', doneButton: 'done', input: 'custom hex color code'}\n       */\n    doneButtonColor: _pt.string,\n    accessibilityLabels: _pt.shape({\n      dismissButton: _pt.string,\n      doneButton: _pt.string,\n      input: _pt.string\n    })\n  };\n  static displayName = 'ColorPicker';\n  static defaultProps = {\n    initialColor: Colors.grey80\n  };\n\n  constructor(props) {\n    super(props);\n    const color = Colors.getHSL(props.initialColor);\n    const text = this.getColorValue(props.initialColor);\n    const {\n      valid\n    } = this.getValidColorString(text);\n    this.state = {\n      keyboardHeight: KEYBOARD_HEIGHT,\n      color,\n      text,\n      valid\n    };\n  }\n\n  textInput = React.createRef(); //@ts-ignore\n\n  componentDidMount() {\n    this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this.keyboardDidShow);\n    this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);\n  }\n\n  componentWillUnmount() {\n    this.keyboardDidShowListener.remove();\n    this.keyboardDidHideListener.remove();\n  }\n\n  keyboardDidShow = e => {\n    if (Constants.isIOS && this.state.keyboardHeight !== e.endCoordinates.height) {\n      this.setState({\n        keyboardHeight: e.endCoordinates.height\n      });\n    } // For down arrow button in Android keyboard\n\n\n    this.changeHeight(0);\n  };\n  keyboardDidHide = () => {\n    this.changeHeight(KEYBOARD_HEIGHT);\n  };\n  onFocus = () => {\n    this.changeHeight(0);\n  };\n  setFocus = () => {\n    this.textInput?.current?.focus();\n  };\n\n  changeHeight(height) {\n    if (Constants.isAndroid && this.state.keyboardHeight !== height) {\n      LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n      this.setState({\n        keyboardHeight: height\n      });\n    }\n  }\n\n  getColorValue(color) {\n    if (!color) {\n      return;\n    }\n\n    return color.replace('#', '');\n  }\n\n  getHexColor(text) {\n    if (!Colors.isTransparent(text)) {\n      const trimmed = text.replace(/\\s+/g, '');\n      const hex = `#${trimmed}`;\n      return hex;\n    }\n\n    return text;\n  }\n\n  getHexString(color) {\n    return _.toUpper(Colors.getHexString(color));\n  }\n\n  getTextColor(color) {\n    return Colors.isDark(color) ? Colors.white : Colors.grey10;\n  }\n\n  getValidColorString(text) {\n    if (text) {\n      const hex = this.getHexColor(text);\n\n      if (Colors.isValidHex(hex)) {\n        return {\n          hex,\n          valid: true\n        };\n      }\n    }\n\n    return {\n      undefined,\n      valid: false\n    };\n  }\n\n  applyColor = text => {\n    const {\n      hex,\n      valid\n    } = this.getValidColorString(text);\n\n    if (hex) {\n      this.setState({\n        color: Colors.getHSL(hex),\n        text,\n        valid\n      });\n    } else {\n      this.setState({\n        text,\n        valid\n      });\n    }\n  };\n\n  updateColor(color) {\n    const hex = this.getHexString(color);\n    const text = this.getColorValue(hex);\n    this.setState({\n      color,\n      text,\n      valid: true\n    });\n  }\n\n  resetValues() {\n    const {\n      initialColor\n    } = this.props;\n    const color = Colors.getHSL(initialColor);\n    const text = this.getColorValue(initialColor);\n    const {\n      valid\n    } = this.getValidColorString(text);\n    this.setState({\n      color,\n      text,\n      valid\n    });\n  }\n\n  onSliderValueChange = color => {\n    this.updateColor(color);\n  };\n  onChangeText = value => {\n    this.applyColor(value);\n  };\n  onDonePressed = () => {\n    const {\n      text\n    } = this.state;\n    const {\n      hex\n    } = this.getValidColorString(text);\n\n    if (hex) {\n      this.props.onSubmit?.(hex, this.getTextColor(hex));\n      this.onDismiss();\n    }\n  };\n  onDismiss = () => {\n    this.resetValues();\n    this.props.onDismiss?.();\n  };\n\n  renderHeader() {\n    const {\n      doneButtonColor,\n      accessibilityLabels\n    } = this.props;\n    const {\n      valid\n    } = this.state;\n    return <View row spread bg-white paddingH-20 style={styles.header}>\n        <Button link iconSource={Assets.icons.x} iconStyle={{\n        tintColor: Colors.grey10\n      }} onPress={this.onDismiss} accessibilityLabel={_.get(accessibilityLabels, 'dismissButton')} />\n        <Button color={doneButtonColor} disabled={!valid} link iconSource={Assets.icons.check} onPress={this.onDonePressed} accessibilityLabel={_.get(accessibilityLabels, 'doneButton')} />\n      </View>;\n  }\n\n  renderSliders() {\n    const {\n      keyboardHeight,\n      color\n    } = this.state;\n    const colorValue = color.a === 0 ? Colors.black : Colors.getHexString(color);\n    return <ColorSliderGroup initialColor={colorValue} containerStyle={[styles.sliderGroup, {\n      height: keyboardHeight\n    }]} sliderContainerStyle={styles.slider} showLabels labelsStyle={styles.label} onValueChange={this.onSliderValueChange} accessible={false} />;\n  }\n\n  renderPreview() {\n    const {\n      accessibilityLabels,\n      previewInputStyle\n    } = this.props;\n    const {\n      color,\n      text\n    } = this.state;\n    const hex = this.getHexString(color);\n    const textColor = this.getTextColor(hex);\n    const fontScale = PixelRatio.getFontScale();\n    const value = Colors.isTransparent(text) ? '000000' : text;\n    return <View style={[styles.preview, {\n      backgroundColor: hex\n    }]}>\n        <TouchableOpacity center onPress={this.setFocus} activeOpacity={1} accessible={false}>\n          <View style={styles.inputContainer}>\n            <Text text60 white marginL-13 marginR-5={Constants.isIOS} style={{\n            color: textColor,\n            transform: [{\n              scaleX: I18nManager.isRTL ? -1 : 1\n            }]\n          }} accessible={false}>\n              #\n            </Text>\n            <TextInput ref={this.textInput} value={value} maxLength={6} numberOfLines={1} onChangeText={this.onChangeText} style={[styles.input, {\n            color: textColor,\n            width: value ? (value.length + 1) * 16.5 * fontScale : undefined\n          }, Constants.isAndroid && {\n            padding: 0\n          }, previewInputStyle]} selectionColor={textColor} underlineColorAndroid=\"transparent\" autoCorrect={false} autoComplete={'off'} autoCapitalize={'characters'} // keyboardType={'numbers-and-punctuation'} // doesn't work with `autoCapitalize`\n          returnKeyType={'done'} enablesReturnKeyAutomatically onFocus={this.onFocus} accessibilityLabel={accessibilityLabels?.input} />\n          </View>\n          <View style={[{\n          backgroundColor: textColor\n        }, styles.underline]} />\n        </TouchableOpacity>\n      </View>;\n  }\n\n  renderDialog() {\n    const {\n      visible,\n      dialogProps,\n      testID\n    } = this.props;\n    return <Dialog visible={visible} //TODO: pass all Dialog props instead\n    width=\"100%\" bottom centerH onDismiss={this.onDismiss} containerStyle={styles.dialog} panDirection={PanningProvider.Directions.DOWN} testID={`${testID}.dialog`} supportedOrientations={['portrait', 'landscape', 'landscape-left', 'landscape-right']} // iOS only\n    {...dialogProps}>\n        {this.renderHeader()}\n        {this.renderPreview()}\n        {this.renderSliders()}\n      </Dialog>;\n  }\n\n  render() {\n    return this.renderDialog();\n  }\n\n}\n\nexport default asBaseComponent(ColorPickerDialog);\nconst BORDER_RADIUS = 12;\nconst styles = StyleSheet.create({\n  dialog: {\n    backgroundColor: Colors.white,\n    borderTopLeftRadius: BORDER_RADIUS,\n    borderTopRightRadius: BORDER_RADIUS\n  },\n  preview: {\n    height: 200,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  header: {\n    height: 56,\n    borderTopLeftRadius: BORDER_RADIUS,\n    borderTopRightRadius: BORDER_RADIUS\n  },\n  inputContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    marginBottom: Constants.isAndroid ? 5 : 8,\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  },\n  input: { ...Typography.text60,\n    letterSpacing: 3,\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  },\n  underline: {\n    height: 1.5,\n    width: Constants.isAndroid ? 119 : 134,\n    marginRight: Constants.isAndroid ? 13 : 8\n  },\n  sliderGroup: {\n    paddingTop: 12,\n    marginHorizontal: 20\n  },\n  slider: {\n    marginBottom: 15,\n    height: 26\n  },\n  label: {\n    marginBottom: 3\n  }\n});"]},"metadata":{},"sourceType":"module"}