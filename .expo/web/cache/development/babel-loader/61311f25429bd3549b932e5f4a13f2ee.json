{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { Constants } from \"../../../commons/new\";\nimport SafeAreaSpacerView from \"../../../../lib/components/SafeArea/SafeAreaSpacerView\";\nimport { AlignmentType } from \"./useAlignmentStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useSafeAreaView = function useSafeAreaView(props) {\n  var useSafeArea = props.useSafeArea,\n      alignmentType = props.alignmentType;\n  var topSafeArea = useMemo(function () {\n    var hasTopSafeArea = useSafeArea && alignmentType !== AlignmentType.BOTTOM;\n\n    if (hasTopSafeArea) {\n      return _jsx(SafeAreaSpacerView, {});\n    }\n  }, [useSafeArea, alignmentType]);\n  var bottomSafeArea = useMemo(function () {\n    var hasBottomSafeArea = Constants.isIphoneX && useSafeArea && alignmentType === AlignmentType.BOTTOM;\n\n    if (hasBottomSafeArea) {\n      return _jsx(SafeAreaSpacerView, {});\n    }\n  }, [useSafeArea, alignmentType]);\n  return {\n    topSafeArea: topSafeArea,\n    bottomSafeArea: bottomSafeArea\n  };\n};\n\nexport default useSafeAreaView;","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/Dialog/helpers/useSafeAreaView.js"],"names":["React","useMemo","Constants","SafeAreaSpacerView","AlignmentType","useSafeAreaView","props","useSafeArea","alignmentType","topSafeArea","hasTopSafeArea","BOTTOM","bottomSafeArea","hasBottomSafeArea","isIphoneX"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,SAAT;AACA,OAAOC,kBAAP;AACA,SAASC,aAAT;;;AAQA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,MACEC,WADF,GAGID,KAHJ,CACEC,WADF;AAAA,MAEEC,aAFF,GAGIF,KAHJ,CAEEE,aAFF;AAIA,MAAMC,WAAW,GAAGR,OAAO,CAAC,YAAM;AAChC,QAAMS,cAAc,GAAGH,WAAW,IAAIC,aAAa,KAAKJ,aAAa,CAACO,MAAtE;;AAEA,QAAID,cAAJ,EAAoB;AAClB,aAAO,KAAC,kBAAD,KAAP;AACD;AACF,GAN0B,EAMxB,CAACH,WAAD,EAAcC,aAAd,CANwB,CAA3B;AAOA,MAAMI,cAAc,GAAGX,OAAO,CAAC,YAAM;AACnC,QAAMY,iBAAiB,GAAGX,SAAS,CAACY,SAAV,IAAuBP,WAAvB,IAAsCC,aAAa,KAAKJ,aAAa,CAACO,MAAhG;;AAEA,QAAIE,iBAAJ,EAAuB;AACrB,aAAO,KAAC,kBAAD,KAAP;AACD;AACF,GAN6B,EAM3B,CAACN,WAAD,EAAcC,aAAd,CAN2B,CAA9B;AAOA,SAAO;AACLC,IAAAA,WAAW,EAAXA,WADK;AAELG,IAAAA,cAAc,EAAdA;AAFK,GAAP;AAID,CAvBD;;AAyBA,eAAeP,eAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport { Constants } from \"../../../commons/new\";\nimport SafeAreaSpacerView from \"../../../../lib/components/SafeArea/SafeAreaSpacerView\";\nimport { AlignmentType } from \"./useAlignmentStyle\";\n\n/**\n * TODO: technically useSafeArea can be sent to either PanView or TransitionView.\n * however that causes some performance \\ UI bugs (when there is a safe area).\n * TransitionView is less pronouns than PanView but still not good.\n * We think this is because of reanimation 2, we should re-visit this problem later.\n */\nconst useSafeAreaView = props => {\n  const {\n    useSafeArea,\n    alignmentType\n  } = props;\n  const topSafeArea = useMemo(() => {\n    const hasTopSafeArea = useSafeArea && alignmentType !== AlignmentType.BOTTOM;\n\n    if (hasTopSafeArea) {\n      return <SafeAreaSpacerView />;\n    }\n  }, [useSafeArea, alignmentType]);\n  const bottomSafeArea = useMemo(() => {\n    const hasBottomSafeArea = Constants.isIphoneX && useSafeArea && alignmentType === AlignmentType.BOTTOM;\n\n    if (hasBottomSafeArea) {\n      return <SafeAreaSpacerView />;\n    }\n  }, [useSafeArea, alignmentType]);\n  return {\n    topSafeArea,\n    bottomSafeArea\n  };\n};\n\nexport default useSafeAreaView;"]},"metadata":{},"sourceType":"module"}