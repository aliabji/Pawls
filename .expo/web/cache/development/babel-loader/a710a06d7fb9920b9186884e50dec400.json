{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useState, useEffect } from 'react';\nimport { Text, View } from \"../components/Themed\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport * as Location from 'expo-location';\nimport { listParksApiUrl } from \"../constants/google\";\nimport { createPark } from \"../utils/apiService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function AddPark() {\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nearbyParks = _useState6[0],\n      setNearbyParks = _useState6[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              setErrorMsg('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              setLocation(location);\n              fetch(listParksApiUrl(location.coords.latitude, location.coords.longitude)).then(function (res) {\n                return res.json();\n              }).then(function (data) {\n                return setNearbyParks(data);\n              }).catch(function (err) {\n                return console.log('error', err);\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var postPark = function postPark(park) {\n    return _regeneratorRuntime.async(function postPark$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            try {\n              createPark({\n                name: park.name,\n                place_id: park.place_id,\n                vicinity: park.vicinity\n              }).then(function (res) {\n                console.log(res);\n              });\n            } catch (err) {\n              console.log(\"Unrecoverable error occured \", err);\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Select a park to take your dog too\"\n    }), _jsx(ScrollView, {\n      children: nearbyParks && nearbyParks.results && nearbyParks.results.map(function (park, key) {\n        return _jsxs(View, {\n          children: [_jsxs(Text, {\n            children: [park.name, \" \", park.rating, \" \", park.vicinity]\n          }), _jsx(Button, {\n            title: \"Add Park\",\n            onPress: function onPress() {\n              return postPark(park);\n            }\n          })]\n        }, key);\n      })\n    }), _jsx(Text, {\n      children: \"testS\"\n    }), _jsx(GooglePlacesAutocomplete, {\n      placeholder: \"parks\",\n      GooglePlacesSearchQuery: {\n        rankby: 'distance',\n        type: 'park'\n      },\n      query: {\n        key: \"AIzaSyCu79by4xES3ho37NxFqyQacX_Ijxm_lVE\"\n      },\n      onPress: function onPress(data, details) {\n        return console.log(data, details);\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  subHeading: {\n    fontSize: 15\n  }\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/components/AddPark.tsx"],"names":["useState","useEffect","Text","View","GooglePlacesAutocomplete","Location","listParksApiUrl","createPark","AddPark","undefined","location","setLocation","errorMsg","setErrorMsg","nearbyParks","setNearbyParks","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","fetch","coords","latitude","longitude","then","res","json","data","catch","err","console","log","postPark","park","name","place_id","vicinity","styles","container","title","results","map","key","rating","rankby","type","details","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","subHeading"],"mappings":"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","sourcesContent":["import { StyleSheet, Button, ScrollView } from 'react-native';\nimport {useState, useEffect} from 'react';\nimport { Text, View } from '../components/Themed';\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport * as Location from 'expo-location';\nimport {ParkDisplay} from '../components/ParkDisplay';\nimport {listParksApiUrl} from '../constants/google';\nimport {createPark} from '../utils/apiService';\n\nexport default function AddPark(){\n    const [location, setLocation] = useState<any>(undefined)\n    const [errorMsg, setErrorMsg] = useState<string>();\n    const [nearbyParks, setNearbyParks] = useState<any>(undefined);\n\n    useEffect(() => {\n        (async () => {\n          let { status } = await Location.requestForegroundPermissionsAsync();\n          if (status !== 'granted') {\n            setErrorMsg('Permission to access location was denied');\n            return;\n          }\n    \n          let location = await Location.getCurrentPositionAsync({});\n          setLocation(location);\n\n          fetch(listParksApiUrl(location.coords.latitude, location.coords.longitude)).then(res => res.json()).then(data => setNearbyParks(data)).catch(err => console.log('error', err))\n        })();\n      }, []);\n\n    const postPark = async (park: any) => {\n        try {\n            createPark({name: park.name, place_id: park.place_id, vicinity: park.vicinity}).then((res) => {\n                console.log(res)\n            })\n        } catch (err) {\n          console.log(\"Unrecoverable error occured \", err)\n        }\n    }\n\n    return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Select a park to take your dog too</Text>\n      <ScrollView>\n        {nearbyParks && nearbyParks.results && nearbyParks.results.map((park: any, key: any) => {\n            return (\n                <View key={key}>\n                    <Text>{park.name} {park.rating} {park.vicinity}</Text>\n                    <Button title=\"Add Park\" onPress={() => postPark(park)} />\n                </View>\n            )\n        })\n        }\n      </ScrollView>\n      <Text>testS</Text>\n      <GooglePlacesAutocomplete\n        placeholder=\"parks\"\n        GooglePlacesSearchQuery={\n            { rankby: 'distance', type: 'park' }\n        }\n        query={\n            {\n                key: process.env.GOOGLE_PLACES_API_KEY,\n            }\n        }\n        onPress={(data, details) => console.log(data, details)}\n        \n      />\n\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  subHeading: {\n    fontSize: 15,\n    // fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}