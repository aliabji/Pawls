{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"modifiers\", \"fieldStyle\", \"dynamicFieldStyle\", \"containerStyle\", \"floatingPlaceholder\", \"floatingPlaceholderColor\", \"floatingPlaceholderStyle\", \"floatOnFocus\", \"hint\", \"label\", \"labelColor\", \"labelStyle\", \"labelProps\", \"leadingAccessory\", \"trailingAccessory\", \"bottomAccessory\", \"enableErrors\", \"validationMessageStyle\", \"validationMessagePosition\", \"showCharCounter\", \"charCounterStyle\", \"placeholder\", \"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useMemo } from 'react';\nimport { omit } from 'lodash';\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport View from \"../../components/view\";\nimport { Colors } from \"../../style\";\nimport { useMeasure } from \"../../hooks\";\nimport { ValidationMessagePosition } from \"./types\";\nimport { shouldHidePlaceholder } from \"./Presenter\";\nimport Input from \"./Input\";\nimport ValidationMessage from \"./ValidationMessage\";\nimport Label from \"./Label\";\nimport FieldContext from \"./FieldContext\";\nimport useFieldState from \"./useFieldState\";\nimport usePreset from \"./usePreset\";\nimport FloatingPlaceholder from \"./FloatingPlaceholder\";\nimport CharCounter from \"./CharCounter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TextField = function TextField(props) {\n  var _usePreset = usePreset(props),\n      modifiers = _usePreset.modifiers,\n      fieldStyleProp = _usePreset.fieldStyle,\n      dynamicFieldStyle = _usePreset.dynamicFieldStyle,\n      containerStyle = _usePreset.containerStyle,\n      floatingPlaceholder = _usePreset.floatingPlaceholder,\n      floatingPlaceholderColor = _usePreset.floatingPlaceholderColor,\n      floatingPlaceholderStyle = _usePreset.floatingPlaceholderStyle,\n      floatOnFocus = _usePreset.floatOnFocus,\n      hint = _usePreset.hint,\n      label = _usePreset.label,\n      labelColor = _usePreset.labelColor,\n      labelStyle = _usePreset.labelStyle,\n      labelProps = _usePreset.labelProps,\n      leadingAccessory = _usePreset.leadingAccessory,\n      trailingAccessory = _usePreset.trailingAccessory,\n      bottomAccessory = _usePreset.bottomAccessory,\n      enableErrors = _usePreset.enableErrors,\n      validationMessageStyle = _usePreset.validationMessageStyle,\n      _usePreset$validation = _usePreset.validationMessagePosition,\n      validationMessagePosition = _usePreset$validation === void 0 ? ValidationMessagePosition.BOTTOM : _usePreset$validation,\n      showCharCounter = _usePreset.showCharCounter,\n      charCounterStyle = _usePreset.charCounterStyle,\n      placeholder = _usePreset.placeholder,\n      children = _usePreset.children,\n      others = _objectWithoutProperties(_usePreset, _excluded);\n\n  var _useMeasure = useMeasure(),\n      leadingAccessoryRef = _useMeasure.ref,\n      leadingAccessoryMeasurements = _useMeasure.measurements;\n\n  var _useFieldState = useFieldState(others),\n      onFocus = _useFieldState.onFocus,\n      onBlur = _useFieldState.onBlur,\n      onChangeText = _useFieldState.onChangeText,\n      fieldState = _useFieldState.fieldState,\n      validateField = _useFieldState.validateField;\n\n  var context = useMemo(function () {\n    return _objectSpread(_objectSpread({}, fieldState), {}, {\n      disabled: others.editable === false,\n      validateField: validateField\n    });\n  }, [fieldState, others.editable, validateField]);\n  var leadingAccessoryClone = useMemo(function () {\n    if (leadingAccessory) {\n      return React.cloneElement(leadingAccessory, {\n        ref: leadingAccessoryRef\n      });\n    }\n  }, [leadingAccessory]);\n  var margins = modifiers.margins,\n      paddings = modifiers.paddings,\n      typography = modifiers.typography,\n      color = modifiers.color;\n  var typographyStyle = useMemo(function () {\n    return omit(typography, 'lineHeight');\n  }, [typography]);\n  var colorStyle = useMemo(function () {\n    return color && {\n      color: color\n    };\n  }, [color]);\n  var fieldStyle = [fieldStyleProp, dynamicFieldStyle == null ? void 0 : dynamicFieldStyle(context, {\n    preset: props.preset\n  })];\n  var hidePlaceholder = shouldHidePlaceholder(props, fieldState.isFocused);\n  return _jsx(FieldContext.Provider, {\n    value: context,\n    children: _jsxs(View, {\n      style: [margins, containerStyle],\n      children: [_jsx(Label, {\n        label: label,\n        labelColor: labelColor,\n        labelStyle: labelStyle,\n        labelProps: labelProps,\n        floatingPlaceholder: floatingPlaceholder,\n        validationMessagePosition: validationMessagePosition,\n        testID: props.testID + \".label\"\n      }), validationMessagePosition === ValidationMessagePosition.TOP && _jsx(ValidationMessage, {\n        enableErrors: enableErrors,\n        validate: others.validate,\n        validationMessage: others.validationMessage,\n        validationMessageStyle: validationMessageStyle,\n        testID: props.testID + \".validationMessage\"\n      }), _jsxs(View, {\n        style: [paddings, fieldStyle],\n        row: true,\n        centerV: true,\n        children: [leadingAccessoryClone, _jsxs(View, {\n          flex: true,\n          row: true,\n          children: [floatingPlaceholder && _jsx(FloatingPlaceholder, {\n            placeholder: placeholder,\n            floatingPlaceholderStyle: [typographyStyle, floatingPlaceholderStyle],\n            floatingPlaceholderColor: floatingPlaceholderColor,\n            floatOnFocus: floatOnFocus,\n            validationMessagePosition: validationMessagePosition,\n            extraOffset: leadingAccessoryMeasurements == null ? void 0 : leadingAccessoryMeasurements.width,\n            testID: props.testID + \".floatingPlaceholder\"\n          }), children || _jsx(Input, _objectSpread(_objectSpread({\n            placeholderTextColor: hidePlaceholder ? 'transparent' : Colors.grey30\n          }, others), {}, {\n            style: [typographyStyle, colorStyle, others.style],\n            onFocus: onFocus,\n            onBlur: onBlur,\n            onChangeText: onChangeText,\n            placeholder: placeholder,\n            hint: hint\n          }))]\n        }), trailingAccessory]\n      }), _jsxs(View, {\n        row: true,\n        spread: true,\n        children: [validationMessagePosition === ValidationMessagePosition.BOTTOM && _jsx(ValidationMessage, {\n          enableErrors: enableErrors,\n          validate: others.validate,\n          validationMessage: others.validationMessage,\n          validationMessageStyle: validationMessageStyle,\n          retainSpace: true,\n          testID: props.testID + \".validationMessage\"\n        }), bottomAccessory, showCharCounter && _jsx(CharCounter, {\n          maxLength: others.maxLength,\n          charCounterStyle: charCounterStyle,\n          testID: props.testID + \".charCounter\"\n        })]\n      })]\n    })\n  });\n};\n\nTextField.displayName = 'Incubator.TextField';\nTextField.validationMessagePositions = ValidationMessagePosition;\nexport default asBaseComponent(forwardRef(TextField));","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TextField/index.js"],"names":["React","useMemo","omit","asBaseComponent","forwardRef","View","Colors","useMeasure","ValidationMessagePosition","shouldHidePlaceholder","Input","ValidationMessage","Label","FieldContext","useFieldState","usePreset","FloatingPlaceholder","CharCounter","TextField","props","modifiers","fieldStyleProp","fieldStyle","dynamicFieldStyle","containerStyle","floatingPlaceholder","floatingPlaceholderColor","floatingPlaceholderStyle","floatOnFocus","hint","label","labelColor","labelStyle","labelProps","leadingAccessory","trailingAccessory","bottomAccessory","enableErrors","validationMessageStyle","validationMessagePosition","BOTTOM","showCharCounter","charCounterStyle","placeholder","children","others","leadingAccessoryRef","ref","leadingAccessoryMeasurements","measurements","onFocus","onBlur","onChangeText","fieldState","validateField","context","disabled","editable","leadingAccessoryClone","cloneElement","margins","paddings","typography","color","typographyStyle","colorStyle","preset","hidePlaceholder","isFocused","testID","TOP","validate","validationMessage","width","grey30","style","maxLength","displayName","validationMessagePositions"],"mappings":"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","sourcesContent":["/**\n * Known issues with React Native TextInput component\n * 1. iOS - input inner padding is off in multiline mode\n * 2. Android - input has minHeight that can't be overridden with zero padding (unlike iOS)\n * 3. Passing typography preset that includes lineHeight usually cause alignment issues with\n * other elements (leading/trailing accessories). It usually best to set lineHeight with undefined\n */\nimport React, { useMemo } from 'react';\nimport { omit } from 'lodash';\nimport { asBaseComponent, forwardRef } from \"../../commons/new\";\nimport View from \"../../components/view\";\nimport { Colors } from \"../../style\";\nimport { useMeasure } from \"../../hooks\";\nimport { ValidationMessagePosition } from \"./types\";\nimport { shouldHidePlaceholder } from \"./Presenter\";\nimport Input from \"./Input\";\nimport ValidationMessage from \"./ValidationMessage\";\nimport Label from \"./Label\";\nimport FieldContext from \"./FieldContext\";\nimport useFieldState\n/* , FieldStateProps */\nfrom \"./useFieldState\";\nimport usePreset from \"./usePreset\";\nimport FloatingPlaceholder from \"./FloatingPlaceholder\";\nimport CharCounter from \"./CharCounter\";\n\n/**\n * @description: A controlled, customizable TextField with validation support\n * @extends: TextInput\n * @extendsLink: https://reactnative.dev/docs/textinput\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/IncubatorTextFieldScreen.tsx\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/FloatingPlaceholder.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/Validation.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/ColorByState.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/CharCounter.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/Hint.gif?raw=true\n */\nconst TextField = props => {\n  const {\n    modifiers,\n    // General\n    fieldStyle: fieldStyleProp,\n    dynamicFieldStyle,\n    containerStyle,\n    floatingPlaceholder,\n    floatingPlaceholderColor,\n    floatingPlaceholderStyle,\n    floatOnFocus,\n    hint,\n    // Label\n    label,\n    labelColor,\n    labelStyle,\n    labelProps,\n    // Accessory Buttons\n    leadingAccessory,\n    trailingAccessory,\n    bottomAccessory,\n    // Validation\n    enableErrors,\n    // TODO: rename to enableValidation\n    validationMessageStyle,\n    validationMessagePosition = ValidationMessagePosition.BOTTOM,\n    // Char Counter\n    showCharCounter,\n    charCounterStyle,\n    // Input\n    placeholder,\n    children,\n    ...others\n  } = usePreset(props);\n  const {\n    ref: leadingAccessoryRef,\n    measurements: leadingAccessoryMeasurements\n  } = useMeasure();\n  const {\n    onFocus,\n    onBlur,\n    onChangeText,\n    fieldState,\n    validateField\n  } = useFieldState(others);\n  const context = useMemo(() => {\n    return { ...fieldState,\n      disabled: others.editable === false,\n      validateField\n    };\n  }, [fieldState, others.editable, validateField]);\n  const leadingAccessoryClone = useMemo(() => {\n    if (leadingAccessory) {\n      return React.cloneElement(leadingAccessory, {\n        ref: leadingAccessoryRef\n      });\n    }\n  }, [leadingAccessory]);\n  const {\n    margins,\n    paddings,\n    typography,\n    color\n  } = modifiers;\n  const typographyStyle = useMemo(() => omit(typography, 'lineHeight'), [typography]);\n  const colorStyle = useMemo(() => color && {\n    color\n  }, [color]);\n  const fieldStyle = [fieldStyleProp, dynamicFieldStyle?.(context, {\n    preset: props.preset\n  })];\n  const hidePlaceholder = shouldHidePlaceholder(props, fieldState.isFocused);\n  return <FieldContext.Provider value={context}>\n      <View style={[margins, containerStyle]}>\n        <Label label={label} labelColor={labelColor} labelStyle={labelStyle} labelProps={labelProps} floatingPlaceholder={floatingPlaceholder} validationMessagePosition={validationMessagePosition} testID={`${props.testID}.label`} />\n        {validationMessagePosition === ValidationMessagePosition.TOP && <ValidationMessage enableErrors={enableErrors} validate={others.validate} validationMessage={others.validationMessage} validationMessageStyle={validationMessageStyle} testID={`${props.testID}.validationMessage`} />}\n        <View style={[paddings, fieldStyle]} row centerV>\n          {\n          /* <View row centerV> */\n        }\n          {leadingAccessoryClone}\n          <View flex row>\n            {floatingPlaceholder && <FloatingPlaceholder placeholder={placeholder} floatingPlaceholderStyle={[typographyStyle, floatingPlaceholderStyle]} floatingPlaceholderColor={floatingPlaceholderColor} floatOnFocus={floatOnFocus} validationMessagePosition={validationMessagePosition} extraOffset={leadingAccessoryMeasurements?.width} testID={`${props.testID}.floatingPlaceholder`} />}\n            {children || <Input placeholderTextColor={hidePlaceholder ? 'transparent' : Colors.grey30} {...others} style={[typographyStyle, colorStyle, others.style]} onFocus={onFocus} onBlur={onBlur} onChangeText={onChangeText} placeholder={placeholder} hint={hint} />}\n          </View>\n          {trailingAccessory}\n          {\n          /* </View> */\n        }\n        </View>\n        <View row spread>\n          {validationMessagePosition === ValidationMessagePosition.BOTTOM && <ValidationMessage enableErrors={enableErrors} validate={others.validate} validationMessage={others.validationMessage} validationMessageStyle={validationMessageStyle} retainSpace testID={`${props.testID}.validationMessage`} />}\n          {bottomAccessory}\n          {showCharCounter && <CharCounter maxLength={others.maxLength} charCounterStyle={charCounterStyle} testID={`${props.testID}.charCounter`} />}\n        </View>\n      </View>\n    </FieldContext.Provider>;\n};\n\nTextField.displayName = 'Incubator.TextField';\nTextField.validationMessagePositions = ValidationMessagePosition;\nexport default asBaseComponent(forwardRef(TextField));"]},"metadata":{},"sourceType":"module"}