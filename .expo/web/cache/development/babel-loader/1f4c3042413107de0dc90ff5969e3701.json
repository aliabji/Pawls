{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useRef, useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Reanimated, { Easing, useAnimatedReaction, useAnimatedStyle, useSharedValue, withTiming, runOnJS } from 'react-native-reanimated';\nimport { Colors, BorderRadiuses, Spacings } from \"../../style\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Segment from \"./segment\";\nimport { useOrientation } from \"../../hooks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar BORDER_WIDTH = 1;\nvar TIMING_CONFIG = {\n  duration: 300,\n  easing: Easing.bezier(0.33, 1, 0.68, 1)\n};\n\nvar SegmentedControl = function SegmentedControl(props) {\n  var onChangeIndex = props.onChangeIndex,\n      _props$initialIndex = props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      containerStyle = props.containerStyle,\n      style = props.style,\n      segments = props.segments,\n      _props$activeColor = props.activeColor,\n      activeColor = _props$activeColor === void 0 ? Colors.primary : _props$activeColor,\n      _props$borderRadius = props.borderRadius,\n      borderRadius = _props$borderRadius === void 0 ? BorderRadiuses.br100 : _props$borderRadius,\n      _props$backgroundColo = props.backgroundColor,\n      backgroundColor = _props$backgroundColo === void 0 ? Colors.grey80 : _props$backgroundColo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Colors.white : _props$activeBackgrou,\n      _props$inactiveColor = props.inactiveColor,\n      inactiveColor = _props$inactiveColor === void 0 ? Colors.grey20 : _props$inactiveColor,\n      _props$outlineColor = props.outlineColor,\n      outlineColor = _props$outlineColor === void 0 ? activeColor : _props$outlineColor,\n      _props$outlineWidth = props.outlineWidth,\n      outlineWidth = _props$outlineWidth === void 0 ? BORDER_WIDTH : _props$outlineWidth,\n      _props$throttleTime = props.throttleTime,\n      throttleTime = _props$throttleTime === void 0 ? 0 : _props$throttleTime,\n      testID = props.testID;\n  var animatedSelectedIndex = useSharedValue(initialIndex);\n  var segmentsStyle = useSharedValue([]);\n  var segmentedControlHeight = useSharedValue(0);\n  var segmentsCounter = useRef(0);\n  useOrientation({\n    onOrientationChange: function onOrientationChange() {\n      segmentsCounter.current = 0;\n      segmentsStyle.value = [];\n    }\n  });\n  var changeIndex = useCallback(_.throttle(function () {\n    onChangeIndex == null ? void 0 : onChangeIndex(animatedSelectedIndex.value);\n  }, throttleTime, {\n    trailing: true,\n    leading: false\n  }), [throttleTime]);\n  useAnimatedReaction(function () {\n    var _f = function _f() {\n      return animatedSelectedIndex.value;\n    };\n\n    _f._closure = {\n      animatedSelectedIndex: animatedSelectedIndex\n    };\n    _f.asString = \"function _f(){const{animatedSelectedIndex}=jsThis._closure;{return animatedSelectedIndex.value;}}\";\n    _f.__workletHash = 10930866381299;\n    _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/segmentedControl/index.js (56:22)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), function () {\n    var _f = function _f(selected, previous) {\n      if (selected !== -1 && previous !== null && selected !== previous) {\n        onChangeIndex && runOnJS(changeIndex)();\n      }\n    };\n\n    _f._closure = {\n      onChangeIndex: onChangeIndex,\n      runOnJS: runOnJS,\n      changeIndex: changeIndex\n    };\n    _f.asString = \"function _f(selected,previous){const{onChangeIndex,runOnJS,changeIndex}=jsThis._closure;{if(selected!==-1&&previous!==null&&selected!==previous){onChangeIndex&&runOnJS(changeIndex)();}}}\";\n    _f.__workletHash = 3732082094214;\n    _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/segmentedControl/index.js (58:5)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), []);\n  var onSegmentPress = useCallback(function (index) {\n    animatedSelectedIndex.value = index;\n  }, []);\n  var onLayout = useCallback(function (index, event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        x = _event$nativeEvent$la.x,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n    segmentsStyle.value[index] = {\n      x: x,\n      width: width\n    };\n    segmentedControlHeight.value = height - 2 * BORDER_WIDTH;\n    segmentsCounter.current++;\n\n    if (segmentsCounter.current === (segments == null ? void 0 : segments.length)) {\n      segmentsStyle.value = _toConsumableArray(segmentsStyle.value);\n    }\n  }, [initialIndex, segments == null ? void 0 : segments.length]);\n  var animatedStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      if (segmentsStyle.value.length !== 0) {\n        var inset = withTiming(segmentsStyle.value[animatedSelectedIndex.value].x, TIMING_CONFIG);\n        var width = withTiming(segmentsStyle.value[animatedSelectedIndex.value].width - 2 * BORDER_WIDTH, TIMING_CONFIG);\n        var height = segmentedControlHeight.value;\n        return Constants.isRTL ? {\n          width: width,\n          right: inset,\n          height: height\n        } : {\n          width: width,\n          left: inset,\n          height: height\n        };\n      }\n\n      return {};\n    };\n\n    _f._closure = {\n      segmentsStyle: segmentsStyle,\n      withTiming: withTiming,\n      animatedSelectedIndex: animatedSelectedIndex,\n      TIMING_CONFIG: TIMING_CONFIG,\n      BORDER_WIDTH: BORDER_WIDTH,\n      segmentedControlHeight: segmentedControlHeight,\n      Constants: {\n        isRTL: Constants.isRTL\n      }\n    };\n    _f.asString = \"function _f(){const{segmentsStyle,withTiming,animatedSelectedIndex,TIMING_CONFIG,BORDER_WIDTH,segmentedControlHeight,Constants}=jsThis._closure;{if(segmentsStyle.value.length!==0){const inset=withTiming(segmentsStyle.value[animatedSelectedIndex.value].x,TIMING_CONFIG);const width=withTiming(segmentsStyle.value[animatedSelectedIndex.value].width-2*BORDER_WIDTH,TIMING_CONFIG);const height=segmentedControlHeight.value;return Constants.isRTL?{width:width,right:inset,height:height}:{width:width,left:inset,height:height};}return{};}}\";\n    _f.__workletHash = 6890166321057;\n    _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/segmentedControl/index.js (84:41)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n\n  var renderSegments = function renderSegments() {\n    return _.map(segments, function (_value, index) {\n      return _jsx(Segment, _objectSpread(_objectSpread({\n        onLayout: onLayout,\n        index: index,\n        onPress: onSegmentPress,\n        selectedIndex: animatedSelectedIndex,\n        activeColor: activeColor,\n        inactiveColor: inactiveColor\n      }, segments == null ? void 0 : segments[index]), {}, {\n        testID: testID\n      }), index);\n    });\n  };\n\n  return _jsx(View, {\n    style: containerStyle,\n    testID: testID,\n    children: _jsxs(View, {\n      row: true,\n      center: true,\n      style: [styles.container, style, {\n        borderRadius: borderRadius,\n        backgroundColor: backgroundColor\n      }],\n      children: [_jsx(Reanimated.View, {\n        style: [styles.selectedSegment, {\n          borderColor: outlineColor,\n          borderRadius: borderRadius,\n          backgroundColor: activeBackgroundColor,\n          borderWidth: outlineWidth\n        }, animatedStyle]\n      }), renderSegments()]\n    })\n  });\n};\n\nSegmentedControl.propTypes = {\n  segments: _pt.array,\n  activeColor: _pt.string,\n  inactiveColor: _pt.string,\n  onChangeIndex: _pt.func,\n  initialIndex: _pt.number,\n  borderRadius: _pt.number,\n  backgroundColor: _pt.string,\n  activeBackgroundColor: _pt.string,\n  outlineColor: _pt.string,\n  outlineWidth: _pt.number,\n  iconOnRight: _pt.bool,\n  throttleTime: _pt.number,\n  testID: _pt.string\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.grey80,\n    borderColor: Colors.grey60,\n    borderWidth: BORDER_WIDTH\n  },\n  selectedSegment: {\n    position: 'absolute'\n  },\n  segment: {\n    paddingHorizontal: Spacings.s3\n  }\n});\nSegmentedControl.displayName = 'SegmentedControl';\nexport default asBaseComponent(SegmentedControl);","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/segmentedControl/index.js"],"names":["_pt","_","React","useRef","useCallback","Reanimated","Easing","useAnimatedReaction","useAnimatedStyle","useSharedValue","withTiming","runOnJS","Colors","BorderRadiuses","Spacings","Constants","asBaseComponent","View","Segment","useOrientation","BORDER_WIDTH","TIMING_CONFIG","duration","easing","bezier","SegmentedControl","props","onChangeIndex","initialIndex","containerStyle","style","segments","activeColor","primary","borderRadius","br100","backgroundColor","grey80","activeBackgroundColor","white","inactiveColor","grey20","outlineColor","outlineWidth","throttleTime","testID","animatedSelectedIndex","segmentsStyle","segmentedControlHeight","segmentsCounter","onOrientationChange","current","value","changeIndex","throttle","trailing","leading","selected","previous","onSegmentPress","index","onLayout","event","nativeEvent","layout","x","width","height","length","animatedStyle","inset","isRTL","right","left","renderSegments","map","_value","styles","container","selectedSegment","borderColor","borderWidth","propTypes","array","string","func","number","iconOnRight","bool","StyleSheet","create","grey60","position","segment","paddingHorizontal","s3","displayName"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { useRef, useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Reanimated, { Easing, useAnimatedReaction, useAnimatedStyle, useSharedValue, withTiming, runOnJS } from 'react-native-reanimated';\nimport { Colors, BorderRadiuses, Spacings } from \"../../style\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Segment from \"./segment\";\nimport { useOrientation } from \"../../hooks\";\nconst BORDER_WIDTH = 1;\nconst TIMING_CONFIG = {\n  duration: 300,\n  // @ts-expect-error TODO: change this to bezierFn or to the new implementation\n  easing: Easing.bezier(0.33, 1, 0.68, 1)\n};\n\n/**\n * @description: SegmentedControl component for toggling two values or more\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SegmentedControlScreen.tsx\n */\nconst SegmentedControl = props => {\n  const {\n    onChangeIndex,\n    initialIndex = 0,\n    containerStyle,\n    style,\n    segments,\n    activeColor = Colors.primary,\n    borderRadius = BorderRadiuses.br100,\n    backgroundColor = Colors.grey80,\n    activeBackgroundColor = Colors.white,\n    inactiveColor = Colors.grey20,\n    outlineColor = activeColor,\n    outlineWidth = BORDER_WIDTH,\n    throttleTime = 0,\n    testID\n  } = props;\n  const animatedSelectedIndex = useSharedValue(initialIndex);\n  const segmentsStyle = useSharedValue([]);\n  const segmentedControlHeight = useSharedValue(0);\n  const segmentsCounter = useRef(0);\n  useOrientation({\n    onOrientationChange: () => {\n      segmentsCounter.current = 0;\n      segmentsStyle.value = [];\n    }\n  }); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const changeIndex = useCallback(_.throttle(() => {\n    onChangeIndex?.(animatedSelectedIndex.value);\n  }, throttleTime, {\n    trailing: true,\n    leading: false\n  }), [throttleTime]);\n  useAnimatedReaction(() => {\n    return animatedSelectedIndex.value;\n  }, (selected, previous) => {\n    if (selected !== -1 && previous !== null && selected !== previous) {\n      onChangeIndex && runOnJS(changeIndex)();\n    }\n  }, []);\n  const onSegmentPress = useCallback(index => {\n    animatedSelectedIndex.value = index; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const onLayout = useCallback((index, event) => {\n    const {\n      x,\n      width,\n      height\n    } = event.nativeEvent.layout;\n    segmentsStyle.value[index] = {\n      x,\n      width\n    };\n    segmentedControlHeight.value = height - 2 * BORDER_WIDTH;\n    segmentsCounter.current++;\n\n    if (segmentsCounter.current === segments?.length) {\n      segmentsStyle.value = [...segmentsStyle.value];\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [initialIndex, segments?.length]);\n  const animatedStyle = useAnimatedStyle(() => {\n    if (segmentsStyle.value.length !== 0) {\n      const inset = withTiming(segmentsStyle.value[animatedSelectedIndex.value].x, TIMING_CONFIG);\n      const width = withTiming(segmentsStyle.value[animatedSelectedIndex.value].width - 2 * BORDER_WIDTH, TIMING_CONFIG);\n      const height = segmentedControlHeight.value;\n      return Constants.isRTL ? {\n        width,\n        right: inset,\n        height\n      } : {\n        width,\n        left: inset,\n        height\n      };\n    }\n\n    return {};\n  });\n\n  const renderSegments = () => _.map(segments, (_value, index) => {\n    return <Segment key={index} onLayout={onLayout} index={index} onPress={onSegmentPress} selectedIndex={animatedSelectedIndex} activeColor={activeColor} inactiveColor={inactiveColor} {...segments?.[index]} testID={testID} />;\n  });\n\n  return <View style={containerStyle} testID={testID}>\n      <View row center style={[styles.container, style, {\n      borderRadius,\n      backgroundColor\n    }]}>\n        <Reanimated.View style={[styles.selectedSegment, {\n        borderColor: outlineColor,\n        borderRadius,\n        backgroundColor: activeBackgroundColor,\n        borderWidth: outlineWidth\n      }, animatedStyle]} />\n        {renderSegments()}\n      </View>\n    </View>;\n};\n\nSegmentedControl.propTypes = {\n  /**\n     * Array on segments.\n     */\n  segments: _pt.array,\n\n  /**\n     * The color of the active segment label.\n     */\n  activeColor: _pt.string,\n\n  /**\n     * The color of the inactive segments (label).\n     */\n  inactiveColor: _pt.string,\n\n  /**\n     * Callback for when index has change.\n     */\n  onChangeIndex: _pt.func,\n\n  /**\n     * Initial index to be active.\n     */\n  initialIndex: _pt.number,\n\n  /**\n     * The segmentedControl borderRadius\n     */\n  borderRadius: _pt.number,\n\n  /**\n     * The background color of the inactive segments\n     */\n  backgroundColor: _pt.string,\n\n  /**\n     * The background color of the active segment\n     */\n  activeBackgroundColor: _pt.string,\n\n  /**\n     * The color of the active segment outline\n     */\n  outlineColor: _pt.string,\n\n  /**\n     * The width of the active segment outline\n     */\n  outlineWidth: _pt.number,\n\n  /**\n     * Should the icon be on right of the label\n     */\n  iconOnRight: _pt.bool,\n\n  /**\n     * Trailing throttle time of changing index in ms.\n     */\n  throttleTime: _pt.number,\n  testID: _pt.string\n};\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.grey80,\n    borderColor: Colors.grey60,\n    borderWidth: BORDER_WIDTH\n  },\n  selectedSegment: {\n    position: 'absolute'\n  },\n  segment: {\n    paddingHorizontal: Spacings.s3\n  }\n});\nSegmentedControl.displayName = 'SegmentedControl';\nexport default asBaseComponent(SegmentedControl);"]},"metadata":{},"sourceType":"module"}