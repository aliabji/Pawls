{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"source\"],\n    _excluded2 = [\"tintColor\", \"style\", \"supportRTL\", \"cover\", \"aspectRatio\", \"overlayType\", \"overlayIntensity\", \"overlayColor\", \"customOverlayContent\", \"modifiers\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RNImage from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport { getAsset, isSvg } from \"../../utils/imageUtils\";\nimport Overlay from \"../overlay\";\nimport SvgImage from \"../svgImage\";\nimport View from \"../view\";\nimport { Colors } from \"../../style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Image = function (_PureComponent) {\n  _inherits(Image, _PureComponent);\n\n  var _super = _createSuper(Image);\n\n  function Image(props) {\n    var _this;\n\n    _classCallCheck(this, Image);\n\n    _this = _super.call(this, props);\n\n    _this.onError = function (event) {\n      if (event.nativeEvent.error) {\n        _this.setState({\n          error: true\n        });\n\n        _this.props.onError == null ? void 0 : _this.props.onError(event);\n      }\n    };\n\n    _this.renderSvg = function () {\n      var _this$props = _this.props,\n          source = _this$props.source,\n          others = _objectWithoutProperties(_this$props, _excluded);\n\n      return _jsx(SvgImage, _objectSpread({\n        data: source\n      }, others));\n    };\n\n    _this.renderErrorImage = function () {\n      var _this$props2 = _this.props,\n          style = _this$props2.style,\n          cover = _this$props2.cover,\n          modifiers = _this$props2.modifiers;\n      var margins = modifiers.margins;\n      return _jsx(View, {\n        style: [margins, style, styles.errorImageContainer, cover && styles.coverImage],\n        children: _this.renderImage(true)\n      });\n    };\n\n    _this.renderImage = function (useImageInsideContainer) {\n      var error = _this.state.error;\n      var source = error ? _this.getVerifiedSource(_this.props.errorSource) : _this.getImageSource();\n\n      var _this$props3 = _this.props,\n          tintColor = _this$props3.tintColor,\n          style = _this$props3.style,\n          supportRTL = _this$props3.supportRTL,\n          cover = _this$props3.cover,\n          aspectRatio = _this$props3.aspectRatio,\n          overlayType = _this$props3.overlayType,\n          overlayIntensity = _this$props3.overlayIntensity,\n          overlayColor = _this$props3.overlayColor,\n          customOverlayContent = _this$props3.customOverlayContent,\n          modifiers = _this$props3.modifiers,\n          others = _objectWithoutProperties(_this$props3, _excluded2);\n\n      var shouldFlipRTL = supportRTL && Constants.isRTL;\n      var ImageView = _this.shouldUseImageBackground() ? ImageBackground : RNImage;\n      var margins = modifiers.margins;\n      var resizeMode = useImageInsideContainer ? 'contain' : undefined;\n      return _jsx(ImageView, _objectSpread(_objectSpread({\n        style: [tintColor && {\n          tintColor: tintColor\n        }, shouldFlipRTL && styles.rtlFlipped, cover && styles.coverImage, _this.isGif() && styles.gifImage, aspectRatio && {\n          aspectRatio: aspectRatio\n        }, !useImageInsideContainer && margins, style, useImageInsideContainer && styles.shrink],\n        resizeMode: resizeMode,\n        accessible: false,\n        accessibilityRole: 'image'\n      }, others), {}, {\n        onError: _this.onError,\n        source: source,\n        children: (overlayType || customOverlayContent) && _jsx(Overlay, {\n          type: overlayType,\n          intensity: overlayIntensity,\n          color: overlayColor,\n          customContent: customOverlayContent\n        })\n      }));\n    };\n\n    _this.sourceTransformer = _this.props.sourceTransformer;\n    _this.state = {\n      error: false,\n      prevSource: props.source\n    };\n    return _this;\n  }\n\n  _createClass(Image, [{\n    key: \"isGif\",\n    value: function isGif() {\n      if (Constants.isAndroid) {\n        var source = this.props.source;\n\n        var url = _.get(source, 'uri');\n\n        var isGif = /(http(s?):)([/|.|\\w|\\s|-])*\\.(?:jpg|gif|png)/.test(url);\n        return isGif;\n      }\n    }\n  }, {\n    key: \"shouldUseImageBackground\",\n    value: function shouldUseImageBackground() {\n      var _this$props4 = this.props,\n          overlayType = _this$props4.overlayType,\n          customOverlayContent = _this$props4.customOverlayContent;\n      return !!overlayType || this.isGif() || !_.isUndefined(customOverlayContent);\n    }\n  }, {\n    key: \"getVerifiedSource\",\n    value: function getVerifiedSource(source) {\n      if (_.get(source, 'uri') === null || _.get(source, 'uri') === '') {\n        return _objectSpread(_objectSpread({}, source), {}, {\n          uri: undefined\n        });\n      }\n\n      return source;\n    }\n  }, {\n    key: \"getImageSource\",\n    value: function getImageSource() {\n      var _this$props5 = this.props,\n          assetName = _this$props5.assetName,\n          assetGroup = _this$props5.assetGroup,\n          source = _this$props5.source;\n\n      if (!_.isUndefined(assetName)) {\n        return getAsset(assetName, assetGroup);\n      }\n\n      if (this.sourceTransformer) {\n        return this.sourceTransformer(this.props);\n      }\n\n      return this.getVerifiedSource(source);\n    }\n  }, {\n    key: \"renderRegularImage\",\n    value: function renderRegularImage() {\n      var error = this.state.error;\n\n      if (error) {\n        return this.renderErrorImage();\n      } else {\n        return this.renderImage(false);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var source = this.props.source;\n\n      if (isSvg(source)) {\n        return this.renderSvg();\n      } else {\n        return this.renderRegularImage();\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.source !== prevState.prevSource) {\n        return {\n          error: false,\n          prevSource: nextProps.source\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Image;\n}(PureComponent);\n\nImage.propTypes = {\n  sourceTransformer: _pt.func,\n  assetName: _pt.string,\n  assetGroup: _pt.string,\n  tintColor: _pt.string,\n  supportRTL: _pt.bool,\n  cover: _pt.bool,\n  aspectRatio: _pt.number,\n  overlayColor: _pt.string,\n  customOverlayContent: _pt.element,\n  imageId: _pt.string\n};\nImage.displayName = 'Image';\nImage.defaultProps = {\n  assetGroup: 'icons'\n};\nImage.overlayTypes = Overlay.overlayTypes;\nImage.overlayIntensityType = Overlay.intensityTypes;\nvar styles = StyleSheet.create({\n  rtlFlipped: {\n    transform: [{\n      scaleX: -1\n    }]\n  },\n  coverImage: {\n    width: '100%',\n    aspectRatio: 16 / 8\n  },\n  gifImage: {\n    overflow: 'hidden'\n  },\n  errorImageContainer: {\n    backgroundColor: Colors.grey70,\n    zIndex: -1\n  },\n  shrink: {\n    flexShrink: 1\n  }\n});\nhoistNonReactStatic(Image, RNImage);\nexport { Image };\nexport default asBaseComponent(Image);","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/image/index.js"],"names":["_pt","_","React","PureComponent","hoistNonReactStatic","Constants","asBaseComponent","getAsset","isSvg","Overlay","SvgImage","View","Colors","Image","props","onError","event","nativeEvent","error","setState","renderSvg","source","others","renderErrorImage","style","cover","modifiers","margins","styles","errorImageContainer","coverImage","renderImage","useImageInsideContainer","state","getVerifiedSource","errorSource","getImageSource","tintColor","supportRTL","aspectRatio","overlayType","overlayIntensity","overlayColor","customOverlayContent","shouldFlipRTL","isRTL","ImageView","shouldUseImageBackground","ImageBackground","RNImage","resizeMode","undefined","rtlFlipped","isGif","gifImage","shrink","sourceTransformer","prevSource","isAndroid","url","get","test","isUndefined","uri","assetName","assetGroup","renderRegularImage","nextProps","prevState","propTypes","func","string","bool","number","element","imageId","displayName","defaultProps","overlayTypes","overlayIntensityType","intensityTypes","StyleSheet","create","transform","scaleX","width","overflow","backgroundColor","grey70","zIndex","flexShrink"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nimport { StyleSheet, Image as RNImage, ImageBackground } from 'react-native';\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport { getAsset, isSvg } from \"../../utils/imageUtils\";\nimport Overlay from \"../overlay\";\nimport SvgImage from \"../svgImage\";\nimport View from \"../view\";\nimport { Colors } from \"../../style\";\n\n/**\n * @description: Image wrapper with extra functionality like source transform and assets support\n * @extends: Image\n * @extendsLink: https://reactnative.dev/docs/image\n * @notes: please note that for SVG support you need to add both\n * `react-native-svg` and `react-native-svg-transformer`,\n * and also configure them (see `metro.config.js`)\n */\nclass Image extends PureComponent {\n  static propTypes = {\n    /**\n       * custom source transform handler for manipulating the image source (great for size control)\n       */\n    sourceTransformer: _pt.func,\n\n    /**\n       * if provided image source will be driven from asset name\n       */\n    assetName: _pt.string,\n\n    /**\n       * the asset group, default is \"icons\"\n       */\n    assetGroup: _pt.string,\n\n    /**\n       * the asset tint\n       */\n    tintColor: _pt.string,\n\n    /**\n       * whether the image should flip horizontally on RTL locals\n       */\n    supportRTL: _pt.bool,\n\n    /**\n       * Show image as a cover, full width, image (according to aspect ratio, default: 16:8)\n       */\n    cover: _pt.bool,\n\n    /**\n       * The aspect ratio for the image\n       */\n    aspectRatio: _pt.number,\n\n    /**\n       * Pass a custom color for the overlay\n       */\n    overlayColor: _pt.string,\n\n    /**\n       * Render an overlay with custom content\n       */\n    customOverlayContent: _pt.element,\n\n    /**\n       * An imageId that can be used in sourceTransformer logic\n       */\n    imageId: _pt.string\n  };\n  static displayName = 'Image';\n  static defaultProps = {\n    assetGroup: 'icons'\n  };\n  static overlayTypes = Overlay.overlayTypes;\n  static overlayIntensityType = Overlay.intensityTypes;\n\n  constructor(props) {\n    super(props);\n    this.sourceTransformer = this.props.sourceTransformer;\n    this.state = {\n      error: false,\n      prevSource: props.source\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.source !== prevState.prevSource) {\n      return {\n        error: false,\n        prevSource: nextProps.source\n      };\n    }\n\n    return null;\n  }\n\n  isGif() {\n    if (Constants.isAndroid) {\n      const {\n        source\n      } = this.props;\n\n      const url = _.get(source, 'uri');\n\n      const isGif = /(http(s?):)([/|.|\\w|\\s|-])*\\.(?:jpg|gif|png)/.test(url);\n      return isGif;\n    }\n  }\n\n  shouldUseImageBackground() {\n    const {\n      overlayType,\n      customOverlayContent\n    } = this.props;\n    return !!overlayType || this.isGif() || !_.isUndefined(customOverlayContent);\n  }\n\n  getVerifiedSource(source) {\n    if (_.get(source, 'uri') === null || _.get(source, 'uri') === '') {\n      // @ts-ignore\n      return { ...source,\n        uri: undefined\n      };\n    }\n\n    return source;\n  }\n\n  getImageSource() {\n    const {\n      assetName,\n      assetGroup,\n      source\n    } = this.props;\n\n    if (!_.isUndefined(assetName)) {\n      return getAsset(assetName, assetGroup);\n    }\n\n    if (this.sourceTransformer) {\n      return this.sourceTransformer(this.props);\n    }\n\n    return this.getVerifiedSource(source);\n  }\n\n  onError = event => {\n    if (event.nativeEvent.error) {\n      this.setState({\n        error: true\n      });\n      this.props.onError?.(event);\n    }\n  };\n  renderSvg = () => {\n    const {\n      source,\n      ...others\n    } = this.props;\n    return <SvgImage data={source} {...others} />;\n  };\n  renderErrorImage = () => {\n    const {\n      style,\n      cover,\n      modifiers\n    } = this.props;\n    const {\n      margins\n    } = modifiers;\n    return <View style={[margins, style, styles.errorImageContainer, cover && styles.coverImage]}>\n        {this.renderImage(true)}\n      </View>;\n  };\n  renderImage = useImageInsideContainer => {\n    const {\n      error\n    } = this.state;\n    const source = error ? this.getVerifiedSource(this.props.errorSource) : this.getImageSource();\n    const {\n      tintColor,\n      style,\n      supportRTL,\n      cover,\n      aspectRatio,\n      overlayType,\n      overlayIntensity,\n      overlayColor,\n      customOverlayContent,\n      modifiers,\n      ...others\n    } = this.props;\n    const shouldFlipRTL = supportRTL && Constants.isRTL;\n    const ImageView = this.shouldUseImageBackground() ? ImageBackground : RNImage;\n    const {\n      margins\n    } = modifiers;\n    const resizeMode = useImageInsideContainer ? 'contain' : undefined;\n    return (// @ts-ignore\n      <ImageView style={[tintColor && {\n        tintColor\n      }, shouldFlipRTL && styles.rtlFlipped, cover && styles.coverImage, this.isGif() && styles.gifImage, aspectRatio && {\n        aspectRatio\n      }, !useImageInsideContainer && margins, style, useImageInsideContainer && styles.shrink]} resizeMode={resizeMode} accessible={false} accessibilityRole={'image'} {...others} onError={this.onError} source={source}>\n        {(overlayType || customOverlayContent) && <Overlay type={overlayType} intensity={overlayIntensity} color={overlayColor} customContent={customOverlayContent} />}\n      </ImageView>\n    );\n  };\n\n  renderRegularImage() {\n    const {\n      error\n    } = this.state;\n\n    if (error) {\n      return this.renderErrorImage();\n    } else {\n      return this.renderImage(false);\n    }\n  }\n\n  render() {\n    const {\n      source\n    } = this.props;\n\n    if (isSvg(source)) {\n      return this.renderSvg();\n    } else {\n      return this.renderRegularImage();\n    }\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  rtlFlipped: {\n    transform: [{\n      scaleX: -1\n    }]\n  },\n  coverImage: {\n    width: '100%',\n    aspectRatio: 16 / 8\n  },\n  gifImage: {\n    overflow: 'hidden'\n  },\n  errorImageContainer: {\n    backgroundColor: Colors.grey70,\n    zIndex: -1\n  },\n  shrink: {\n    flexShrink: 1\n  }\n});\nhoistNonReactStatic(Image, RNImage);\nexport { Image };\nexport default asBaseComponent(Image);"]},"metadata":{},"sourceType":"module"}