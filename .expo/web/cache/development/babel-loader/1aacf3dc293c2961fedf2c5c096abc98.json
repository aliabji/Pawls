{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _ from 'lodash';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors, Spacings } from \"../../style\";\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../commons/new\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DEFAULT_NUM_COLUMNS = 3;\nvar DEFAULT_ITEM_SPACINGS = Spacings.s4;\n\nvar GridView = function (_UIComponent) {\n  _inherits(GridView, _UIComponent);\n\n  var _super = _createSuper(GridView);\n\n  function GridView() {\n    var _this;\n\n    _classCallCheck(this, GridView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      viewWidth: _this.getGridContainerWidth(),\n      numColumns: _this.calcNumberOfColumns(),\n      itemSize: _this.calcItemSize()\n    };\n\n    _this.onOrientationChanged = function () {\n      var keepItemSize = _this.props.keepItemSize;\n      var itemSize = _this.state.itemSize;\n\n      if (!_this.props.viewWidth) {\n        var newItemSize = keepItemSize ? itemSize : _this.calcItemSize();\n\n        _this.setState({\n          viewWidth: Math.floor(_this.getDefaultViewWidth()),\n          numColumns: _this.calcNumberOfColumns(),\n          itemSize: newItemSize\n        });\n      }\n    };\n\n    _this.renderItem = function (item, index) {\n      var _item$itemSize;\n\n      var itemSize = _this.state.itemSize;\n      var _this$props = _this.props,\n          items = _this$props.items,\n          itemSpacing = _this$props.itemSpacing,\n          renderCustomItem = _this$props.renderCustomItem;\n      var _this$state$numColumn = _this.state.numColumns,\n          numColumns = _this$state$numColumn === void 0 ? DEFAULT_NUM_COLUMNS : _this$state$numColumn;\n\n      var itemsCount = _.size(items);\n\n      var rowCount = Math.ceil(itemsCount / numColumns);\n      var isLastItemInRow = (index + 1) % numColumns === 0;\n      var isLastRow = index + 1 > (rowCount - 1) * numColumns;\n      var isLastItem = index === itemsCount - 1;\n      var size = typeof item.itemSize === 'object' ? {\n        width: itemSize,\n        height: ((_item$itemSize = item.itemSize) == null ? void 0 : _item$itemSize.height) || itemSize\n      } : itemSize;\n\n      var itemProps = _objectSpread(_objectSpread({\n        key: index\n      }, item), {}, {\n        itemSize: size,\n        containerStyle: [!isLastItemInRow && {\n          marginRight: itemSpacing\n        }, !isLastRow && {\n          marginBottom: itemSpacing\n        }, item.containerStyle],\n        children: isLastItem ? _this.renderLastItemOverlay() : undefined\n      });\n\n      return renderCustomItem ? renderCustomItem(itemProps) : _jsx(GridListItem, _objectSpread({}, itemProps));\n    };\n\n    return _this;\n  }\n\n  _createClass(GridView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n    }\n  }, {\n    key: \"getDefaultViewWidth\",\n    value: function getDefaultViewWidth() {\n      return Constants.screenWidth - Spacings.s5 * 2;\n    }\n  }, {\n    key: \"getGridContainerWidth\",\n    value: function getGridContainerWidth() {\n      return Math.floor(this.props.viewWidth || this.getDefaultViewWidth());\n    }\n  }, {\n    key: \"calcNumberOfColumns\",\n    value: function calcNumberOfColumns() {\n      var _this$props2 = this.props,\n          numColumns = _this$props2.numColumns,\n          _this$props2$itemSpac = _this$props2.itemSpacing,\n          itemSpacing = _this$props2$itemSpac === void 0 ? DEFAULT_ITEM_SPACINGS : _this$props2$itemSpac,\n          maxItemWidth = _this$props2.maxItemWidth;\n      var containerWidth = this.getGridContainerWidth();\n\n      if (maxItemWidth) {\n        return Math.ceil((containerWidth + itemSpacing) / (maxItemWidth + itemSpacing));\n      } else {\n        return numColumns || DEFAULT_NUM_COLUMNS;\n      }\n    }\n  }, {\n    key: \"calcItemSize\",\n    value: function calcItemSize() {\n      var _this$props$itemSpaci = this.props.itemSpacing,\n          itemSpacing = _this$props$itemSpaci === void 0 ? DEFAULT_ITEM_SPACINGS : _this$props$itemSpaci;\n      var containerWidth = this.getGridContainerWidth();\n      var numColumns = this.calcNumberOfColumns();\n      return (containerWidth - itemSpacing * (numColumns - 1)) / numColumns;\n    }\n  }, {\n    key: \"getThemeColor\",\n    value: function getThemeColor(placeColor) {\n      if (_.toLower(placeColor) === _.toLower(Colors.white)) {\n        return Colors.black;\n      } else if (Colors.isDark(placeColor)) {\n        return placeColor;\n      } else {\n        return Colors.getColorTint(placeColor, 30);\n      }\n    }\n  }, {\n    key: \"renderLastItemOverlay\",\n    value: function renderLastItemOverlay() {\n      var _this$props$lastItemO;\n\n      var _this$props3 = this.props,\n          lastItemLabel = _this$props3.lastItemLabel,\n          items = _this$props3.items;\n      var overlayColor = this.getThemeColor((_this$props$lastItemO = this.props.lastItemOverlayColor) != null ? _this$props$lastItemO : '');\n      var formattedLabel = formatLastItemLabel(lastItemLabel, {\n        shouldAddPlus: true\n      });\n\n      if (!lastItemLabel) {\n        return;\n      }\n\n      var imageBorderRadius = _.flow(_.first, function (item) {\n        return _.get(item, 'imageProps.borderRadius');\n      })(items);\n\n      return _jsx(View, {\n        style: [styles.overlayContainer, {\n          backgroundColor: Colors.rgba(overlayColor, 0.6),\n          borderRadius: imageBorderRadius\n        }],\n        children: _jsx(Text, {\n          mainBold: true,\n          white: true,\n          children: formattedLabel\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var itemSize = this.state.itemSize;\n      var _this$props4 = this.props,\n          items = _this$props4.items,\n          viewWidth = _this$props4.viewWidth;\n      return _jsx(View, {\n        style: [styles.container, {\n          width: viewWidth ? Math.floor(viewWidth) : undefined\n        }],\n        children: itemSize && _.map(items, this.renderItem)\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var viewWidth;\n      var numColumns;\n\n      if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n        viewWidth = Math.floor(nextProps.viewWidth);\n      }\n\n      if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n        numColumns = nextProps.numColumns;\n      }\n\n      if (viewWidth || viewWidth) {\n        return {\n          viewWidth: viewWidth,\n          numColumns: numColumns\n        };\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return GridView;\n}(UIComponent);\n\nGridView.displayName = 'GridView';\nGridView.defaultProps = {\n  numColumns: DEFAULT_NUM_COLUMNS,\n  itemSpacing: DEFAULT_ITEM_SPACINGS\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center',\n    justifyContent: 'center'\n  })\n});\nexport default GridView;","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/gridView/index.js"],"names":["_","React","Colors","Spacings","UIComponent","View","Text","Constants","GridListItem","formatLastItemLabel","DEFAULT_NUM_COLUMNS","DEFAULT_ITEM_SPACINGS","s4","GridView","state","viewWidth","getGridContainerWidth","numColumns","calcNumberOfColumns","itemSize","calcItemSize","onOrientationChanged","keepItemSize","props","newItemSize","setState","Math","floor","getDefaultViewWidth","renderItem","item","index","items","itemSpacing","renderCustomItem","itemsCount","size","rowCount","ceil","isLastItemInRow","isLastRow","isLastItem","width","height","itemProps","key","containerStyle","marginRight","marginBottom","children","renderLastItemOverlay","undefined","dimensionsChangeListener","addDimensionsEventListener","removeDimensionsEventListener","screenWidth","s5","maxItemWidth","containerWidth","placeColor","toLower","white","black","isDark","getColorTint","lastItemLabel","overlayColor","getThemeColor","lastItemOverlayColor","formattedLabel","shouldAddPlus","imageBorderRadius","flow","first","get","styles","overlayContainer","backgroundColor","rgba","borderRadius","container","map","nextProps","prevState","displayName","defaultProps","StyleSheet","create","flexDirection","flexWrap","absoluteFillObject","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Colors, Spacings } from \"../../style\"; // TODO: we should use asBaseComponent here instead of using UIComponent directly\n\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../commons/new\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\nconst DEFAULT_NUM_COLUMNS = 3;\nconst DEFAULT_ITEM_SPACINGS = Spacings.s4;\n\n/**\n * @description: A auto-generated grid view that calculate item size according to given props\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx\n */\nclass GridView extends UIComponent {\n  static displayName = 'GridView';\n  static defaultProps = {\n    numColumns: DEFAULT_NUM_COLUMNS,\n    itemSpacing: DEFAULT_ITEM_SPACINGS\n  };\n  state = {\n    viewWidth: this.getGridContainerWidth(),\n    numColumns: this.calcNumberOfColumns(),\n    itemSize: this.calcItemSize()\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let viewWidth;\n    let numColumns;\n\n    if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n      viewWidth = Math.floor(nextProps.viewWidth);\n    }\n\n    if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n      numColumns = nextProps.numColumns;\n    }\n\n    if (viewWidth || viewWidth) {\n      return {\n        viewWidth,\n        numColumns\n      };\n    } else {\n      return null;\n    }\n  }\n\n  componentDidMount() {\n    this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n  }\n\n  componentWillUnmount() {\n    Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n  }\n\n  onOrientationChanged = () => {\n    const {\n      keepItemSize\n    } = this.props;\n    const {\n      itemSize\n    } = this.state;\n\n    if (!this.props.viewWidth) {\n      const newItemSize = keepItemSize ? itemSize : this.calcItemSize();\n      this.setState({\n        viewWidth: Math.floor(this.getDefaultViewWidth()),\n        numColumns: this.calcNumberOfColumns(),\n        itemSize: newItemSize\n      });\n    }\n  };\n\n  getDefaultViewWidth() {\n    return Constants.screenWidth - Spacings.s5 * 2;\n  }\n\n  getGridContainerWidth() {\n    return Math.floor(this.props.viewWidth || this.getDefaultViewWidth());\n  }\n\n  calcNumberOfColumns() {\n    const {\n      numColumns,\n      itemSpacing = DEFAULT_ITEM_SPACINGS,\n      maxItemWidth\n    } = this.props;\n    const containerWidth = this.getGridContainerWidth();\n\n    if (maxItemWidth) {\n      return Math.ceil((containerWidth + itemSpacing) / (maxItemWidth + itemSpacing));\n    } else {\n      return numColumns || DEFAULT_NUM_COLUMNS;\n    }\n  }\n\n  calcItemSize() {\n    const {\n      itemSpacing = DEFAULT_ITEM_SPACINGS\n    } = this.props;\n    const containerWidth = this.getGridContainerWidth();\n    const numColumns = this.calcNumberOfColumns();\n    return (containerWidth - itemSpacing * (numColumns - 1)) / numColumns;\n  }\n\n  getThemeColor(placeColor) {\n    if (_.toLower(placeColor) === _.toLower(Colors.white)) {\n      return Colors.black;\n    } else if (Colors.isDark(placeColor)) {\n      return placeColor;\n    } else {\n      return Colors.getColorTint(placeColor, 30);\n    }\n  }\n\n  renderLastItemOverlay() {\n    const {\n      lastItemLabel,\n      items\n    } = this.props;\n    const overlayColor = this.getThemeColor(this.props.lastItemOverlayColor ?? '');\n    const formattedLabel = formatLastItemLabel(lastItemLabel, {\n      shouldAddPlus: true\n    });\n\n    if (!lastItemLabel) {\n      return;\n    }\n\n    const imageBorderRadius = _.flow(_.first, item => _.get(item, 'imageProps.borderRadius'))(items);\n\n    return <View style={[styles.overlayContainer, {\n      backgroundColor: Colors.rgba(overlayColor, 0.6),\n      borderRadius: imageBorderRadius\n    }]}>\n        <Text mainBold white>\n          {formattedLabel}\n        </Text>\n      </View>;\n  }\n\n  renderItem = (item, index) => {\n    const {\n      itemSize\n    } = this.state;\n    const {\n      items,\n      itemSpacing,\n      renderCustomItem\n    } = this.props;\n    const {\n      numColumns = DEFAULT_NUM_COLUMNS\n    } = this.state;\n\n    const itemsCount = _.size(items);\n\n    const rowCount = Math.ceil(itemsCount / numColumns);\n    const isLastItemInRow = (index + 1) % numColumns === 0;\n    const isLastRow = index + 1 > (rowCount - 1) * numColumns;\n    const isLastItem = index === itemsCount - 1;\n    const size = typeof item.itemSize === 'object' ? {\n      width: itemSize,\n      height: item.itemSize?.height || itemSize\n    } : itemSize;\n    const itemProps = {\n      key: index,\n      ...item,\n      itemSize: size,\n      containerStyle: [!isLastItemInRow && {\n        marginRight: itemSpacing\n      }, !isLastRow && {\n        marginBottom: itemSpacing\n      }, item.containerStyle],\n      children: isLastItem ? this.renderLastItemOverlay() : undefined\n    };\n    return renderCustomItem ? renderCustomItem(itemProps) : <GridListItem {...itemProps} />;\n  };\n\n  render() {\n    const {\n      itemSize\n    } = this.state;\n    const {\n      items,\n      viewWidth\n    } = this.props;\n    return <View style={[styles.container, {\n      width: viewWidth ? Math.floor(viewWidth) : undefined\n    }]}>\n        {itemSize && _.map(items, this.renderItem)}\n      </View>;\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: { ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default GridView;"]},"metadata":{},"sourceType":"module"}