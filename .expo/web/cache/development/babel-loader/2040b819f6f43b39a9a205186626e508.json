{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useRef, useState } from 'react';\nexport default (function () {\n  var ref = useRef();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      measurements = _useState2[0],\n      setMeasurements = _useState2[1];\n\n  var onMeasure = function onMeasure(x, y, width, height, pageX, pageY) {\n    setMeasurements({\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      pageX: pageX,\n      pageY: pageY\n    });\n  };\n\n  useEffect(function () {\n    setTimeout(function () {\n      var _ref$current;\n\n      (_ref$current = ref.current) == null ? void 0 : _ref$current.measure == null ? void 0 : _ref$current.measure(onMeasure);\n    }, 0);\n  }, []);\n  return {\n    ref: ref,\n    measurements: measurements\n  };\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/hooks/useMeasure/index.js"],"names":["React","useEffect","useRef","useState","ref","measurements","setMeasurements","onMeasure","x","y","width","height","pageX","pageY","setTimeout","current","measure"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,gBAAgB,YAAM;AACpB,MAAMC,GAAG,GAAGF,MAAM,EAAlB;;AACA,kBAAwCC,QAAQ,EAAhD;AAAA;AAAA,MAAOE,YAAP;AAAA,MAAqBC,eAArB;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAuC;AACvDP,IAAAA,eAAe,CAAC;AACdE,MAAAA,CAAC,EAADA,CADc;AAEdC,MAAAA,CAAC,EAADA,CAFc;AAGdC,MAAAA,KAAK,EAALA,KAHc;AAIdC,MAAAA,MAAM,EAANA,MAJc;AAKdC,MAAAA,KAAK,EAALA,KALc;AAMdC,MAAAA,KAAK,EAALA;AANc,KAAD,CAAf;AAQD,GATD;;AAWAZ,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,UAAU,CAAC,YAAM;AAAA;;AACf,sBAAAV,GAAG,CAACW,OAAJ,kCAAaC,OAAb,iCAAaA,OAAb,CAAuBT,SAAvB;AACD,KAFS,EAEP,CAFO,CAAV;AAGD,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAO;AACLH,IAAAA,GAAG,EAAHA,GADK;AAELC,IAAAA,YAAY,EAAZA;AAFK,GAAP;AAID,CAxBD","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nexport default (() => {\n  const ref = useRef();\n  const [measurements, setMeasurements] = useState();\n\n  const onMeasure = (x, y, width, height, pageX, pageY) => {\n    setMeasurements({\n      x,\n      y,\n      width,\n      height,\n      pageX,\n      pageY\n    });\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      ref.current?.measure?.(onMeasure);\n    }, 0);\n  }, []);\n  return {\n    ref,\n    measurements\n  };\n});"]},"metadata":{},"sourceType":"module"}