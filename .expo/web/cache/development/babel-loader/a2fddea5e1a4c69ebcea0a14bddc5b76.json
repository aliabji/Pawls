{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _Typography$text, _Typography$text2;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport WheelPickerItem from \"./WheelPickerItem\";\nimport { Constants } from \"../../../src/commons/new\";\nimport { LogService } from \"../../../src/services\";\nimport { Typography, Colors } from \"../../../src/style\";\nimport { PickerPackage, CommunityPickerPackage } from \"../../../src/optionalDependencies\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Picker = (PickerPackage == null ? void 0 : PickerPackage.Picker) || (CommunityPickerPackage == null ? void 0 : CommunityPickerPackage.Picker) || function () {\n  return null;\n};\n\nif (!PickerPackage) {\n  if (CommunityPickerPackage) {\n    console.warn(\"RNUILib Picker will soon migrate to use \\\"@react-native-picker/picker\\\" package instead of '@react-native-community/picker'\");\n  } else {\n    console.error(\"RNUILib Picker requires installing \\\"@react-native-picker/picker\\\" dependency\");\n  }\n}\n\nvar WheelPickerNative = requireNativeComponent('WheelPicker');\n\nvar WheelPicker = function (_Component) {\n  _inherits(WheelPicker, _Component);\n\n  var _super = _createSuper(WheelPicker);\n\n  function WheelPicker(props) {\n    var _this;\n\n    _classCallCheck(this, WheelPicker);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      items: _this.getItems()\n    };\n\n    _this.onLogReceived = function (event) {\n      console[event.LogType](event.TAG, event.text);\n    };\n\n    _this.onValueChange = _this.onValueChange.bind(_assertThisInitialized(_this));\n\n    _this.getItems();\n\n    DeviceEventEmitter.addListener('log', _this.onLogReceived);\n    LogService.componentDeprecationWarn({\n      oldComponent: 'WheelPicker',\n      newComponent: 'Incubator.WheelPicker'\n    });\n    return _this;\n  }\n\n  _createClass(WheelPicker, [{\n    key: \"onValueChange\",\n    value: function onValueChange(event) {\n      var index = event.nativeEvent.itemIndex;\n      var onValueChange = this.props.onValueChange;\n\n      if (onValueChange) {\n        var items = this.state.items;\n        onValueChange(items[index].value, index);\n      }\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      var children = this.props.children;\n\n      var items = _.map(React.Children.toArray(children), function (child) {\n        return {\n          value: child.props.value,\n          label: child.props.label\n        };\n      });\n\n      return items;\n    }\n  }, {\n    key: \"getInitialIndex\",\n    value: function getInitialIndex() {\n      var items = this.state.items;\n      var selectedValue = this.props.selectedValue;\n      return _.findIndex(items, {\n        value: selectedValue\n      });\n    }\n  }, {\n    key: \"extractLabelsFromItems\",\n    value: function extractLabelsFromItems() {\n      return _.map(this.state.items, 'label');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          color = _this$props.color,\n          labelStyle = _this$props.labelStyle,\n          itemHeight = _this$props.itemHeight;\n      return _jsx(View, {\n        collapsable: false,\n        style: styles.container,\n        children: _jsx(WheelPickerNative, {\n          data: this.extractLabelsFromItems(),\n          initialIndex: this.getInitialIndex(),\n          onChange: this.onValueChange,\n          style: [styles.wheelPicker, style],\n          color: color,\n          labelColor: (labelStyle == null ? void 0 : labelStyle.color) || color,\n          fontSize: labelStyle == null ? void 0 : labelStyle.fontSize,\n          itemHeight: itemHeight,\n          fontFamily: labelStyle == null ? void 0 : labelStyle.fontFamily\n        })\n      });\n    }\n  }]);\n\n  return WheelPicker;\n}(Component);\n\nWheelPicker.propTypes = {\n  selectedValue: _pt.oneOfType([_pt.string, _pt.number]),\n  onValueChange: _pt.func,\n  itemHeight: _pt.number,\n  color: _pt.string,\n  children: _pt.oneOfType([_pt.element, _pt.arrayOf(_pt.element)])\n};\nWheelPicker.displayName = 'WheelPicker';\nWheelPicker.defaultProps = {\n  labelStyle: {\n    fontSize: (_Typography$text = Typography.text70) == null ? void 0 : _Typography$text.fontSize,\n    fontFamily: (_Typography$text2 = Typography.text70) == null ? void 0 : _Typography$text2.fontFamily\n  },\n  color: Colors.primary\n};\nWheelPicker.Item = WheelPickerItem;\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  wheelPicker: {\n    width: 200,\n    height: 200\n  }\n});\nexport default Constants.isAndroid ? WheelPicker : Picker;","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/lib/components/WheelPicker/index.js"],"names":["_pt","_","React","Component","requireNativeComponent","WheelPickerItem","Constants","LogService","Typography","Colors","PickerPackage","CommunityPickerPackage","Picker","console","warn","error","WheelPickerNative","WheelPicker","props","state","items","getItems","onLogReceived","event","LogType","TAG","text","onValueChange","bind","DeviceEventEmitter","addListener","componentDeprecationWarn","oldComponent","newComponent","index","nativeEvent","itemIndex","value","children","map","Children","toArray","child","label","selectedValue","findIndex","style","color","labelStyle","itemHeight","styles","container","extractLabelsFromItems","getInitialIndex","wheelPicker","fontSize","fontFamily","propTypes","oneOfType","string","number","func","element","arrayOf","displayName","defaultProps","text70","primary","Item","StyleSheet","create","overflow","width","height","isAndroid"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport { DeviceEventEmitter, requireNativeComponent, StyleSheet, View } from 'react-native';\nimport WheelPickerItem from \"./WheelPickerItem\";\nimport { Constants } from \"../../../src/commons/new\";\nimport { LogService } from \"../../../src/services\";\nimport { Typography, Colors } from \"../../../src/style\";\nimport { PickerPackage, CommunityPickerPackage } from \"../../../src/optionalDependencies\";\n\nconst Picker = PickerPackage?.Picker || CommunityPickerPackage?.Picker || (() => null);\n\nif (!PickerPackage) {\n  if (CommunityPickerPackage) {\n    console.warn(`RNUILib Picker will soon migrate to use \"@react-native-picker/picker\" package instead of '@react-native-community/picker'`);\n  } else {\n    console.error(`RNUILib Picker requires installing \"@react-native-picker/picker\" dependency`);\n  }\n}\n\nconst WheelPickerNative = requireNativeComponent('WheelPicker');\n\nclass WheelPicker extends Component {\n  static propTypes = {\n    /**\n         * the current selected value of the picker\n         */\n    selectedValue: _pt.oneOfType([_pt.string, _pt.number]),\n\n    /**\n         * callback for when a value change\n         */\n    onValueChange: _pt.func,\n\n    /**\n         * The height of the selected item\n         */\n    itemHeight: _pt.number,\n\n    /**\n         * The color of the wheel picker (hex only)\n         */\n    color: _pt.string,\n    children: _pt.oneOfType([_pt.element, _pt.arrayOf(_pt.element)])\n  };\n  static displayName = 'WheelPicker';\n  static defaultProps = {\n    labelStyle: {\n      fontSize: Typography.text70?.fontSize,\n      fontFamily: Typography.text70?.fontFamily\n    },\n    color: Colors.primary\n  };\n\n  constructor(props) {\n    super(props);\n    this.onValueChange = this.onValueChange.bind(this); //eslint-disable-line\n\n    this.getItems();\n    DeviceEventEmitter.addListener('log', this.onLogReceived); // TODO: consider moving to a more generic place (base class?)\n\n    LogService.componentDeprecationWarn({\n      oldComponent: 'WheelPicker',\n      newComponent: 'Incubator.WheelPicker'\n    });\n  }\n\n  state = {\n    items: this.getItems()\n  };\n  onLogReceived = event => {\n    // @ts-expect-error\n    console[event.LogType](event.TAG, event.text);\n  };\n\n  onValueChange(event) {\n    const index = event.nativeEvent.itemIndex;\n    const {\n      onValueChange\n    } = this.props;\n\n    if (onValueChange) {\n      const {\n        items\n      } = this.state;\n      onValueChange(items[index].value, index);\n    }\n  }\n\n  getItems() {\n    const {\n      children\n    } = this.props;\n\n    const items = _.map(React.Children.toArray(children), child => ({\n      //@ts-expect-error\n      value: child.props.value,\n      //@ts-expect-error\n      label: child.props.label\n    }));\n\n    return items;\n  }\n\n  getInitialIndex() {\n    const {\n      items\n    } = this.state;\n    const {\n      selectedValue\n    } = this.props;\n    return _.findIndex(items, {\n      value: selectedValue\n    });\n  }\n\n  extractLabelsFromItems() {\n    return _.map(this.state.items, 'label');\n  }\n\n  render() {\n    const {\n      style,\n      color,\n      labelStyle,\n      itemHeight\n    } = this.props;\n    return <View collapsable={false} style={styles.container}>\n        <WheelPickerNative // @ts-expect-error\n      data={this.extractLabelsFromItems()} initialIndex={this.getInitialIndex()} onChange={this.onValueChange} style={[styles.wheelPicker, style]} color={color} labelColor={labelStyle?.color || color} fontSize={labelStyle?.fontSize} itemHeight={itemHeight} fontFamily={labelStyle?.fontFamily} />\n      </View>;\n  }\n\n}\n\nWheelPicker.Item = WheelPickerItem;\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  wheelPicker: {\n    width: 200,\n    height: 200\n  }\n});\nexport default Constants.isAndroid ? WheelPicker : Picker;"]},"metadata":{},"sourceType":"module"}