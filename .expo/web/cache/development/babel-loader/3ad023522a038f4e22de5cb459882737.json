{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component, isValidElement } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { Typography, Spacings, Colors, BorderRadiuses, Shadows } from \"../../style\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport Image from \"../image\";\nimport Modal from \"../modal\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar sideTip = require(\"./assets/hintTipSide.png\");\n\nvar middleTip = require(\"./assets/hintTipMiddle.png\");\n\nvar DEFAULT_COLOR = Colors.primary;\nvar DEFAULT_HINT_OFFSET = Spacings.s4;\nvar DEFAULT_EDGE_MARGINS = Spacings.s5;\nvar TARGET_POSITIONS;\n\n(function (TARGET_POSITIONS) {\n  TARGET_POSITIONS[\"LEFT\"] = \"left\";\n  TARGET_POSITIONS[\"RIGHT\"] = \"right\";\n  TARGET_POSITIONS[\"CENTER\"] = \"center\";\n})(TARGET_POSITIONS || (TARGET_POSITIONS = {}));\n\nvar HintPositions;\n\n(function (HintPositions) {\n  HintPositions[\"TOP\"] = \"top\";\n  HintPositions[\"BOTTOM\"] = \"bottom\";\n})(HintPositions || (HintPositions = {}));\n\nvar Hint = function (_Component) {\n  _inherits(Hint, _Component);\n\n  var _super = _createSuper(Hint);\n\n  function Hint() {\n    var _this;\n\n    _classCallCheck(this, Hint);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.targetRef = null;\n    _this.hintRef = null;\n    _this.animationDuration = 170;\n    _this.state = {\n      targetLayoutInWindow: undefined,\n      targetLayout: _this.props.targetFrame,\n      hintUnmounted: !_this.props.visible\n    };\n    _this.visibleAnimated = new Animated.Value(Number(!!_this.props.visible));\n\n    _this.animateHint = function () {\n      Animated.timing(_this.visibleAnimated, {\n        toValue: Number(!!_this.props.visible),\n        duration: _this.animationDuration,\n        useNativeDriver: true\n      }).start(_this.toggleAnimationEndedToRemoveHint);\n    };\n\n    _this.toggleAnimationEndedToRemoveHint = function () {\n      _this.setState({\n        hintUnmounted: !_this.props.visible\n      });\n    };\n\n    _this.focusAccessibilityOnHint = function () {\n      var message = _this.props.message;\n      var targetRefTag = findNodeHandle(_this.targetRef);\n      var hintRefTag = findNodeHandle(_this.hintRef);\n\n      if (targetRefTag && _.isString(message)) {\n        AccessibilityInfo.setAccessibilityFocus(targetRefTag);\n      } else if (hintRefTag) {\n        AccessibilityInfo.setAccessibilityFocus(hintRefTag);\n      }\n    };\n\n    _this.setTargetRef = function (ref) {\n      _this.targetRef = ref;\n\n      _this.focusAccessibilityOnHint();\n    };\n\n    _this.setHintRef = function (ref) {\n      _this.hintRef = ref;\n\n      _this.focusAccessibilityOnHint();\n    };\n\n    _this.onTargetLayout = function (_ref) {\n      var layout = _ref.nativeEvent.layout;\n\n      if (!_.isEqual(_this.state.targetLayout, layout)) {\n        _this.setState({\n          targetLayout: layout\n        });\n      }\n\n      if (!_this.state.targetLayoutInWindow || _this.props.onBackgroundPress) {\n        setTimeout(function () {\n          var _this$targetRef;\n\n          (_this$targetRef = _this.targetRef) == null ? void 0 : _this$targetRef.measureInWindow(function (x, y, width, height) {\n            var targetLayoutInWindow = {\n              x: x,\n              y: y,\n              width: width,\n              height: height\n            };\n\n            _this.setState({\n              targetLayoutInWindow: targetLayoutInWindow\n            });\n          });\n        });\n      }\n    };\n\n    _this.getHintAnimatedStyle = function () {\n      var position = _this.props.position;\n      var translateY = position === HintPositions.TOP ? -10 : 10;\n      return {\n        opacity: _this.visibleAnimated,\n        transform: [{\n          translateY: _this.visibleAnimated.interpolate({\n            inputRange: [0, 1],\n            outputRange: [translateY, 0]\n          })\n        }]\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(Hint, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.visible !== this.props.visible) {\n        this.animateHint();\n      }\n    }\n  }, {\n    key: \"getAccessibilityInfo\",\n    value: function getAccessibilityInfo() {\n      var _this$props = this.props,\n          visible = _this$props.visible,\n          message = _this$props.message;\n\n      if (visible && _.isString(message)) {\n        return {\n          accessible: true,\n          accessibilityLabel: \"hint: \" + message\n        };\n      }\n    }\n  }, {\n    key: \"containerWidth\",\n    get: function get() {\n      var _this$props$container = this.props.containerWidth,\n          containerWidth = _this$props$container === void 0 ? Constants.screenWidth : _this$props$container;\n      return containerWidth;\n    }\n  }, {\n    key: \"targetLayout\",\n    get: function get() {\n      var _this$props2 = this.props,\n          onBackgroundPress = _this$props2.onBackgroundPress,\n          useModal = _this$props2.useModal,\n          targetFrame = _this$props2.targetFrame;\n      var _this$state = this.state,\n          targetLayout = _this$state.targetLayout,\n          targetLayoutInWindow = _this$state.targetLayoutInWindow;\n\n      if (targetFrame) {\n        return targetFrame;\n      }\n\n      return onBackgroundPress && useModal ? targetLayoutInWindow : targetLayout;\n    }\n  }, {\n    key: \"showHint\",\n    get: function get() {\n      return !!this.targetLayout;\n    }\n  }, {\n    key: \"tipSize\",\n    get: function get() {\n      return this.useSideTip ? {\n        width: 14,\n        height: 7\n      } : {\n        width: 20,\n        height: 7\n      };\n    }\n  }, {\n    key: \"hintOffset\",\n    get: function get() {\n      var _this$props$offset = this.props.offset,\n          offset = _this$props$offset === void 0 ? DEFAULT_HINT_OFFSET : _this$props$offset;\n      return offset;\n    }\n  }, {\n    key: \"edgeMargins\",\n    get: function get() {\n      var _this$props$edgeMargi = this.props.edgeMargins,\n          edgeMargins = _this$props$edgeMargi === void 0 ? DEFAULT_EDGE_MARGINS : _this$props$edgeMargi;\n      return edgeMargins;\n    }\n  }, {\n    key: \"useSideTip\",\n    get: function get() {\n      var useSideTip = this.props.useSideTip;\n\n      if (!_.isUndefined(useSideTip)) {\n        return useSideTip;\n      }\n\n      return this.getTargetPositionOnScreen() !== TARGET_POSITIONS.CENTER;\n    }\n  }, {\n    key: \"getTargetPositionOnScreen\",\n    value: function getTargetPositionOnScreen() {\n      var _this$targetLayout, _this$targetLayout2;\n\n      if ((_this$targetLayout = this.targetLayout) != null && _this$targetLayout.x && (_this$targetLayout2 = this.targetLayout) != null && _this$targetLayout2.width) {\n        var targetMidPosition = this.targetLayout.x + this.targetLayout.width / 2;\n\n        if (targetMidPosition > this.containerWidth * (2 / 3)) {\n          return TARGET_POSITIONS.RIGHT;\n        } else if (targetMidPosition < this.containerWidth * (1 / 3)) {\n          return TARGET_POSITIONS.LEFT;\n        }\n      }\n\n      return TARGET_POSITIONS.CENTER;\n    }\n  }, {\n    key: \"getContainerPosition\",\n    value: function getContainerPosition() {\n      if (this.targetLayout) {\n        return {\n          top: this.targetLayout.y || 0,\n          left: this.targetLayout.x || 0\n        };\n      }\n\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n  }, {\n    key: \"getHintPosition\",\n    value: function getHintPosition() {\n      var _this$targetLayout3, _this$targetLayout4;\n\n      var position = this.props.position;\n      var hintPositionStyle = {\n        alignItems: 'center'\n      };\n\n      if ((_this$targetLayout3 = this.targetLayout) != null && _this$targetLayout3.x) {\n        hintPositionStyle.left = -this.targetLayout.x;\n      }\n\n      if (position === HintPositions.TOP) {\n        hintPositionStyle.bottom = 0;\n      } else if ((_this$targetLayout4 = this.targetLayout) != null && _this$targetLayout4.height) {\n        hintPositionStyle.top = this.targetLayout.height;\n      }\n\n      var targetPositionOnScreen = this.getTargetPositionOnScreen();\n\n      if (targetPositionOnScreen === TARGET_POSITIONS.RIGHT) {\n        hintPositionStyle.alignItems = Constants.isRTL ? 'flex-start' : 'flex-end';\n      } else if (targetPositionOnScreen === TARGET_POSITIONS.LEFT) {\n        hintPositionStyle.alignItems = Constants.isRTL ? 'flex-end' : 'flex-start';\n      }\n\n      return hintPositionStyle;\n    }\n  }, {\n    key: \"getHintPadding\",\n    value: function getHintPadding() {\n      var _this$targetLayout5;\n\n      var paddings = {\n        paddingVertical: this.hintOffset,\n        paddingHorizontal: this.edgeMargins\n      };\n\n      if (this.useSideTip && (_this$targetLayout5 = this.targetLayout) != null && _this$targetLayout5.x) {\n        var _this$targetLayout6;\n\n        var targetPositionOnScreen = this.getTargetPositionOnScreen();\n\n        if (targetPositionOnScreen === TARGET_POSITIONS.LEFT) {\n          paddings.paddingLeft = this.targetLayout.x;\n        } else if (targetPositionOnScreen === TARGET_POSITIONS.RIGHT && (_this$targetLayout6 = this.targetLayout) != null && _this$targetLayout6.width) {\n          paddings.paddingRight = this.containerWidth - this.targetLayout.x - this.targetLayout.width;\n        }\n      }\n\n      return paddings;\n    }\n  }, {\n    key: \"getTipPosition\",\n    value: function getTipPosition() {\n      var _this$targetLayout7, _this$targetLayout8;\n\n      var position = this.props.position;\n      var tipPositionStyle = {};\n\n      if (position === HintPositions.TOP) {\n        tipPositionStyle.bottom = this.hintOffset - this.tipSize.height;\n        !this.useSideTip ? tipPositionStyle.bottom += 1 : undefined;\n      } else {\n        tipPositionStyle.top = this.hintOffset - this.tipSize.height;\n      }\n\n      var layoutWidth = ((_this$targetLayout7 = this.targetLayout) == null ? void 0 : _this$targetLayout7.width) || 0;\n\n      if ((_this$targetLayout8 = this.targetLayout) != null && _this$targetLayout8.x) {\n        var targetMidWidth = layoutWidth / 2;\n        var tipMidWidth = this.tipSize.width / 2;\n        var leftPosition = this.useSideTip ? this.targetLayout.x : this.targetLayout.x + targetMidWidth - tipMidWidth;\n        var rightPosition = this.useSideTip ? this.containerWidth - this.targetLayout.x - layoutWidth : this.containerWidth - this.targetLayout.x - targetMidWidth - tipMidWidth;\n        var targetPositionOnScreen = this.getTargetPositionOnScreen();\n\n        switch (targetPositionOnScreen) {\n          case TARGET_POSITIONS.LEFT:\n            tipPositionStyle.left = Constants.isRTL ? rightPosition : leftPosition;\n            break;\n\n          case TARGET_POSITIONS.RIGHT:\n            tipPositionStyle.right = Constants.isRTL ? leftPosition : rightPosition;\n            break;\n\n          case TARGET_POSITIONS.CENTER:\n          default:\n            tipPositionStyle.left = this.targetLayout.x + targetMidWidth - tipMidWidth;\n            break;\n        }\n      }\n\n      return tipPositionStyle;\n    }\n  }, {\n    key: \"renderOverlay\",\n    value: function renderOverlay() {\n      var targetLayoutInWindow = this.state.targetLayoutInWindow;\n      var _this$props3 = this.props,\n          onBackgroundPress = _this$props3.onBackgroundPress,\n          backdropColor = _this$props3.backdropColor,\n          testID = _this$props3.testID;\n\n      if (targetLayoutInWindow) {\n        var containerPosition = this.getContainerPosition();\n        return _jsx(Animated.View, {\n          style: [styles.overlay, {\n            top: containerPosition.top - targetLayoutInWindow.y,\n            left: containerPosition.left - targetLayoutInWindow.x,\n            backgroundColor: backdropColor,\n            opacity: this.visibleAnimated\n          }],\n          pointerEvents: \"box-none\",\n          testID: testID + \".overlay\",\n          children: onBackgroundPress && _jsx(TouchableWithoutFeedback, {\n            style: StyleSheet.absoluteFillObject,\n            onPress: onBackgroundPress,\n            children: _jsx(View, {\n              flex: true\n            })\n          })\n        });\n      }\n    }\n  }, {\n    key: \"renderHintTip\",\n    value: function renderHintTip() {\n      var _this$props4 = this.props,\n          position = _this$props4.position,\n          _this$props4$color = _this$props4.color,\n          color = _this$props4$color === void 0 ? DEFAULT_COLOR : _this$props4$color;\n      var source = this.useSideTip ? sideTip : middleTip;\n      var flipVertically = position === HintPositions.TOP;\n      var flipHorizontally = this.getTargetPositionOnScreen() === TARGET_POSITIONS.RIGHT;\n      var flipStyle = {\n        transform: [{\n          scaleY: flipVertically ? -1 : 1\n        }, {\n          scaleX: flipHorizontally ? -1 : 1\n        }]\n      };\n      return _jsx(Image, {\n        tintColor: color,\n        source: source,\n        style: [styles.hintTip, this.getTipPosition(), flipStyle]\n      });\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var _this$props5 = this.props,\n          message = _this$props5.message,\n          messageStyle = _this$props5.messageStyle,\n          icon = _this$props5.icon,\n          iconStyle = _this$props5.iconStyle,\n          borderRadius = _this$props5.borderRadius,\n          _this$props5$color = _this$props5.color,\n          color = _this$props5$color === void 0 ? DEFAULT_COLOR : _this$props5$color,\n          customContent = _this$props5.customContent,\n          removePaddings = _this$props5.removePaddings,\n          enableShadow = _this$props5.enableShadow,\n          visible = _this$props5.visible,\n          testID = _this$props5.testID;\n      return _jsxs(View, {\n        testID: testID + \".message\",\n        row: true,\n        centerV: true,\n        style: [styles.hint, !removePaddings && styles.hintPaddings, visible && enableShadow && styles.containerShadow, {\n          backgroundColor: color\n        }, !_.isUndefined(borderRadius) && {\n          borderRadius: borderRadius\n        }],\n        ref: this.setHintRef,\n        children: [customContent, !customContent && icon && _jsx(Image, {\n          source: icon,\n          style: [styles.icon, iconStyle]\n        }), !customContent && _jsx(Text, {\n          style: [styles.hintMessage, messageStyle],\n          children: message\n        })]\n      });\n    }\n  }, {\n    key: \"renderHint\",\n    value: function renderHint() {\n      var _this$props6 = this.props,\n          onPress = _this$props6.onPress,\n          testID = _this$props6.testID;\n      var opacity = onPress ? 0.9 : 1.0;\n\n      if (this.showHint) {\n        return _jsxs(View, {\n          animated: true,\n          style: [{\n            width: this.containerWidth\n          }, styles.animatedContainer, this.getHintPosition(), this.getHintPadding(), this.getHintAnimatedStyle()],\n          pointerEvents: \"box-none\",\n          testID: testID,\n          children: [_jsx(TouchableOpacity, {\n            activeOpacity: opacity,\n            onPress: onPress,\n            children: this.renderContent()\n          }), this.renderHintTip()]\n        });\n      }\n    }\n  }, {\n    key: \"renderHintContainer\",\n    value: function renderHintContainer() {\n      var _this$props7 = this.props,\n          style = _this$props7.style,\n          others = _objectWithoutProperties(_this$props7, _excluded);\n\n      return _jsx(View, _objectSpread(_objectSpread({}, others), {}, {\n        collapsable: true,\n        testID: undefined,\n        style: [styles.container, style, this.getContainerPosition()],\n        children: this.renderHint()\n      }));\n    }\n  }, {\n    key: \"renderMockChildren\",\n    value: function renderMockChildren() {\n      var children = this.props.children;\n\n      if (children && React.isValidElement(children)) {\n        var _this$targetLayout9, _this$targetLayout10;\n\n        var layout = _objectSpread(_objectSpread({}, this.getContainerPosition()), {}, {\n          width: (_this$targetLayout9 = this.targetLayout) == null ? void 0 : _this$targetLayout9.width,\n          height: (_this$targetLayout10 = this.targetLayout) == null ? void 0 : _this$targetLayout10.height\n        });\n\n        return _jsx(View, {\n          style: [styles.mockChildrenContainer, layout],\n          children: React.cloneElement(children, {\n            collapsable: false,\n            key: 'mock',\n            style: [children.props.style, styles.mockChildren]\n          })\n        });\n      }\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var targetFrame = this.props.targetFrame;\n\n      if (!targetFrame && isValidElement(this.props.children)) {\n        return React.cloneElement(this.props.children, _objectSpread({\n          key: 'clone',\n          collapsable: false,\n          onLayout: this.onTargetLayout,\n          ref: this.setTargetRef\n        }, this.getAccessibilityInfo()));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props8 = this.props,\n          onBackgroundPress = _this$props8.onBackgroundPress,\n          backdropColor = _this$props8.backdropColor,\n          useModal = _this$props8.useModal,\n          testID = _this$props8.testID;\n\n      if (!this.props.visible && this.state.hintUnmounted) {\n        return this.props.children || null;\n      }\n\n      return _jsxs(_Fragment, {\n        children: [this.renderChildren(), onBackgroundPress && useModal ? _jsxs(Modal, {\n          visible: this.showHint,\n          animationType: backdropColor ? 'fade' : 'none',\n          overlayBackgroundColor: backdropColor,\n          transparent: true,\n          onBackgroundPress: onBackgroundPress,\n          onRequestClose: onBackgroundPress,\n          testID: testID + \".modal\",\n          children: [this.renderMockChildren(), this.renderHintContainer()]\n        }) : _jsxs(_Fragment, {\n          children: [this.renderOverlay(), this.renderMockChildren(), this.renderHintContainer()]\n        })]\n      });\n    }\n  }]);\n\n  return Hint;\n}(Component);\n\nHint.propTypes = {\n  visible: _pt.bool,\n  color: _pt.string,\n  message: _pt.oneOfType([_pt.string, _pt.element]),\n  position: _pt.oneOf([\"top\", \"bottom\"]),\n  targetFrame: _pt.shape({\n    x: _pt.number,\n    y: _pt.number,\n    width: _pt.number,\n    height: _pt.number\n  }),\n  useModal: _pt.bool,\n  useSideTip: _pt.bool,\n  borderRadius: _pt.number,\n  edgeMargins: _pt.number,\n  offset: _pt.number,\n  onPress: _pt.func,\n  onBackgroundPress: _pt.func,\n  backdropColor: _pt.string,\n  containerWidth: _pt.number,\n  customContent: _pt.element,\n  removePaddings: _pt.bool,\n  enableShadow: _pt.bool,\n  testID: _pt.string\n};\nHint.displayName = 'Hint';\nHint.defaultProps = {\n  position: HintPositions.BOTTOM,\n  useModal: true\n};\nHint.positions = HintPositions;\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    zIndex: 1\n  },\n  mockChildrenContainer: {\n    position: 'absolute'\n  },\n  mockChildren: {\n    margin: undefined,\n    marginVertical: undefined,\n    marginHorizontal: undefined,\n    marginTop: undefined,\n    marginRight: undefined,\n    marginBottom: undefined,\n    marginLeft: undefined,\n    top: undefined,\n    left: undefined,\n    right: undefined,\n    bottom: undefined\n  },\n  overlay: {\n    position: 'absolute',\n    width: Constants.screenWidth,\n    height: Constants.screenHeight\n  },\n  animatedContainer: {\n    position: 'absolute'\n  },\n  hintTip: {\n    position: 'absolute'\n  },\n  hint: {\n    maxWidth: Math.min(Constants.screenWidth - 2 * Spacings.s4, 400),\n    borderRadius: BorderRadiuses.br60,\n    backgroundColor: DEFAULT_COLOR\n  },\n  hintPaddings: {\n    paddingHorizontal: Spacings.s5,\n    paddingTop: Spacings.s3,\n    paddingBottom: Spacings.s4\n  },\n  containerShadow: _objectSpread({}, Shadows.sh30.bottom),\n  hintMessage: _objectSpread(_objectSpread({}, Typography.text70), {}, {\n    color: Colors.white,\n    flexShrink: 1\n  }),\n  icon: {\n    marginRight: Spacings.s4,\n    tintColor: Colors.white\n  }\n});\nexport default asBaseComponent(Hint);","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/hint/index.js"],"names":["_pt","_","React","Component","isValidElement","Typography","Spacings","Colors","BorderRadiuses","Shadows","Constants","asBaseComponent","View","Text","Image","Modal","TouchableOpacity","sideTip","require","middleTip","DEFAULT_COLOR","primary","DEFAULT_HINT_OFFSET","s4","DEFAULT_EDGE_MARGINS","s5","TARGET_POSITIONS","HintPositions","Hint","targetRef","hintRef","animationDuration","state","targetLayoutInWindow","undefined","targetLayout","props","targetFrame","hintUnmounted","visible","visibleAnimated","Animated","Value","Number","animateHint","timing","toValue","duration","useNativeDriver","start","toggleAnimationEndedToRemoveHint","setState","focusAccessibilityOnHint","message","targetRefTag","findNodeHandle","hintRefTag","isString","AccessibilityInfo","setAccessibilityFocus","setTargetRef","ref","setHintRef","onTargetLayout","layout","nativeEvent","isEqual","onBackgroundPress","setTimeout","measureInWindow","x","y","width","height","getHintAnimatedStyle","position","translateY","TOP","opacity","transform","interpolate","inputRange","outputRange","prevProps","accessible","accessibilityLabel","containerWidth","screenWidth","useModal","useSideTip","offset","edgeMargins","isUndefined","getTargetPositionOnScreen","CENTER","targetMidPosition","RIGHT","LEFT","top","left","hintPositionStyle","alignItems","bottom","targetPositionOnScreen","isRTL","paddings","paddingVertical","hintOffset","paddingHorizontal","paddingLeft","paddingRight","tipPositionStyle","tipSize","layoutWidth","targetMidWidth","tipMidWidth","leftPosition","rightPosition","right","backdropColor","testID","containerPosition","getContainerPosition","styles","overlay","backgroundColor","StyleSheet","absoluteFillObject","color","source","flipVertically","flipHorizontally","flipStyle","scaleY","scaleX","hintTip","getTipPosition","messageStyle","icon","iconStyle","borderRadius","customContent","removePaddings","enableShadow","hint","hintPaddings","containerShadow","hintMessage","onPress","showHint","animatedContainer","getHintPosition","getHintPadding","renderContent","renderHintTip","style","others","container","renderHint","children","mockChildrenContainer","cloneElement","collapsable","key","mockChildren","onLayout","getAccessibilityInfo","renderChildren","renderMockChildren","renderHintContainer","renderOverlay","propTypes","bool","string","oneOfType","element","oneOf","shape","number","func","displayName","defaultProps","BOTTOM","positions","create","zIndex","margin","marginVertical","marginHorizontal","marginTop","marginRight","marginBottom","marginLeft","screenHeight","maxWidth","Math","min","br60","paddingTop","s3","paddingBottom","sh30","text70","white","flexShrink","tintColor"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,cAA3B,QAAiD,OAAjD;;;;;;AAEA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,cAAvC,EAAuDC,OAAvD;AACA,SAASC,SAAT,EAAoBC,eAApB;AACA,OAAOC,IAAP;AACA,OAAOC,IAAP;AACA,OAAOC,KAAP;AACA,OAAOC,KAAP;AACA,OAAOC,gBAAP;;;;;AAEA,IAAMC,OAAO,GAAGC,OAAO,4BAAvB;;AAEA,IAAMC,SAAS,GAAGD,OAAO,8BAAzB;;AAEA,IAAME,aAAa,GAAGb,MAAM,CAACc,OAA7B;AACA,IAAMC,mBAAmB,GAAGhB,QAAQ,CAACiB,EAArC;AACA,IAAMC,oBAAoB,GAAGlB,QAAQ,CAACmB,EAAtC;AACA,IAAIC,gBAAJ;;AAEA,CAAC,UAAUA,gBAAV,EAA4B;AAC3BA,EAAAA,gBAAgB,CAAC,MAAD,CAAhB,GAA2B,MAA3B;AACAA,EAAAA,gBAAgB,CAAC,OAAD,CAAhB,GAA4B,OAA5B;AACAA,EAAAA,gBAAgB,CAAC,QAAD,CAAhB,GAA6B,QAA7B;AACD,CAJD,EAIGA,gBAAgB,KAAKA,gBAAgB,GAAG,EAAxB,CAJnB;;AAMA,IAAIC,aAAJ;;AAEA,CAAC,UAAUA,aAAV,EAAyB;AACxBA,EAAAA,aAAa,CAAC,KAAD,CAAb,GAAuB,KAAvB;AACAA,EAAAA,aAAa,CAAC,QAAD,CAAb,GAA0B,QAA1B;AACD,CAHD,EAGGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CAHhB;;IAWMC,I;;;;;;;;;;;;;;;UAuGJC,S,GAAY,I;UACZC,O,GAAU,I;UACVC,iB,GAAoB,G;UACpBC,K,GAAQ;AACNC,MAAAA,oBAAoB,EAAEC,SADhB;AAENC,MAAAA,YAAY,EAAE,MAAKC,KAAL,CAAWC,WAFnB;AAGNC,MAAAA,aAAa,EAAE,CAAC,MAAKF,KAAL,CAAWG;AAHrB,K;UAKRC,e,GAAkB,IAAIC,QAAQ,CAACC,KAAb,CAAmBC,MAAM,CAAC,CAAC,CAAC,MAAKP,KAAL,CAAWG,OAAd,CAAzB,C;;UAQlBK,W,GAAc,YAAM;AAClBH,MAAAA,QAAQ,CAACI,MAAT,CAAgB,MAAKL,eAArB,EAAsC;AACpCM,QAAAA,OAAO,EAAEH,MAAM,CAAC,CAAC,CAAC,MAAKP,KAAL,CAAWG,OAAd,CADqB;AAEpCQ,QAAAA,QAAQ,EAAE,MAAKhB,iBAFqB;AAGpCiB,QAAAA,eAAe,EAAE;AAHmB,OAAtC,EAIGC,KAJH,CAIS,MAAKC,gCAJd;AAKD,K;;UACDA,gC,GAAmC,YAAM;AACvC,YAAKC,QAAL,CAAc;AACZb,QAAAA,aAAa,EAAE,CAAC,MAAKF,KAAL,CAAWG;AADf,OAAd;AAGD,K;;UACDa,wB,GAA2B,YAAM;AAC/B,UACEC,OADF,GAEI,MAAKjB,KAFT,CACEiB,OADF;AAGA,UAAMC,YAAY,GAAGC,cAAc,CAAC,MAAK1B,SAAN,CAAnC;AACA,UAAM2B,UAAU,GAAGD,cAAc,CAAC,MAAKzB,OAAN,CAAjC;;AAEA,UAAIwB,YAAY,IAAIrD,CAAC,CAACwD,QAAF,CAAWJ,OAAX,CAApB,EAAyC;AACvCK,QAAAA,iBAAiB,CAACC,qBAAlB,CAAwCL,YAAxC;AACD,OAFD,MAEO,IAAIE,UAAJ,EAAgB;AACrBE,QAAAA,iBAAiB,CAACC,qBAAlB,CAAwCH,UAAxC;AACD;AACF,K;;UACDI,Y,GAAe,UAAAC,GAAG,EAAI;AACpB,YAAKhC,SAAL,GAAiBgC,GAAjB;;AACA,YAAKT,wBAAL;AACD,K;;UACDU,U,GAAa,UAAAD,GAAG,EAAI;AAClB,YAAK/B,OAAL,GAAe+B,GAAf;;AACA,YAAKT,wBAAL;AACD,K;;UACDW,c,GAAiB,gBAIX;AAAA,UAFFC,MAEE,QAHJC,WAGI,CAFFD,MAEE;;AACJ,UAAI,CAAC/D,CAAC,CAACiE,OAAF,CAAU,MAAKlC,KAAL,CAAWG,YAArB,EAAmC6B,MAAnC,CAAL,EAAiD;AAC/C,cAAKb,QAAL,CAAc;AACZhB,UAAAA,YAAY,EAAE6B;AADF,SAAd;AAGD;;AAED,UAAI,CAAC,MAAKhC,KAAL,CAAWC,oBAAZ,IAAoC,MAAKG,KAAL,CAAW+B,iBAAnD,EAAsE;AACpEC,QAAAA,UAAU,CAAC,YAAM;AAAA;;AACf,mCAAKvC,SAAL,qCAAgBwC,eAAhB,CAAgC,UAACC,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcC,MAAd,EAAyB;AACvD,gBAAMxC,oBAAoB,GAAG;AAC3BqC,cAAAA,CAAC,EAADA,CAD2B;AAE3BC,cAAAA,CAAC,EAADA,CAF2B;AAG3BC,cAAAA,KAAK,EAALA,KAH2B;AAI3BC,cAAAA,MAAM,EAANA;AAJ2B,aAA7B;;AAMA,kBAAKtB,QAAL,CAAc;AACZlB,cAAAA,oBAAoB,EAApBA;AADY,aAAd;AAGD,WAVD;AAWD,SAZS,CAAV;AAaD;AACF,K;;UA6JDyC,oB,GAAuB,YAAM;AAC3B,UACEC,QADF,GAEI,MAAKvC,KAFT,CACEuC,QADF;AAGA,UAAMC,UAAU,GAAGD,QAAQ,KAAKhD,aAAa,CAACkD,GAA3B,GAAiC,CAAC,EAAlC,GAAuC,EAA1D;AACA,aAAO;AACLC,QAAAA,OAAO,EAAE,MAAKtC,eADT;AAELuC,QAAAA,SAAS,EAAE,CAAC;AACVH,UAAAA,UAAU,EAAE,MAAKpC,eAAL,CAAqBwC,WAArB,CAAiC;AAC3CC,YAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD+B;AAE3CC,YAAAA,WAAW,EAAE,CAACN,UAAD,EAAa,CAAb;AAF8B,WAAjC;AADF,SAAD;AAFN,OAAP;AASD,K;;;;;;;WA5OD,4BAAmBO,SAAnB,EAA8B;AAC5B,UAAIA,SAAS,CAAC5C,OAAV,KAAsB,KAAKH,KAAL,CAAWG,OAArC,EAA8C;AAC5C,aAAKK,WAAL;AACD;AACF;;;WA+DD,gCAAuB;AACrB,wBAGI,KAAKR,KAHT;AAAA,UACEG,OADF,eACEA,OADF;AAAA,UAEEc,OAFF,eAEEA,OAFF;;AAKA,UAAId,OAAO,IAAItC,CAAC,CAACwD,QAAF,CAAWJ,OAAX,CAAf,EAAoC;AAClC,eAAO;AACL+B,UAAAA,UAAU,EAAE,IADP;AAELC,UAAAA,kBAAkB,aAAWhC;AAFxB,SAAP;AAID;AACF;;;SAED,eAAqB;AACnB,kCAEI,KAAKjB,KAFT,CACEkD,cADF;AAAA,UACEA,cADF,sCACmB5E,SAAS,CAAC6E,WAD7B;AAGA,aAAOD,cAAP;AACD;;;SAED,eAAmB;AACjB,yBAII,KAAKlD,KAJT;AAAA,UACE+B,iBADF,gBACEA,iBADF;AAAA,UAEEqB,QAFF,gBAEEA,QAFF;AAAA,UAGEnD,WAHF,gBAGEA,WAHF;AAKA,wBAGI,KAAKL,KAHT;AAAA,UACEG,YADF,eACEA,YADF;AAAA,UAEEF,oBAFF,eAEEA,oBAFF;;AAKA,UAAII,WAAJ,EAAiB;AACf,eAAOA,WAAP;AACD;;AAED,aAAO8B,iBAAiB,IAAIqB,QAArB,GAAgCvD,oBAAhC,GAAuDE,YAA9D;AACD;;;SAED,eAAe;AACb,aAAO,CAAC,CAAC,KAAKA,YAAd;AACD;;;SAED,eAAc;AACZ,aAAO,KAAKsD,UAAL,GAAkB;AACvBjB,QAAAA,KAAK,EAAE,EADgB;AAEvBC,QAAAA,MAAM,EAAE;AAFe,OAAlB,GAGH;AACFD,QAAAA,KAAK,EAAE,EADL;AAEFC,QAAAA,MAAM,EAAE;AAFN,OAHJ;AAOD;;;SAED,eAAiB;AACf,+BAEI,KAAKrC,KAFT,CACEsD,MADF;AAAA,UACEA,MADF,mCACWpE,mBADX;AAGA,aAAOoE,MAAP;AACD;;;SAED,eAAkB;AAChB,kCAEI,KAAKtD,KAFT,CACEuD,WADF;AAAA,UACEA,WADF,sCACgBnE,oBADhB;AAGA,aAAOmE,WAAP;AACD;;;SAED,eAAiB;AACf,UACEF,UADF,GAEI,KAAKrD,KAFT,CACEqD,UADF;;AAIA,UAAI,CAACxF,CAAC,CAAC2F,WAAF,CAAcH,UAAd,CAAL,EAAgC;AAC9B,eAAOA,UAAP;AACD;;AAED,aAAO,KAAKI,yBAAL,OAAqCnE,gBAAgB,CAACoE,MAA7D;AACD;;;WAED,qCAA4B;AAAA;;AAC1B,UAAI,2BAAK3D,YAAL,gCAAmBmC,CAAnB,2BAAwB,KAAKnC,YAA7B,aAAwB,oBAAmBqC,KAA/C,EAAsD;AACpD,YAAMuB,iBAAiB,GAAG,KAAK5D,YAAL,CAAkBmC,CAAlB,GAAsB,KAAKnC,YAAL,CAAkBqC,KAAlB,GAA0B,CAA1E;;AAEA,YAAIuB,iBAAiB,GAAG,KAAKT,cAAL,IAAuB,IAAI,CAA3B,CAAxB,EAAuD;AACrD,iBAAO5D,gBAAgB,CAACsE,KAAxB;AACD,SAFD,MAEO,IAAID,iBAAiB,GAAG,KAAKT,cAAL,IAAuB,IAAI,CAA3B,CAAxB,EAAuD;AAC5D,iBAAO5D,gBAAgB,CAACuE,IAAxB;AACD;AACF;;AAED,aAAOvE,gBAAgB,CAACoE,MAAxB;AACD;;;WAED,gCAAuB;AACrB,UAAI,KAAK3D,YAAT,EAAuB;AACrB,eAAO;AACL+D,UAAAA,GAAG,EAAE,KAAK/D,YAAL,CAAkBoC,CAAlB,IAAuB,CADvB;AAEL4B,UAAAA,IAAI,EAAE,KAAKhE,YAAL,CAAkBmC,CAAlB,IAAuB;AAFxB,SAAP;AAID;;AAED,aAAO;AACL4B,QAAAA,GAAG,EAAE,CADA;AAELC,QAAAA,IAAI,EAAE;AAFD,OAAP;AAID;;;WAED,2BAAkB;AAAA;;AAChB,UACExB,QADF,GAEI,KAAKvC,KAFT,CACEuC,QADF;AAGA,UAAMyB,iBAAiB,GAAG;AACxBC,QAAAA,UAAU,EAAE;AADY,OAA1B;;AAIA,iCAAI,KAAKlE,YAAT,aAAI,oBAAmBmC,CAAvB,EAA0B;AACxB8B,QAAAA,iBAAiB,CAACD,IAAlB,GAAyB,CAAC,KAAKhE,YAAL,CAAkBmC,CAA5C;AACD;;AAED,UAAIK,QAAQ,KAAKhD,aAAa,CAACkD,GAA/B,EAAoC;AAClCuB,QAAAA,iBAAiB,CAACE,MAAlB,GAA2B,CAA3B;AACD,OAFD,MAEO,2BAAI,KAAKnE,YAAT,aAAI,oBAAmBsC,MAAvB,EAA+B;AACpC2B,QAAAA,iBAAiB,CAACF,GAAlB,GAAwB,KAAK/D,YAAL,CAAkBsC,MAA1C;AACD;;AAED,UAAM8B,sBAAsB,GAAG,KAAKV,yBAAL,EAA/B;;AAEA,UAAIU,sBAAsB,KAAK7E,gBAAgB,CAACsE,KAAhD,EAAuD;AACrDI,QAAAA,iBAAiB,CAACC,UAAlB,GAA+B3F,SAAS,CAAC8F,KAAV,GAAkB,YAAlB,GAAiC,UAAhE;AACD,OAFD,MAEO,IAAID,sBAAsB,KAAK7E,gBAAgB,CAACuE,IAAhD,EAAsD;AAC3DG,QAAAA,iBAAiB,CAACC,UAAlB,GAA+B3F,SAAS,CAAC8F,KAAV,GAAkB,UAAlB,GAA+B,YAA9D;AACD;;AAED,aAAOJ,iBAAP;AACD;;;WAED,0BAAiB;AAAA;;AACf,UAAMK,QAAQ,GAAG;AACfC,QAAAA,eAAe,EAAE,KAAKC,UADP;AAEfC,QAAAA,iBAAiB,EAAE,KAAKjB;AAFT,OAAjB;;AAKA,UAAI,KAAKF,UAAL,2BAAmB,KAAKtD,YAAxB,aAAmB,oBAAmBmC,CAA1C,EAA6C;AAAA;;AAC3C,YAAMiC,sBAAsB,GAAG,KAAKV,yBAAL,EAA/B;;AAEA,YAAIU,sBAAsB,KAAK7E,gBAAgB,CAACuE,IAAhD,EAAsD;AACpDQ,UAAAA,QAAQ,CAACI,WAAT,GAAuB,KAAK1E,YAAL,CAAkBmC,CAAzC;AACD,SAFD,MAEO,IAAIiC,sBAAsB,KAAK7E,gBAAgB,CAACsE,KAA5C,2BAAqD,KAAK7D,YAA1D,aAAqD,oBAAmBqC,KAA5E,EAAmF;AACxFiC,UAAAA,QAAQ,CAACK,YAAT,GAAwB,KAAKxB,cAAL,GAAsB,KAAKnD,YAAL,CAAkBmC,CAAxC,GAA4C,KAAKnC,YAAL,CAAkBqC,KAAtF;AACD;AACF;;AAED,aAAOiC,QAAP;AACD;;;WAkBD,0BAAiB;AAAA;;AACf,UACE9B,QADF,GAEI,KAAKvC,KAFT,CACEuC,QADF;AAGA,UAAMoC,gBAAgB,GAAG,EAAzB;;AAEA,UAAIpC,QAAQ,KAAKhD,aAAa,CAACkD,GAA/B,EAAoC;AAClCkC,QAAAA,gBAAgB,CAACT,MAAjB,GAA0B,KAAKK,UAAL,GAAkB,KAAKK,OAAL,CAAavC,MAAzD;AACA,SAAC,KAAKgB,UAAN,GAAmBsB,gBAAgB,CAACT,MAAjB,IAA2B,CAA9C,GAAkDpE,SAAlD;AACD,OAHD,MAGO;AACL6E,QAAAA,gBAAgB,CAACb,GAAjB,GAAuB,KAAKS,UAAL,GAAkB,KAAKK,OAAL,CAAavC,MAAtD;AACD;;AAED,UAAMwC,WAAW,GAAG,6BAAK9E,YAAL,yCAAmBqC,KAAnB,KAA4B,CAAhD;;AAEA,iCAAI,KAAKrC,YAAT,aAAI,oBAAmBmC,CAAvB,EAA0B;AACxB,YAAM4C,cAAc,GAAGD,WAAW,GAAG,CAArC;AACA,YAAME,WAAW,GAAG,KAAKH,OAAL,CAAaxC,KAAb,GAAqB,CAAzC;AACA,YAAM4C,YAAY,GAAG,KAAK3B,UAAL,GAAkB,KAAKtD,YAAL,CAAkBmC,CAApC,GAAwC,KAAKnC,YAAL,CAAkBmC,CAAlB,GAAsB4C,cAAtB,GAAuCC,WAApG;AACA,YAAME,aAAa,GAAG,KAAK5B,UAAL,GAAkB,KAAKH,cAAL,GAAsB,KAAKnD,YAAL,CAAkBmC,CAAxC,GAA4C2C,WAA9D,GAA4E,KAAK3B,cAAL,GAAsB,KAAKnD,YAAL,CAAkBmC,CAAxC,GAA4C4C,cAA5C,GAA6DC,WAA/J;AACA,YAAMZ,sBAAsB,GAAG,KAAKV,yBAAL,EAA/B;;AAEA,gBAAQU,sBAAR;AACE,eAAK7E,gBAAgB,CAACuE,IAAtB;AACEc,YAAAA,gBAAgB,CAACZ,IAAjB,GAAwBzF,SAAS,CAAC8F,KAAV,GAAkBa,aAAlB,GAAkCD,YAA1D;AACA;;AAEF,eAAK1F,gBAAgB,CAACsE,KAAtB;AACEe,YAAAA,gBAAgB,CAACO,KAAjB,GAAyB5G,SAAS,CAAC8F,KAAV,GAAkBY,YAAlB,GAAiCC,aAA1D;AACA;;AAEF,eAAK3F,gBAAgB,CAACoE,MAAtB;AACA;AACEiB,YAAAA,gBAAgB,CAACZ,IAAjB,GAAwB,KAAKhE,YAAL,CAAkBmC,CAAlB,GAAsB4C,cAAtB,GAAuCC,WAA/D;AACA;AAZJ;AAcD;;AAED,aAAOJ,gBAAP;AACD;;;WAED,yBAAgB;AACd,UACE9E,oBADF,GAEI,KAAKD,KAFT,CACEC,oBADF;AAGA,yBAII,KAAKG,KAJT;AAAA,UACE+B,iBADF,gBACEA,iBADF;AAAA,UAEEoD,aAFF,gBAEEA,aAFF;AAAA,UAGEC,MAHF,gBAGEA,MAHF;;AAMA,UAAIvF,oBAAJ,EAA0B;AACxB,YAAMwF,iBAAiB,GAAG,KAAKC,oBAAL,EAA1B;AACA,eAAO,KAAC,QAAD,CAAU,IAAV;AAAe,UAAA,KAAK,EAAE,CAACC,MAAM,CAACC,OAAR,EAAiB;AAC5C1B,YAAAA,GAAG,EAAEuB,iBAAiB,CAACvB,GAAlB,GAAwBjE,oBAAoB,CAACsC,CADN;AAE5C4B,YAAAA,IAAI,EAAEsB,iBAAiB,CAACtB,IAAlB,GAAyBlE,oBAAoB,CAACqC,CAFR;AAG5CuD,YAAAA,eAAe,EAAEN,aAH2B;AAI5CzC,YAAAA,OAAO,EAAE,KAAKtC;AAJ8B,WAAjB,CAAtB;AAKH,UAAA,aAAa,EAAC,UALX;AAKsB,UAAA,MAAM,EAAKgF,MAAL,aAL5B;AAAA,oBAMFrD,iBAAiB,IAAI,KAAC,wBAAD;AAA0B,YAAA,KAAK,EAAE2D,UAAU,CAACC,kBAA5C;AAAgE,YAAA,OAAO,EAAE5D,iBAAzE;AAAA,sBAClB,KAAC,IAAD;AAAM,cAAA,IAAI;AAAV;AADkB;AANnB,UAAP;AAUD;AACF;;;WAED,yBAAgB;AACd,yBAGI,KAAK/B,KAHT;AAAA,UACEuC,QADF,gBACEA,QADF;AAAA,4CAEEqD,KAFF;AAAA,UAEEA,KAFF,mCAEU5G,aAFV;AAIA,UAAM6G,MAAM,GAAG,KAAKxC,UAAL,GAAkBxE,OAAlB,GAA4BE,SAA3C;AACA,UAAM+G,cAAc,GAAGvD,QAAQ,KAAKhD,aAAa,CAACkD,GAAlD;AACA,UAAMsD,gBAAgB,GAAG,KAAKtC,yBAAL,OAAqCnE,gBAAgB,CAACsE,KAA/E;AACA,UAAMoC,SAAS,GAAG;AAChBrD,QAAAA,SAAS,EAAE,CAAC;AACVsD,UAAAA,MAAM,EAAEH,cAAc,GAAG,CAAC,CAAJ,GAAQ;AADpB,SAAD,EAER;AACDI,UAAAA,MAAM,EAAEH,gBAAgB,GAAG,CAAC,CAAJ,GAAQ;AAD/B,SAFQ;AADK,OAAlB;AAOA,aAAO,KAAC,KAAD;AAAO,QAAA,SAAS,EAAEH,KAAlB;AAAyB,QAAA,MAAM,EAAEC,MAAjC;AAAyC,QAAA,KAAK,EAAE,CAACN,MAAM,CAACY,OAAR,EAAiB,KAAKC,cAAL,EAAjB,EAAwCJ,SAAxC;AAAhD,QAAP;AACD;;;WAED,yBAAgB;AACd,yBAYI,KAAKhG,KAZT;AAAA,UACEiB,OADF,gBACEA,OADF;AAAA,UAEEoF,YAFF,gBAEEA,YAFF;AAAA,UAGEC,IAHF,gBAGEA,IAHF;AAAA,UAIEC,SAJF,gBAIEA,SAJF;AAAA,UAKEC,YALF,gBAKEA,YALF;AAAA,4CAMEZ,KANF;AAAA,UAMEA,KANF,mCAMU5G,aANV;AAAA,UAOEyH,aAPF,gBAOEA,aAPF;AAAA,UAQEC,cARF,gBAQEA,cARF;AAAA,UASEC,YATF,gBASEA,YATF;AAAA,UAUExG,OAVF,gBAUEA,OAVF;AAAA,UAWEiF,MAXF,gBAWEA,MAXF;AAaA,aAAO,MAAC,IAAD;AAAM,QAAA,MAAM,EAAKA,MAAL,aAAZ;AAAmC,QAAA,GAAG,MAAtC;AAAuC,QAAA,OAAO,MAA9C;AAA+C,QAAA,KAAK,EAAE,CAACG,MAAM,CAACqB,IAAR,EAAc,CAACF,cAAD,IAAmBnB,MAAM,CAACsB,YAAxC,EAAsD1G,OAAO,IAAIwG,YAAX,IAA2BpB,MAAM,CAACuB,eAAxF,EAAyG;AACpKrB,UAAAA,eAAe,EAAEG;AADmJ,SAAzG,EAE1D,CAAC/H,CAAC,CAAC2F,WAAF,CAAcgD,YAAd,CAAD,IAAgC;AACjCA,UAAAA,YAAY,EAAZA;AADiC,SAF0B,CAAtD;AAIH,QAAA,GAAG,EAAE,KAAK9E,UAJP;AAAA,mBAKF+E,aALE,EAMF,CAACA,aAAD,IAAkBH,IAAlB,IAA0B,KAAC,KAAD;AAAO,UAAA,MAAM,EAAEA,IAAf;AAAqB,UAAA,KAAK,EAAE,CAACf,MAAM,CAACe,IAAR,EAAcC,SAAd;AAA5B,UANxB,EAOF,CAACE,aAAD,IAAkB,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE,CAAClB,MAAM,CAACwB,WAAR,EAAqBV,YAArB,CAAb;AAAA,oBAAkDpF;AAAlD,UAPhB;AAAA,QAAP;AASD;;;WAED,sBAAa;AACX,yBAGI,KAAKjB,KAHT;AAAA,UACEgH,OADF,gBACEA,OADF;AAAA,UAEE5B,MAFF,gBAEEA,MAFF;AAIA,UAAM1C,OAAO,GAAGsE,OAAO,GAAG,GAAH,GAAS,GAAhC;;AAEA,UAAI,KAAKC,QAAT,EAAmB;AACjB,eAAO,MAAC,IAAD;AAAM,UAAA,QAAQ,MAAd;AAAe,UAAA,KAAK,EAAE,CAAC;AAC5B7E,YAAAA,KAAK,EAAE,KAAKc;AADgB,WAAD,EAE1BqC,MAAM,CAAC2B,iBAFmB,EAEA,KAAKC,eAAL,EAFA,EAEwB,KAAKC,cAAL,EAFxB,EAE+C,KAAK9E,oBAAL,EAF/C,CAAtB;AAEmG,UAAA,aAAa,EAAC,UAFjH;AAE4H,UAAA,MAAM,EAAE8C,MAFpI;AAAA,qBAGH,KAAC,gBAAD;AAAkB,YAAA,aAAa,EAAE1C,OAAjC;AAA0C,YAAA,OAAO,EAAEsE,OAAnD;AAAA,sBACG,KAAKK,aAAL;AADH,YAHG,EAMF,KAAKC,aAAL,EANE;AAAA,UAAP;AAQD;AACF;;;WAED,+BAAsB;AACpB,yBAGI,KAAKtH,KAHT;AAAA,UACEuH,KADF,gBACEA,KADF;AAAA,UAEKC,MAFL;;AAIA,aAAO,KAAC,IAAD,kCAAUA,MAAV;AACP,QAAA,WAAW,MADJ;AACK,QAAA,MAAM,EAAE1H,SADb;AACwB,QAAA,KAAK,EAAE,CAACyF,MAAM,CAACkC,SAAR,EAAmBF,KAAnB,EAA0B,KAAKjC,oBAAL,EAA1B,CAD/B;AAAA,kBAEF,KAAKoC,UAAL;AAFE,SAAP;AAID;;;WAED,8BAAqB;AACnB,UACEC,QADF,GAEI,KAAK3H,KAFT,CACE2H,QADF;;AAIA,UAAIA,QAAQ,IAAI7J,KAAK,CAACE,cAAN,CAAqB2J,QAArB,CAAhB,EAAgD;AAAA;;AAC9C,YAAM/F,MAAM,mCAAQ,KAAK0D,oBAAL,EAAR;AACVlD,UAAAA,KAAK,yBAAE,KAAKrC,YAAP,qBAAE,oBAAmBqC,KADhB;AAEVC,UAAAA,MAAM,0BAAE,KAAKtC,YAAP,qBAAE,qBAAmBsC;AAFjB,UAAZ;;AAIA,eAAO,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE,CAACkD,MAAM,CAACqC,qBAAR,EAA+BhG,MAA/B,CAAb;AAAA,oBACF9D,KAAK,CAAC+J,YAAN,CAAmBF,QAAnB,EAA6B;AAC9BG,YAAAA,WAAW,EAAE,KADiB;AAE9BC,YAAAA,GAAG,EAAE,MAFyB;AAG9BR,YAAAA,KAAK,EAAE,CAACI,QAAQ,CAAC3H,KAAT,CAAeuH,KAAhB,EAAuBhC,MAAM,CAACyC,YAA9B;AAHuB,WAA7B;AADE,UAAP;AAOD;AACF;;;WAED,0BAAiB;AACf,UACE/H,WADF,GAEI,KAAKD,KAFT,CACEC,WADF;;AAIA,UAAI,CAACA,WAAD,IAAgBjC,cAAc,CAAC,KAAKgC,KAAL,CAAW2H,QAAZ,CAAlC,EAAyD;AACvD,eAAO7J,KAAK,CAAC+J,YAAN,CAAmB,KAAK7H,KAAL,CAAW2H,QAA9B;AACLI,UAAAA,GAAG,EAAE,OADA;AAELD,UAAAA,WAAW,EAAE,KAFR;AAGLG,UAAAA,QAAQ,EAAE,KAAKtG,cAHV;AAILF,UAAAA,GAAG,EAAE,KAAKD;AAJL,WAKF,KAAK0G,oBAAL,EALE,EAAP;AAOD;AACF;;;WAED,kBAAS;AACP,yBAKI,KAAKlI,KALT;AAAA,UACE+B,iBADF,gBACEA,iBADF;AAAA,UAEEoD,aAFF,gBAEEA,aAFF;AAAA,UAGE/B,QAHF,gBAGEA,QAHF;AAAA,UAIEgC,MAJF,gBAIEA,MAJF;;AAOA,UAAI,CAAC,KAAKpF,KAAL,CAAWG,OAAZ,IAAuB,KAAKP,KAAL,CAAWM,aAAtC,EAAqD;AACnD,eAAO,KAAKF,KAAL,CAAW2H,QAAX,IAAuB,IAA9B;AACD;;AAED,aAAO;AAAA,mBACF,KAAKQ,cAAL,EADE,EAEFpG,iBAAiB,IAAIqB,QAArB,GAAgC,MAAC,KAAD;AAAO,UAAA,OAAO,EAAE,KAAK6D,QAArB;AAA+B,UAAA,aAAa,EAAE9B,aAAa,GAAG,MAAH,GAAY,MAAvE;AAA+E,UAAA,sBAAsB,EAAEA,aAAvG;AAAsH,UAAA,WAAW,MAAjI;AAAkI,UAAA,iBAAiB,EAAEpD,iBAArJ;AAAwK,UAAA,cAAc,EAAEA,iBAAxL;AAA2M,UAAA,MAAM,EAAKqD,MAAL,WAAjN;AAAA,qBAC5B,KAAKgD,kBAAL,EAD4B,EAE5B,KAAKC,mBAAL,EAF4B;AAAA,UAAhC,GAGY;AAAA,qBACR,KAAKC,aAAL,EADQ,EAER,KAAKF,kBAAL,EAFQ,EAGR,KAAKC,mBAAL,EAHQ;AAAA,UALV;AAAA,QAAP;AAWD;;;;EAriBgBtK,S;;AAAbyB,I,CACG+I,S,GAAY;AAIjBpI,EAAAA,OAAO,EAAEvC,GAAG,CAAC4K,IAJI;AASjB5C,EAAAA,KAAK,EAAEhI,GAAG,CAAC6K,MATM;AAcjBxH,EAAAA,OAAO,EAAErD,GAAG,CAAC8K,SAAJ,CAAc,CAAC9K,GAAG,CAAC6K,MAAL,EAAa7K,GAAG,CAAC+K,OAAjB,CAAd,CAdQ;AAmBjBpG,EAAAA,QAAQ,EAAE3E,GAAG,CAACgL,KAAJ,CAAU,CAAC,KAAD,EAAQ,QAAR,CAAV,CAnBO;AAwBjB3I,EAAAA,WAAW,EAAErC,GAAG,CAACiL,KAAJ,CAAU;AACrB3G,IAAAA,CAAC,EAAEtE,GAAG,CAACkL,MADc;AAErB3G,IAAAA,CAAC,EAAEvE,GAAG,CAACkL,MAFc;AAGrB1G,IAAAA,KAAK,EAAExE,GAAG,CAACkL,MAHU;AAIrBzG,IAAAA,MAAM,EAAEzE,GAAG,CAACkL;AAJS,GAAV,CAxBI;AAkCjB1F,EAAAA,QAAQ,EAAExF,GAAG,CAAC4K,IAlCG;AAuCjBnF,EAAAA,UAAU,EAAEzF,GAAG,CAAC4K,IAvCC;AA4CjBhC,EAAAA,YAAY,EAAE5I,GAAG,CAACkL,MA5CD;AAiDjBvF,EAAAA,WAAW,EAAE3F,GAAG,CAACkL,MAjDA;AAsDjBxF,EAAAA,MAAM,EAAE1F,GAAG,CAACkL,MAtDK;AA2DjB9B,EAAAA,OAAO,EAAEpJ,GAAG,CAACmL,IA3DI;AAgEjBhH,EAAAA,iBAAiB,EAAEnE,GAAG,CAACmL,IAhEN;AAqEjB5D,EAAAA,aAAa,EAAEvH,GAAG,CAAC6K,MArEF;AA0EjBvF,EAAAA,cAAc,EAAEtF,GAAG,CAACkL,MA1EH;AA+EjBrC,EAAAA,aAAa,EAAE7I,GAAG,CAAC+K,OA/EF;AAoFjBjC,EAAAA,cAAc,EAAE9I,GAAG,CAAC4K,IApFH;AAyFjB7B,EAAAA,YAAY,EAAE/I,GAAG,CAAC4K,IAzFD;AA8FjBpD,EAAAA,MAAM,EAAExH,GAAG,CAAC6K;AA9FK,C;AADfjJ,I,CAiGGwJ,W,GAAc,M;AAjGjBxJ,I,CAkGGyJ,Y,GAAe;AACpB1G,EAAAA,QAAQ,EAAEhD,aAAa,CAAC2J,MADJ;AAEpB9F,EAAAA,QAAQ,EAAE;AAFU,C;AAlGlB5D,I,CAsGG2J,S,GAAY5J,a;AAmcrB,IAAMgG,MAAM,GAAGG,UAAU,CAAC0D,MAAX,CAAkB;AAC/B3B,EAAAA,SAAS,EAAE;AACTlF,IAAAA,QAAQ,EAAE,UADD;AAET8G,IAAAA,MAAM,EAAE;AAFC,GADoB;AAK/BzB,EAAAA,qBAAqB,EAAE;AACrBrF,IAAAA,QAAQ,EAAE;AADW,GALQ;AAQ/ByF,EAAAA,YAAY,EAAE;AACZsB,IAAAA,MAAM,EAAExJ,SADI;AAEZyJ,IAAAA,cAAc,EAAEzJ,SAFJ;AAGZ0J,IAAAA,gBAAgB,EAAE1J,SAHN;AAIZ2J,IAAAA,SAAS,EAAE3J,SAJC;AAKZ4J,IAAAA,WAAW,EAAE5J,SALD;AAMZ6J,IAAAA,YAAY,EAAE7J,SANF;AAOZ8J,IAAAA,UAAU,EAAE9J,SAPA;AAQZgE,IAAAA,GAAG,EAAEhE,SARO;AASZiE,IAAAA,IAAI,EAAEjE,SATM;AAUZoF,IAAAA,KAAK,EAAEpF,SAVK;AAWZoE,IAAAA,MAAM,EAAEpE;AAXI,GARiB;AAqB/B0F,EAAAA,OAAO,EAAE;AACPjD,IAAAA,QAAQ,EAAE,UADH;AAEPH,IAAAA,KAAK,EAAE9D,SAAS,CAAC6E,WAFV;AAGPd,IAAAA,MAAM,EAAE/D,SAAS,CAACuL;AAHX,GArBsB;AA0B/B3C,EAAAA,iBAAiB,EAAE;AACjB3E,IAAAA,QAAQ,EAAE;AADO,GA1BY;AA6B/B4D,EAAAA,OAAO,EAAE;AACP5D,IAAAA,QAAQ,EAAE;AADH,GA7BsB;AAgC/BqE,EAAAA,IAAI,EAAE;AACJkD,IAAAA,QAAQ,EAAEC,IAAI,CAACC,GAAL,CAAS1L,SAAS,CAAC6E,WAAV,GAAwB,IAAIjF,QAAQ,CAACiB,EAA9C,EAAkD,GAAlD,CADN;AAEJqH,IAAAA,YAAY,EAAEpI,cAAc,CAAC6L,IAFzB;AAGJxE,IAAAA,eAAe,EAAEzG;AAHb,GAhCyB;AAqC/B6H,EAAAA,YAAY,EAAE;AACZrC,IAAAA,iBAAiB,EAAEtG,QAAQ,CAACmB,EADhB;AAEZ6K,IAAAA,UAAU,EAAEhM,QAAQ,CAACiM,EAFT;AAGZC,IAAAA,aAAa,EAAElM,QAAQ,CAACiB;AAHZ,GArCiB;AA0C/B2H,EAAAA,eAAe,oBAAOzI,OAAO,CAACgM,IAAR,CAAanG,MAApB,CA1CgB;AA4C/B6C,EAAAA,WAAW,kCAAO9I,UAAU,CAACqM,MAAlB;AACT1E,IAAAA,KAAK,EAAEzH,MAAM,CAACoM,KADL;AAETC,IAAAA,UAAU,EAAE;AAFH,IA5CoB;AAgD/BlE,EAAAA,IAAI,EAAE;AACJoD,IAAAA,WAAW,EAAExL,QAAQ,CAACiB,EADlB;AAEJsL,IAAAA,SAAS,EAAEtM,MAAM,CAACoM;AAFd;AAhDyB,CAAlB,CAAf;AAqDA,eAAehM,eAAe,CAACiB,IAAD,CAA9B","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { Component, isValidElement } from 'react';\nimport { Animated, StyleSheet, AccessibilityInfo, findNodeHandle, TouchableWithoutFeedback } from 'react-native';\nimport { Typography, Spacings, Colors, BorderRadiuses, Shadows } from \"../../style\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport Image from \"../image\";\nimport Modal from \"../modal\";\nimport TouchableOpacity from \"../touchableOpacity\";\n\nconst sideTip = require(\"./assets/hintTipSide.png\");\n\nconst middleTip = require(\"./assets/hintTipMiddle.png\");\n\nconst DEFAULT_COLOR = Colors.primary;\nconst DEFAULT_HINT_OFFSET = Spacings.s4;\nconst DEFAULT_EDGE_MARGINS = Spacings.s5;\nvar TARGET_POSITIONS;\n\n(function (TARGET_POSITIONS) {\n  TARGET_POSITIONS[\"LEFT\"] = \"left\";\n  TARGET_POSITIONS[\"RIGHT\"] = \"right\";\n  TARGET_POSITIONS[\"CENTER\"] = \"center\";\n})(TARGET_POSITIONS || (TARGET_POSITIONS = {}));\n\nvar HintPositions; // TODO: unify with FeatureHighlightFrame\n\n(function (HintPositions) {\n  HintPositions[\"TOP\"] = \"top\";\n  HintPositions[\"BOTTOM\"] = \"bottom\";\n})(HintPositions || (HintPositions = {}));\n\n/**\n * @description: Hint component for displaying a tooltip over wrapped component\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/HintsScreen.tsx\n * @notes: You can either wrap a component or pass a specific targetFrame\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Hint/Hint.gif?raw=true\n */\nclass Hint extends Component {\n  static propTypes = {\n    /**\n       * Control the visibility of the hint\n       */\n    visible: _pt.bool,\n\n    /**\n       * The hint background color\n       */\n    color: _pt.string,\n\n    /**\n       * The hint message\n       */\n    message: _pt.oneOfType([_pt.string, _pt.element]),\n\n    /**\n       * The hint's position\n       */\n    position: _pt.oneOf([\"top\", \"bottom\"]),\n\n    /**\n       * Provide custom target position instead of wrapping a child\n       */\n    targetFrame: _pt.shape({\n      x: _pt.number,\n      y: _pt.number,\n      width: _pt.number,\n      height: _pt.number\n    }),\n\n    /**\n       * Open the hint using a Modal component\n       */\n    useModal: _pt.bool,\n\n    /**\n       * Show side tips instead of the middle tip\n       */\n    useSideTip: _pt.bool,\n\n    /**\n       * The hint's border radius\n       */\n    borderRadius: _pt.number,\n\n    /**\n       * Hint margins from screen edges\n       */\n    edgeMargins: _pt.number,\n\n    /**\n       * Hint offset from target\n       */\n    offset: _pt.number,\n\n    /**\n       * Callback for Hint press\n       */\n    onPress: _pt.func,\n\n    /**\n       * Callback for the background press\n       */\n    onBackgroundPress: _pt.func,\n\n    /**\n       * Color for background overlay (require onBackgroundPress)\n       */\n    backdropColor: _pt.string,\n\n    /**\n       * The hint container width\n       */\n    containerWidth: _pt.number,\n\n    /**\n       * Custom content element to render inside the hint container\n       */\n    customContent: _pt.element,\n\n    /**\n       * Remove all hint's paddings\n       */\n    removePaddings: _pt.bool,\n\n    /**\n       * Enable shadow (for hint with white background only)\n       */\n    enableShadow: _pt.bool,\n\n    /**\n       * The hint's test identifier\n       */\n    testID: _pt.string\n  };\n  static displayName = 'Hint';\n  static defaultProps = {\n    position: HintPositions.BOTTOM,\n    useModal: true\n  };\n  static positions = HintPositions;\n  targetRef = null;\n  hintRef = null;\n  animationDuration = 170;\n  state = {\n    targetLayoutInWindow: undefined,\n    targetLayout: this.props.targetFrame,\n    hintUnmounted: !this.props.visible\n  };\n  visibleAnimated = new Animated.Value(Number(!!this.props.visible));\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.visible !== this.props.visible) {\n      this.animateHint();\n    }\n  }\n\n  animateHint = () => {\n    Animated.timing(this.visibleAnimated, {\n      toValue: Number(!!this.props.visible),\n      duration: this.animationDuration,\n      useNativeDriver: true\n    }).start(this.toggleAnimationEndedToRemoveHint);\n  };\n  toggleAnimationEndedToRemoveHint = () => {\n    this.setState({\n      hintUnmounted: !this.props.visible\n    });\n  };\n  focusAccessibilityOnHint = () => {\n    const {\n      message\n    } = this.props;\n    const targetRefTag = findNodeHandle(this.targetRef);\n    const hintRefTag = findNodeHandle(this.hintRef);\n\n    if (targetRefTag && _.isString(message)) {\n      AccessibilityInfo.setAccessibilityFocus(targetRefTag);\n    } else if (hintRefTag) {\n      AccessibilityInfo.setAccessibilityFocus(hintRefTag);\n    }\n  };\n  setTargetRef = ref => {\n    this.targetRef = ref;\n    this.focusAccessibilityOnHint();\n  };\n  setHintRef = ref => {\n    this.hintRef = ref;\n    this.focusAccessibilityOnHint();\n  };\n  onTargetLayout = ({\n    nativeEvent: {\n      layout\n    }\n  }) => {\n    if (!_.isEqual(this.state.targetLayout, layout)) {\n      this.setState({\n        targetLayout: layout\n      });\n    }\n\n    if (!this.state.targetLayoutInWindow || this.props.onBackgroundPress) {\n      setTimeout(() => {\n        this.targetRef?.measureInWindow((x, y, width, height) => {\n          const targetLayoutInWindow = {\n            x,\n            y,\n            width,\n            height\n          };\n          this.setState({\n            targetLayoutInWindow\n          });\n        });\n      });\n    }\n  };\n\n  getAccessibilityInfo() {\n    const {\n      visible,\n      message\n    } = this.props;\n\n    if (visible && _.isString(message)) {\n      return {\n        accessible: true,\n        accessibilityLabel: `hint: ${message}`\n      };\n    }\n  }\n\n  get containerWidth() {\n    const {\n      containerWidth = Constants.screenWidth\n    } = this.props;\n    return containerWidth;\n  }\n\n  get targetLayout() {\n    const {\n      onBackgroundPress,\n      useModal,\n      targetFrame\n    } = this.props;\n    const {\n      targetLayout,\n      targetLayoutInWindow\n    } = this.state;\n\n    if (targetFrame) {\n      return targetFrame;\n    }\n\n    return onBackgroundPress && useModal ? targetLayoutInWindow : targetLayout;\n  }\n\n  get showHint() {\n    return !!this.targetLayout;\n  }\n\n  get tipSize() {\n    return this.useSideTip ? {\n      width: 14,\n      height: 7\n    } : {\n      width: 20,\n      height: 7\n    };\n  }\n\n  get hintOffset() {\n    const {\n      offset = DEFAULT_HINT_OFFSET\n    } = this.props;\n    return offset;\n  }\n\n  get edgeMargins() {\n    const {\n      edgeMargins = DEFAULT_EDGE_MARGINS\n    } = this.props;\n    return edgeMargins;\n  }\n\n  get useSideTip() {\n    const {\n      useSideTip\n    } = this.props;\n\n    if (!_.isUndefined(useSideTip)) {\n      return useSideTip;\n    }\n\n    return this.getTargetPositionOnScreen() !== TARGET_POSITIONS.CENTER;\n  }\n\n  getTargetPositionOnScreen() {\n    if (this.targetLayout?.x && this.targetLayout?.width) {\n      const targetMidPosition = this.targetLayout.x + this.targetLayout.width / 2;\n\n      if (targetMidPosition > this.containerWidth * (2 / 3)) {\n        return TARGET_POSITIONS.RIGHT;\n      } else if (targetMidPosition < this.containerWidth * (1 / 3)) {\n        return TARGET_POSITIONS.LEFT;\n      }\n    }\n\n    return TARGET_POSITIONS.CENTER;\n  }\n\n  getContainerPosition() {\n    if (this.targetLayout) {\n      return {\n        top: this.targetLayout.y || 0,\n        left: this.targetLayout.x || 0\n      };\n    }\n\n    return {\n      top: 0,\n      left: 0\n    };\n  }\n\n  getHintPosition() {\n    const {\n      position\n    } = this.props;\n    const hintPositionStyle = {\n      alignItems: 'center'\n    };\n\n    if (this.targetLayout?.x) {\n      hintPositionStyle.left = -this.targetLayout.x;\n    }\n\n    if (position === HintPositions.TOP) {\n      hintPositionStyle.bottom = 0;\n    } else if (this.targetLayout?.height) {\n      hintPositionStyle.top = this.targetLayout.height;\n    }\n\n    const targetPositionOnScreen = this.getTargetPositionOnScreen();\n\n    if (targetPositionOnScreen === TARGET_POSITIONS.RIGHT) {\n      hintPositionStyle.alignItems = Constants.isRTL ? 'flex-start' : 'flex-end';\n    } else if (targetPositionOnScreen === TARGET_POSITIONS.LEFT) {\n      hintPositionStyle.alignItems = Constants.isRTL ? 'flex-end' : 'flex-start';\n    }\n\n    return hintPositionStyle;\n  }\n\n  getHintPadding() {\n    const paddings = {\n      paddingVertical: this.hintOffset,\n      paddingHorizontal: this.edgeMargins\n    };\n\n    if (this.useSideTip && this.targetLayout?.x) {\n      const targetPositionOnScreen = this.getTargetPositionOnScreen();\n\n      if (targetPositionOnScreen === TARGET_POSITIONS.LEFT) {\n        paddings.paddingLeft = this.targetLayout.x;\n      } else if (targetPositionOnScreen === TARGET_POSITIONS.RIGHT && this.targetLayout?.width) {\n        paddings.paddingRight = this.containerWidth - this.targetLayout.x - this.targetLayout.width;\n      }\n    }\n\n    return paddings;\n  }\n\n  getHintAnimatedStyle = () => {\n    const {\n      position\n    } = this.props;\n    const translateY = position === HintPositions.TOP ? -10 : 10;\n    return {\n      opacity: this.visibleAnimated,\n      transform: [{\n        translateY: this.visibleAnimated.interpolate({\n          inputRange: [0, 1],\n          outputRange: [translateY, 0]\n        })\n      }]\n    };\n  };\n\n  getTipPosition() {\n    const {\n      position\n    } = this.props;\n    const tipPositionStyle = {};\n\n    if (position === HintPositions.TOP) {\n      tipPositionStyle.bottom = this.hintOffset - this.tipSize.height;\n      !this.useSideTip ? tipPositionStyle.bottom += 1 : undefined;\n    } else {\n      tipPositionStyle.top = this.hintOffset - this.tipSize.height;\n    }\n\n    const layoutWidth = this.targetLayout?.width || 0;\n\n    if (this.targetLayout?.x) {\n      const targetMidWidth = layoutWidth / 2;\n      const tipMidWidth = this.tipSize.width / 2;\n      const leftPosition = this.useSideTip ? this.targetLayout.x : this.targetLayout.x + targetMidWidth - tipMidWidth;\n      const rightPosition = this.useSideTip ? this.containerWidth - this.targetLayout.x - layoutWidth : this.containerWidth - this.targetLayout.x - targetMidWidth - tipMidWidth;\n      const targetPositionOnScreen = this.getTargetPositionOnScreen();\n\n      switch (targetPositionOnScreen) {\n        case TARGET_POSITIONS.LEFT:\n          tipPositionStyle.left = Constants.isRTL ? rightPosition : leftPosition;\n          break;\n\n        case TARGET_POSITIONS.RIGHT:\n          tipPositionStyle.right = Constants.isRTL ? leftPosition : rightPosition;\n          break;\n\n        case TARGET_POSITIONS.CENTER:\n        default:\n          tipPositionStyle.left = this.targetLayout.x + targetMidWidth - tipMidWidth;\n          break;\n      }\n    }\n\n    return tipPositionStyle;\n  }\n\n  renderOverlay() {\n    const {\n      targetLayoutInWindow\n    } = this.state;\n    const {\n      onBackgroundPress,\n      backdropColor,\n      testID\n    } = this.props;\n\n    if (targetLayoutInWindow) {\n      const containerPosition = this.getContainerPosition();\n      return <Animated.View style={[styles.overlay, {\n        top: containerPosition.top - targetLayoutInWindow.y,\n        left: containerPosition.left - targetLayoutInWindow.x,\n        backgroundColor: backdropColor,\n        opacity: this.visibleAnimated\n      }]} pointerEvents=\"box-none\" testID={`${testID}.overlay`}>\n          {onBackgroundPress && <TouchableWithoutFeedback style={StyleSheet.absoluteFillObject} onPress={onBackgroundPress}>\n              <View flex />\n            </TouchableWithoutFeedback>}\n        </Animated.View>;\n    }\n  }\n\n  renderHintTip() {\n    const {\n      position,\n      color = DEFAULT_COLOR\n    } = this.props;\n    const source = this.useSideTip ? sideTip : middleTip;\n    const flipVertically = position === HintPositions.TOP;\n    const flipHorizontally = this.getTargetPositionOnScreen() === TARGET_POSITIONS.RIGHT;\n    const flipStyle = {\n      transform: [{\n        scaleY: flipVertically ? -1 : 1\n      }, {\n        scaleX: flipHorizontally ? -1 : 1\n      }]\n    };\n    return <Image tintColor={color} source={source} style={[styles.hintTip, this.getTipPosition(), flipStyle]} />;\n  }\n\n  renderContent() {\n    const {\n      message,\n      messageStyle,\n      icon,\n      iconStyle,\n      borderRadius,\n      color = DEFAULT_COLOR,\n      customContent,\n      removePaddings,\n      enableShadow,\n      visible,\n      testID\n    } = this.props;\n    return <View testID={`${testID}.message`} row centerV style={[styles.hint, !removePaddings && styles.hintPaddings, visible && enableShadow && styles.containerShadow, {\n      backgroundColor: color\n    }, !_.isUndefined(borderRadius) && {\n      borderRadius\n    }]} ref={this.setHintRef}>\n        {customContent}\n        {!customContent && icon && <Image source={icon} style={[styles.icon, iconStyle]} />}\n        {!customContent && <Text style={[styles.hintMessage, messageStyle]}>{message}</Text>}\n      </View>;\n  }\n\n  renderHint() {\n    const {\n      onPress,\n      testID\n    } = this.props;\n    const opacity = onPress ? 0.9 : 1.0;\n\n    if (this.showHint) {\n      return <View animated style={[{\n        width: this.containerWidth\n      }, styles.animatedContainer, this.getHintPosition(), this.getHintPadding(), this.getHintAnimatedStyle()]} pointerEvents=\"box-none\" testID={testID}>\n          <TouchableOpacity activeOpacity={opacity} onPress={onPress}>\n            {this.renderContent()}\n          </TouchableOpacity>\n          {this.renderHintTip()}\n        </View>;\n    }\n  }\n\n  renderHintContainer() {\n    const {\n      style,\n      ...others\n    } = this.props;\n    return <View {...others} // this view must be collapsable, don't pass testID or backgroundColor etc'.\n    collapsable testID={undefined} style={[styles.container, style, this.getContainerPosition()]}>\n        {this.renderHint()}\n      </View>;\n  }\n\n  renderMockChildren() {\n    const {\n      children\n    } = this.props;\n\n    if (children && React.isValidElement(children)) {\n      const layout = { ...this.getContainerPosition(),\n        width: this.targetLayout?.width,\n        height: this.targetLayout?.height\n      };\n      return <View style={[styles.mockChildrenContainer, layout]}>\n          {React.cloneElement(children, {\n          collapsable: false,\n          key: 'mock',\n          style: [children.props.style, styles.mockChildren]\n        })}\n        </View>;\n    }\n  }\n\n  renderChildren() {\n    const {\n      targetFrame\n    } = this.props;\n\n    if (!targetFrame && isValidElement(this.props.children)) {\n      return React.cloneElement(this.props.children, {\n        key: 'clone',\n        collapsable: false,\n        onLayout: this.onTargetLayout,\n        ref: this.setTargetRef,\n        ...this.getAccessibilityInfo()\n      });\n    }\n  }\n\n  render() {\n    const {\n      onBackgroundPress,\n      backdropColor,\n      useModal,\n      testID\n    } = this.props;\n\n    if (!this.props.visible && this.state.hintUnmounted) {\n      return this.props.children || null;\n    }\n\n    return <>\n        {this.renderChildren()}\n        {onBackgroundPress && useModal ? <Modal visible={this.showHint} animationType={backdropColor ? 'fade' : 'none'} overlayBackgroundColor={backdropColor} transparent onBackgroundPress={onBackgroundPress} onRequestClose={onBackgroundPress} testID={`${testID}.modal`}>\n            {this.renderMockChildren()}\n            {this.renderHintContainer()}\n          </Modal> : <>\n            {this.renderOverlay()}\n            {this.renderMockChildren()}\n            {this.renderHintContainer()}\n          </>}\n      </>;\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    zIndex: 1\n  },\n  mockChildrenContainer: {\n    position: 'absolute'\n  },\n  mockChildren: {\n    margin: undefined,\n    marginVertical: undefined,\n    marginHorizontal: undefined,\n    marginTop: undefined,\n    marginRight: undefined,\n    marginBottom: undefined,\n    marginLeft: undefined,\n    top: undefined,\n    left: undefined,\n    right: undefined,\n    bottom: undefined\n  },\n  overlay: {\n    position: 'absolute',\n    width: Constants.screenWidth,\n    height: Constants.screenHeight\n  },\n  animatedContainer: {\n    position: 'absolute'\n  },\n  hintTip: {\n    position: 'absolute'\n  },\n  hint: {\n    maxWidth: Math.min(Constants.screenWidth - 2 * Spacings.s4, 400),\n    borderRadius: BorderRadiuses.br60,\n    backgroundColor: DEFAULT_COLOR\n  },\n  hintPaddings: {\n    paddingHorizontal: Spacings.s5,\n    paddingTop: Spacings.s3,\n    paddingBottom: Spacings.s4\n  },\n  containerShadow: { ...Shadows.sh30.bottom\n  },\n  hintMessage: { ...Typography.text70,\n    color: Colors.white,\n    flexShrink: 1\n  },\n  icon: {\n    marginRight: Spacings.s4,\n    tintColor: Colors.white\n  }\n});\nexport default asBaseComponent(Hint);"]},"metadata":{},"sourceType":"module"}