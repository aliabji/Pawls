{"ast":null,"code":"import _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../../components/text\";\nimport FieldContext from \"./FieldContext\";\nimport { getRelevantValidationMessage } from \"./Presenter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ValidationMessage = function ValidationMessage(_ref) {\n  var validationMessage = _ref.validationMessage,\n      enableErrors = _ref.enableErrors,\n      validationMessageStyle = _ref.validationMessageStyle,\n      retainSpace = _ref.retainSpace,\n      validate = _ref.validate,\n      testID = _ref.testID;\n  var context = useContext(FieldContext);\n\n  if (!enableErrors || !retainSpace && context.isValid) {\n    return null;\n  }\n\n  var relevantValidationMessage = getRelevantValidationMessage(validationMessage, context.failingValidatorIndex);\n  var showValidationMessage = !context.isValid || !validate && !!validationMessage;\n  return _jsx(Text, {\n    testID: testID,\n    red30: true,\n    style: [styles.validationMessage, validationMessageStyle],\n    children: showValidationMessage ? relevantValidationMessage : ''\n  });\n};\n\nValidationMessage.propTypes = {\n  enableErrors: _pt.bool,\n  validationMessage: _pt.oneOfType([_pt.string, _pt.arrayOf(_pt.string)]),\n  retainSpace: _pt.bool,\n  testID: _pt.string\n};\nvar styles = StyleSheet.create({\n  validationMessage: {\n    minHeight: 20\n  }\n});\nValidationMessage.displayName = 'Incubator.TextField';\nexport default ValidationMessage;","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TextField/ValidationMessage.js"],"names":["_pt","React","useContext","Text","FieldContext","getRelevantValidationMessage","ValidationMessage","validationMessage","enableErrors","validationMessageStyle","retainSpace","validate","testID","context","isValid","relevantValidationMessage","failingValidatorIndex","showValidationMessage","styles","propTypes","bool","oneOfType","string","arrayOf","StyleSheet","create","minHeight","displayName"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,OAAOC,IAAP;AACA,OAAOC,YAAP;AACA,SAASC,4BAAT;;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAOpB;AAAA,MANJC,iBAMI,QANJA,iBAMI;AAAA,MALJC,YAKI,QALJA,YAKI;AAAA,MAJJC,sBAII,QAJJA,sBAII;AAAA,MAHJC,WAGI,QAHJA,WAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,MACI,QADJA,MACI;AACJ,MAAMC,OAAO,GAAGX,UAAU,CAACE,YAAD,CAA1B;;AAEA,MAAI,CAACI,YAAD,IAAiB,CAACE,WAAD,IAAgBG,OAAO,CAACC,OAA7C,EAAsD;AACpD,WAAO,IAAP;AACD;;AAED,MAAMC,yBAAyB,GAAGV,4BAA4B,CAACE,iBAAD,EAAoBM,OAAO,CAACG,qBAA5B,CAA9D;AACA,MAAMC,qBAAqB,GAAG,CAACJ,OAAO,CAACC,OAAT,IAAoB,CAACH,QAAD,IAAa,CAAC,CAACJ,iBAAjE;AACA,SAAO,KAAC,IAAD;AAAM,IAAA,MAAM,EAAEK,MAAd;AAAsB,IAAA,KAAK,MAA3B;AAA4B,IAAA,KAAK,EAAE,CAACM,MAAM,CAACX,iBAAR,EAA2BE,sBAA3B,CAAnC;AAAA,cACFQ,qBAAqB,GAAGF,yBAAH,GAA+B;AADlD,IAAP;AAGD,CAnBD;;AAqBAT,iBAAiB,CAACa,SAAlB,GAA8B;AAI5BX,EAAAA,YAAY,EAAER,GAAG,CAACoB,IAJU;AAS5Bb,EAAAA,iBAAiB,EAAEP,GAAG,CAACqB,SAAJ,CAAc,CAACrB,GAAG,CAACsB,MAAL,EAAatB,GAAG,CAACuB,OAAJ,CAAYvB,GAAG,CAACsB,MAAhB,CAAb,CAAd,CATS;AAU5BZ,EAAAA,WAAW,EAAEV,GAAG,CAACoB,IAVW;AAW5BR,EAAAA,MAAM,EAAEZ,GAAG,CAACsB;AAXgB,CAA9B;AAaA,IAAMJ,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BlB,EAAAA,iBAAiB,EAAE;AACjBmB,IAAAA,SAAS,EAAE;AADM;AADY,CAAlB,CAAf;AAKApB,iBAAiB,CAACqB,WAAlB,GAAgC,qBAAhC;AACA,eAAerB,iBAAf","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Text from \"../../components/text\";\nimport FieldContext from \"./FieldContext\";\nimport { getRelevantValidationMessage } from \"./Presenter\";\n\nconst ValidationMessage = ({\n  validationMessage,\n  enableErrors,\n  validationMessageStyle,\n  retainSpace,\n  validate,\n  testID\n}) => {\n  const context = useContext(FieldContext);\n\n  if (!enableErrors || !retainSpace && context.isValid) {\n    return null;\n  }\n\n  const relevantValidationMessage = getRelevantValidationMessage(validationMessage, context.failingValidatorIndex);\n  const showValidationMessage = !context.isValid || !validate && !!validationMessage;\n  return <Text testID={testID} red30 style={[styles.validationMessage, validationMessageStyle]}>\n      {showValidationMessage ? relevantValidationMessage : ''}\n    </Text>;\n};\n\nValidationMessage.propTypes = {\n  /**\n     * Should support showing validation error message\n     */\n  enableErrors: _pt.bool,\n\n  /**\n     * The validation message to display when field is invalid (depends on validate)\n     */\n  validationMessage: _pt.oneOfType([_pt.string, _pt.arrayOf(_pt.string)]),\n  retainSpace: _pt.bool,\n  testID: _pt.string\n};\nconst styles = StyleSheet.create({\n  validationMessage: {\n    minHeight: 20\n  }\n});\nValidationMessage.displayName = 'Incubator.TextField';\nexport default ValidationMessage;"]},"metadata":{},"sourceType":"module"}