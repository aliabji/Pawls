{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useMemo, memo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated, { interpolateColor, useAnimatedStyle } from 'react-native-reanimated';\nimport Text from \"../../components/text\";\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport { Colors, Spacings } from \"../../../src/style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { WheelPickerAlign } from \"./types\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AnimatedTouchableOpacity = Animated.createAnimatedComponent(TouchableOpacity);\nvar AnimatedText = Animated.createAnimatedComponent(Text);\nvar WheelPickerItem = memo(function (_ref) {\n  var index = _ref.index,\n      label = _ref.label,\n      fakeLabel = _ref.fakeLabel,\n      fakeLabelStyle = _ref.fakeLabelStyle,\n      fakeLabelProps = _ref.fakeLabelProps,\n      itemHeight = _ref.itemHeight,\n      onSelect = _ref.onSelect,\n      offset = _ref.offset,\n      _ref$activeColor = _ref.activeColor,\n      activeColor = _ref$activeColor === void 0 ? Colors.primary : _ref$activeColor,\n      _ref$inactiveColor = _ref.inactiveColor,\n      inactiveColor = _ref$inactiveColor === void 0 ? Colors.grey20 : _ref$inactiveColor,\n      style = _ref.style,\n      testID = _ref.testID,\n      _ref$centerH = _ref.centerH,\n      centerH = _ref$centerH === void 0 ? true : _ref$centerH,\n      align = _ref.align;\n  var selectItem = useCallback(function () {\n    return onSelect(index);\n  }, [index]);\n  var itemOffset = index * itemHeight;\n  var animatedColorStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      var color = interpolateColor(offset.value, [itemOffset - itemHeight, itemOffset, itemOffset + itemHeight], [inactiveColor, activeColor, inactiveColor]);\n      return {\n        color: color\n      };\n    };\n\n    _f._closure = {\n      interpolateColor: interpolateColor,\n      offset: offset,\n      itemOffset: itemOffset,\n      itemHeight: itemHeight,\n      inactiveColor: inactiveColor,\n      activeColor: activeColor\n    };\n    _f.asString = \"function _f(){const{interpolateColor,offset,itemOffset,itemHeight,inactiveColor,activeColor}=jsThis._closure;{const color=interpolateColor(offset.value,[itemOffset-itemHeight,itemOffset,itemOffset+itemHeight],[inactiveColor,activeColor,inactiveColor]);return{color:color};}}\";\n    _f.__workletHash = 1695439857382;\n    _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/WheelPicker/Item.js (29:46)\";\n    _f.__optimalization = 2;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [itemHeight]);\n  var containerStyle = useMemo(function () {\n    return [{\n      height: itemHeight\n    }, styles.container];\n  }, [itemHeight]);\n  return _jsxs(AnimatedTouchableOpacity, {\n    activeOpacity: 1,\n    style: containerStyle,\n    centerV: true,\n    centerH: align ? align === WheelPickerAlign.CENTER : centerH,\n    right: align ? align === WheelPickerAlign.RIGHT : !centerH,\n    left: align === WheelPickerAlign.LEFT,\n    onPress: selectItem,\n    index: index,\n    testID: testID,\n    row: true,\n    children: [_jsx(AnimatedText, {\n      text60R: true,\n      testID: testID + \".text\",\n      numberOfLines: 1,\n      style: [animatedColorStyle, style, fakeLabel ? styles.textWithLabelPadding : styles.textPadding],\n      children: label\n    }), fakeLabel && _jsx(Text, _objectSpread(_objectSpread({\n      \"marginL-s2\": true,\n      \"marginR-s5\": true,\n      text80M: true,\n      color: 'white'\n    }, fakeLabelProps), {}, {\n      style: fakeLabelStyle,\n      children: fakeLabel\n    }))]\n  }, index);\n});\nWheelPickerItem.displayName = 'Incubator.WheelPickerItem';\nexport default asBaseComponent(WheelPickerItem);\nvar styles = StyleSheet.create({\n  container: {\n    minWidth: Spacings.s10\n  },\n  textPadding: {\n    paddingHorizontal: Spacings.s5\n  },\n  textWithLabelPadding: {\n    paddingLeft: Spacings.s5\n  }\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/WheelPicker/Item.js"],"names":["React","useCallback","useMemo","memo","Animated","interpolateColor","useAnimatedStyle","Text","TouchableOpacity","Colors","Spacings","asBaseComponent","WheelPickerAlign","AnimatedTouchableOpacity","createAnimatedComponent","AnimatedText","WheelPickerItem","index","label","fakeLabel","fakeLabelStyle","fakeLabelProps","itemHeight","onSelect","offset","activeColor","primary","inactiveColor","grey20","style","testID","centerH","align","selectItem","itemOffset","animatedColorStyle","color","value","containerStyle","height","styles","container","CENTER","RIGHT","LEFT","textWithLabelPadding","textPadding","displayName","StyleSheet","create","minWidth","s10","paddingHorizontal","s5","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, { interpolateColor, useAnimatedStyle } from 'react-native-reanimated';\nimport Text from \"../../components/text\";\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport { Colors, Spacings } from \"../../../src/style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { WheelPickerAlign } from \"./types\";\nconst AnimatedTouchableOpacity = Animated.createAnimatedComponent(TouchableOpacity);\nconst AnimatedText = Animated.createAnimatedComponent(Text);\nconst WheelPickerItem = memo(({\n  index,\n  label,\n  fakeLabel,\n  fakeLabelStyle,\n  fakeLabelProps,\n  itemHeight,\n  onSelect,\n  offset,\n  activeColor = Colors.primary,\n  inactiveColor = Colors.grey20,\n  style,\n  testID,\n  centerH = true,\n  align\n}) => {\n  const selectItem = useCallback(() => onSelect(index), [index]);\n  const itemOffset = index * itemHeight;\n  const animatedColorStyle = useAnimatedStyle(() => {\n    const color = interpolateColor(offset.value, [itemOffset - itemHeight, itemOffset, itemOffset + itemHeight], [inactiveColor, activeColor, inactiveColor]);\n    return {\n      color\n    };\n  }, [itemHeight]);\n  const containerStyle = useMemo(() => {\n    return [{\n      height: itemHeight\n    }, styles.container];\n  }, [itemHeight]);\n  return <AnimatedTouchableOpacity activeOpacity={1} style={containerStyle} key={index} centerV centerH={align ? align === WheelPickerAlign.CENTER : centerH} right={align ? align === WheelPickerAlign.RIGHT : !centerH} left={align === WheelPickerAlign.LEFT} onPress={selectItem} // @ts-ignore reanimated2\n  index={index} testID={testID} row>\n      <AnimatedText text60R testID={`${testID}.text`} numberOfLines={1} style={[animatedColorStyle, style, fakeLabel ? styles.textWithLabelPadding : styles.textPadding]}>\n        {label}\n      </AnimatedText>\n      {fakeLabel && <Text marginL-s2 marginR-s5 text80M color={'white'} {...fakeLabelProps} style={fakeLabelStyle}>\n          {fakeLabel}\n        </Text>}\n    </AnimatedTouchableOpacity>;\n});\nWheelPickerItem.displayName = 'Incubator.WheelPickerItem';\nexport default asBaseComponent(WheelPickerItem);\nconst styles = StyleSheet.create({\n  container: {\n    minWidth: Spacings.s10\n  },\n  textPadding: {\n    paddingHorizontal: Spacings.s5\n  },\n  textWithLabelPadding: {\n    paddingLeft: Spacings.s5\n  }\n});"]},"metadata":{},"sourceType":"module"}