{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { NetInfoPackage as NetInfo } from \"../../optionalDependencies\";\nimport { Colors, Typography } from \"../../style\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport View from \"../view\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport { ConnectionStatusBarProps, DEFAULT_PROPS } from \"./Types\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport { ConnectionStatusBarProps };\n\nvar ConnectionStatusBar = function (_PureComponent) {\n  _inherits(ConnectionStatusBar, _PureComponent);\n\n  var _super = _createSuper(ConnectionStatusBar);\n\n  function ConnectionStatusBar(props) {\n    var _this;\n\n    _classCallCheck(this, ConnectionStatusBar);\n\n    _this = _super.call(this, props);\n\n    _this.generateStyles();\n\n    _this.onConnectionChange = _this.onConnectionChange.bind(_assertThisInitialized(_this));\n    _this.state = {\n      isConnected: true,\n      isCancelled: false\n    };\n\n    if (NetInfo) {\n      _this.getInitialConnectionState();\n    } else {\n      console.error(\"RNUILib ConnectionStatusBar component requires installing \\\"@react-native-community/netinfo\\\" dependency\");\n    }\n\n    return _this;\n  }\n\n  _createClass(ConnectionStatusBar, [{\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.unsubscribe = NetInfo == null ? void 0 : NetInfo.addEventListener(this.onConnectionChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.unsubscribe) {\n        this.unsubscribe();\n      }\n    }\n  }, {\n    key: \"onConnectionChange\",\n    value: function onConnectionChange(state) {\n      var _this2 = this;\n\n      var isConnected = this.isStateConnected(state);\n\n      if (isConnected !== this.state.isConnected) {\n        this.setState({\n          isConnected: isConnected,\n          isCancelled: false\n        });\n\n        if (this.props.onConnectionChange) {\n          this.props.onConnectionChange(isConnected, false);\n        }\n\n        if (!isConnected) {\n          setTimeout(function () {\n            _this2.getInitialConnectionState();\n          }, 3000);\n        }\n\n        if (!isConnected && _.isFunction(ConnectionStatusBar.onConnectionLost)) {\n          ConnectionStatusBar.onConnectionLost();\n        }\n      }\n    }\n  }, {\n    key: \"getInitialConnectionState\",\n    value: function getInitialConnectionState() {\n      var isConnected;\n      return _regeneratorRuntime.async(function getInitialConnectionState$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(NetInfo == null ? void 0 : NetInfo.fetch());\n\n            case 2:\n              isConnected = _context.sent.isConnected;\n              this.setState({\n                isConnected: isConnected\n              });\n\n              if (this.props.onConnectionChange) {\n                this.props.onConnectionChange(isConnected, true);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"isStateConnected\",\n    value: function isStateConnected(state) {\n      var lowerCaseState = _.lowerCase(state.type);\n\n      var isConnected = lowerCaseState !== 'none';\n      return isConnected;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.isConnected || this.state.isCancelled) {\n        return false;\n      }\n\n      var containerStyle = [this.styles.topContainer, this.props.useAbsolutePosition ? this.styles.absolutePosition : null];\n      return _jsx(View, {\n        useSafeArea: true,\n        style: containerStyle,\n        children: _jsx(View, {\n          style: this.styles.container,\n          children: _jsxs(View, {\n            style: {\n              flex: 1,\n              flexDirection: 'row'\n            },\n            children: [_jsx(Text, {\n              style: this.styles.text,\n              children: this.props.label\n            }), this.props.allowDismiss && _jsx(TouchableOpacity, {\n              style: this.styles.xContainer,\n              onPress: function onPress() {\n                return _this3.setState({\n                  isCancelled: true\n                });\n              },\n              children: _jsx(Text, {\n                style: this.styles.x,\n                children: \"\\u2715\"\n              })\n            })]\n          })\n        })\n      });\n    }\n  }], [{\n    key: \"registerGlobalOnConnectionLost\",\n    value: function registerGlobalOnConnectionLost(callback) {\n      ConnectionStatusBar.onConnectionLost = callback;\n    }\n  }, {\n    key: \"unregisterGlobalOnConnectionLost\",\n    value: function unregisterGlobalOnConnectionLost() {\n      delete ConnectionStatusBar.onConnectionLost;\n    }\n  }]);\n\n  return ConnectionStatusBar;\n}(PureComponent);\n\nConnectionStatusBar.displayName = 'ConnectionStatusBar';\nConnectionStatusBar.defaultProps = DEFAULT_PROPS;\n\nfunction createStyles() {\n  var _Typography$text;\n\n  var typography = Constants.isSmallScreen ? Typography.text90 : Typography.text80;\n  return StyleSheet.create({\n    topContainer: {\n      backgroundColor: Colors.grey30\n    },\n    absolutePosition: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n      bottom: undefined\n    }),\n    container: {\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n    text: _objectSpread(_objectSpread({\n      flex: 1\n    }, typography), {}, {\n      textAlign: 'center',\n      color: Colors.grey60,\n      marginTop: 8,\n      marginBottom: 8,\n      alignSelf: 'center'\n    }),\n    xContainer: {\n      paddingLeft: 10,\n      paddingRight: 10,\n      alignSelf: 'center'\n    },\n    x: {\n      fontSize: (_Typography$text = Typography.text80) == null ? void 0 : _Typography$text.fontSize,\n      color: Colors.black\n    }\n  });\n}\n\nexport { ConnectionStatusBar };\nexport default asBaseComponent(ConnectionStatusBar);","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/connectionStatusBar/index.js"],"names":["React","PureComponent","_","NetInfoPackage","NetInfo","Colors","Typography","TouchableOpacity","View","Constants","asBaseComponent","ConnectionStatusBarProps","DEFAULT_PROPS","ConnectionStatusBar","props","generateStyles","onConnectionChange","bind","state","isConnected","isCancelled","getInitialConnectionState","console","error","styles","createStyles","unsubscribe","addEventListener","isStateConnected","setState","setTimeout","isFunction","onConnectionLost","fetch","lowerCaseState","lowerCase","type","containerStyle","topContainer","useAbsolutePosition","absolutePosition","container","flex","flexDirection","text","label","allowDismiss","xContainer","x","callback","displayName","defaultProps","typography","isSmallScreen","text90","text80","StyleSheet","create","backgroundColor","grey30","absoluteFillObject","bottom","undefined","justifyContent","textAlign","color","grey60","marginTop","marginBottom","alignSelf","paddingLeft","paddingRight","fontSize","black"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport { StyleSheet, Text } from 'react-native';\nimport { NetInfoPackage as NetInfo } from \"../../optionalDependencies\";\nimport { Colors, Typography } from \"../../style\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport View from \"../view\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport { ConnectionStatusBarProps, DEFAULT_PROPS } from \"./Types\";\nexport { ConnectionStatusBarProps };\n/**\n * @description: Top bar to show a \"no internet\" connection status. Note: Run on real device for best results\n * @image: https://user-images.githubusercontent.com/33805983/34683190-f3b1904c-f4a9-11e7-9d46-9a340bd35448.png, https://user-images.githubusercontent.com/33805983/34484206-edc6c6e4-efcb-11e7-88b2-cd394c19dd5e.png\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ConnectionStatusBarScreen.tsx\n * @notes: The component requires installing the '@react-native-community/netinfo' native library\n */\n\nclass ConnectionStatusBar extends PureComponent {\n  static displayName = 'ConnectionStatusBar';\n  static defaultProps = DEFAULT_PROPS;\n\n  static registerGlobalOnConnectionLost(callback) {\n    ConnectionStatusBar.onConnectionLost = callback;\n  }\n\n  static unregisterGlobalOnConnectionLost() {\n    delete ConnectionStatusBar.onConnectionLost;\n  }\n\n  constructor(props) {\n    super(props);\n    this.generateStyles();\n    this.onConnectionChange = this.onConnectionChange.bind(this);\n    this.state = {\n      isConnected: true,\n      isCancelled: false\n    };\n\n    if (NetInfo) {\n      this.getInitialConnectionState();\n    } else {\n      console.error(`RNUILib ConnectionStatusBar component requires installing \"@react-native-community/netinfo\" dependency`);\n    }\n  }\n\n  generateStyles() {\n    this.styles = createStyles();\n  }\n\n  componentDidMount() {\n    this.unsubscribe = NetInfo?.addEventListener(this.onConnectionChange);\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n  }\n\n  onConnectionChange(state) {\n    const isConnected = this.isStateConnected(state);\n\n    if (isConnected !== this.state.isConnected) {\n      this.setState({\n        isConnected,\n        isCancelled: false\n      });\n\n      if (this.props.onConnectionChange) {\n        this.props.onConnectionChange(isConnected, false);\n      }\n\n      if (!isConnected) {\n        setTimeout(() => {\n          this.getInitialConnectionState();\n        }, 3000);\n      }\n\n      if (!isConnected && _.isFunction(ConnectionStatusBar.onConnectionLost)) {\n        ConnectionStatusBar.onConnectionLost();\n      }\n    }\n  }\n\n  async getInitialConnectionState() {\n    const isConnected = (await NetInfo?.fetch()).isConnected;\n    this.setState({\n      isConnected\n    });\n\n    if (this.props.onConnectionChange) {\n      this.props.onConnectionChange(isConnected, true);\n    }\n  }\n\n  isStateConnected(state) {\n    const lowerCaseState = _.lowerCase(state.type);\n\n    const isConnected = lowerCaseState !== 'none';\n    return isConnected;\n  }\n\n  render() {\n    if (this.state.isConnected || this.state.isCancelled) {\n      return false;\n    }\n\n    const containerStyle = [this.styles.topContainer, this.props.useAbsolutePosition ? this.styles.absolutePosition : null];\n    return <View useSafeArea style={containerStyle}>\n        <View style={this.styles.container}>\n          <View style={{\n          flex: 1,\n          flexDirection: 'row'\n        }}>\n            <Text style={this.styles.text}>{this.props.label}</Text>\n            {this.props.allowDismiss && <TouchableOpacity style={this.styles.xContainer} onPress={() => this.setState({\n            isCancelled: true\n          })}>\n                <Text style={this.styles.x}>✕</Text>\n              </TouchableOpacity>}\n          </View>\n        </View>\n      </View>;\n  }\n\n}\n\nfunction createStyles() {\n  const typography = Constants.isSmallScreen ? Typography.text90 : Typography.text80;\n  return StyleSheet.create({\n    topContainer: {\n      backgroundColor: Colors.grey30\n    },\n    absolutePosition: { ...StyleSheet.absoluteFillObject,\n      bottom: undefined\n    },\n    container: {\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n    text: {\n      flex: 1,\n      ...typography,\n      textAlign: 'center',\n      color: Colors.grey60,\n      marginTop: 8,\n      marginBottom: 8,\n      alignSelf: 'center'\n    },\n    xContainer: {\n      paddingLeft: 10,\n      paddingRight: 10,\n      alignSelf: 'center'\n    },\n    x: {\n      fontSize: Typography.text80?.fontSize,\n      color: Colors.black\n    }\n  });\n}\n\nexport { ConnectionStatusBar }; // For tests\n\nexport default asBaseComponent(ConnectionStatusBar);"]},"metadata":{},"sourceType":"module"}