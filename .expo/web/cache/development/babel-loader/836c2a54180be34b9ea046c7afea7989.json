{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors } from \"../../style\";\nimport Text from \"../../components/text\";\nimport { ValidationMessagePosition } from \"./types\";\nimport { getColorByState } from \"./Presenter\";\nimport FieldContext from \"./FieldContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Label = function Label(_ref) {\n  var label = _ref.label,\n      _ref$labelColor = _ref.labelColor,\n      labelColor = _ref$labelColor === void 0 ? Colors.grey10 : _ref$labelColor,\n      labelStyle = _ref.labelStyle,\n      labelProps = _ref.labelProps,\n      validationMessagePosition = _ref.validationMessagePosition,\n      floatingPlaceholder = _ref.floatingPlaceholder,\n      testID = _ref.testID;\n  var context = useContext(FieldContext);\n  var forceHidingLabel = !context.isValid && validationMessagePosition === ValidationMessagePosition.TOP;\n\n  if ((label || floatingPlaceholder) && !forceHidingLabel) {\n    return _jsx(Text, _objectSpread(_objectSpread({\n      testID: testID,\n      color: getColorByState(labelColor, context),\n      style: [styles.label, labelStyle, floatingPlaceholder && styles.dummyPlaceholder]\n    }, labelProps), {}, {\n      children: label\n    }));\n  }\n\n  return null;\n};\n\nLabel.propTypes = {\n  label: _pt.string,\n  floatingPlaceholder: _pt.bool,\n  testID: _pt.string\n};\nvar styles = StyleSheet.create({\n  label: {\n    minHeight: 20\n  },\n  dummyPlaceholder: {\n    opacity: 0\n  }\n});\nLabel.displayName = 'Incubator.TextField';\nexport default Label;","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TextField/Label.js"],"names":["_pt","React","useContext","Colors","Text","ValidationMessagePosition","getColorByState","FieldContext","Label","label","labelColor","grey10","labelStyle","labelProps","validationMessagePosition","floatingPlaceholder","testID","context","forceHidingLabel","isValid","TOP","styles","dummyPlaceholder","propTypes","string","bool","StyleSheet","create","minHeight","opacity","displayName"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,SAASC,MAAT;AACA,OAAOC,IAAP;AACA,SAASC,yBAAT;AACA,SAASC,eAAT;AACA,OAAOC,YAAP;;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAQR;AAAA,MAPJC,KAOI,QAPJA,KAOI;AAAA,6BANJC,UAMI;AAAA,MANJA,UAMI,gCANSP,MAAM,CAACQ,MAMhB;AAAA,MALJC,UAKI,QALJA,UAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,yBAGI,QAHJA,yBAGI;AAAA,MAFJC,mBAEI,QAFJA,mBAEI;AAAA,MADJC,MACI,QADJA,MACI;AACJ,MAAMC,OAAO,GAAGf,UAAU,CAACK,YAAD,CAA1B;AACA,MAAMW,gBAAgB,GAAG,CAACD,OAAO,CAACE,OAAT,IAAoBL,yBAAyB,KAAKT,yBAAyB,CAACe,GAArG;;AAEA,MAAI,CAACX,KAAK,IAAIM,mBAAV,KAAkC,CAACG,gBAAvC,EAAyD;AACvD,WAAO,KAAC,IAAD;AAAM,MAAA,MAAM,EAAEF,MAAd;AAAsB,MAAA,KAAK,EAAEV,eAAe,CAACI,UAAD,EAAaO,OAAb,CAA5C;AAAmE,MAAA,KAAK,EAAE,CAACI,MAAM,CAACZ,KAAR,EAAeG,UAAf,EAA2BG,mBAAmB,IAAIM,MAAM,CAACC,gBAAzD;AAA1E,OAA0JT,UAA1J;AAAA,gBACFJ;AADE,OAAP;AAGD;;AAED,SAAO,IAAP;AACD,CAnBD;;AAqBAD,KAAK,CAACe,SAAN,GAAkB;AAIhBd,EAAAA,KAAK,EAAET,GAAG,CAACwB,MAJK;AAKhBT,EAAAA,mBAAmB,EAAEf,GAAG,CAACyB,IALT;AAMhBT,EAAAA,MAAM,EAAEhB,GAAG,CAACwB;AANI,CAAlB;AAQA,IAAMH,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BlB,EAAAA,KAAK,EAAE;AACLmB,IAAAA,SAAS,EAAE;AADN,GADwB;AAI/BN,EAAAA,gBAAgB,EAAE;AAChBO,IAAAA,OAAO,EAAE;AADO;AAJa,CAAlB,CAAf;AAQArB,KAAK,CAACsB,WAAN,GAAoB,qBAApB;AACA,eAAetB,KAAf","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useContext } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Colors } from \"../../style\";\nimport Text from \"../../components/text\";\nimport { ValidationMessagePosition } from \"./types\";\nimport { getColorByState } from \"./Presenter\";\nimport FieldContext from \"./FieldContext\";\n\nconst Label = ({\n  label,\n  labelColor = Colors.grey10,\n  labelStyle,\n  labelProps,\n  validationMessagePosition,\n  floatingPlaceholder,\n  testID\n}) => {\n  const context = useContext(FieldContext);\n  const forceHidingLabel = !context.isValid && validationMessagePosition === ValidationMessagePosition.TOP;\n\n  if ((label || floatingPlaceholder) && !forceHidingLabel) {\n    return <Text testID={testID} color={getColorByState(labelColor, context)} style={[styles.label, labelStyle, floatingPlaceholder && styles.dummyPlaceholder]} {...labelProps}>\n        {label}\n      </Text>;\n  }\n\n  return null;\n};\n\nLabel.propTypes = {\n  /**\n     * Field label\n     */\n  label: _pt.string,\n  floatingPlaceholder: _pt.bool,\n  testID: _pt.string\n};\nconst styles = StyleSheet.create({\n  label: {\n    minHeight: 20\n  },\n  dummyPlaceholder: {\n    opacity: 0\n  }\n});\nLabel.displayName = 'Incubator.TextField';\nexport default Label;"]},"metadata":{},"sourceType":"module"}