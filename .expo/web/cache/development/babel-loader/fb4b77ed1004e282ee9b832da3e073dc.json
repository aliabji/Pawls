{"ast":null,"code":"import { isEmpty, toLower } from 'lodash';\n\nfunction getPartsByHighlight() {\n  var targetString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var highlightString = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (typeof highlightString === 'string') {\n    if (isEmpty(highlightString.trim())) {\n      return [{\n        string: targetString,\n        shouldHighlight: false\n      }];\n    }\n\n    return getTextPartsByHighlight(targetString, highlightString);\n  } else {\n    return getArrayPartsByHighlight(targetString, highlightString);\n  }\n}\n\nfunction getTextPartsByHighlight() {\n  var targetString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var highlightString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (highlightString === '') {\n    return [{\n      string: targetString,\n      shouldHighlight: false\n    }];\n  }\n\n  var textParts = [];\n  var highlightIndex;\n\n  do {\n    highlightIndex = targetString.toLowerCase().indexOf(highlightString.toLowerCase());\n\n    if (highlightIndex !== -1) {\n      if (highlightIndex > 0) {\n        textParts.push({\n          string: targetString.substring(0, highlightIndex),\n          shouldHighlight: false\n        });\n      }\n\n      textParts.push({\n        string: targetString.substr(highlightIndex, highlightString.length),\n        shouldHighlight: true\n      });\n      targetString = targetString.substr(highlightIndex + highlightString.length);\n    } else {\n      textParts.push({\n        string: targetString,\n        shouldHighlight: false\n      });\n    }\n  } while (highlightIndex !== -1 && targetString.length > 0);\n\n  return textParts;\n}\n\nfunction getArrayPartsByHighlight() {\n  var targetString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var highlightString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [''];\n  var target = toLower(targetString);\n  var indices = [];\n  var index = 0;\n  var lastWordLength = 0;\n\n  for (var j = 0; j < highlightString.length; j++) {\n    var word = toLower(highlightString[j]);\n\n    if (word.length === 0) {\n      break;\n    }\n\n    var targetSuffix = target.substring(index + lastWordLength);\n    var i = targetSuffix.indexOf(word);\n\n    if (i >= 0) {\n      var newIndex = index + lastWordLength + i;\n      indices.push({\n        start: index + lastWordLength + i,\n        end: index + lastWordLength + i + word.length\n      });\n      index = newIndex;\n      lastWordLength = word.length;\n    } else {\n      break;\n    }\n  }\n\n  var textParts = [];\n\n  for (var k = 0; k < indices.length; k++) {\n    if (k === 0 && indices[k].start !== 0) {\n      textParts.push({\n        string: targetString.substring(0, indices[k].start),\n        shouldHighlight: false\n      });\n    }\n\n    textParts.push({\n      string: targetString.substring(indices[k].start, indices[k].end),\n      shouldHighlight: true\n    });\n\n    if (indices[k].end < targetString.length) {\n      if (k === indices.length - 1) {\n        textParts.push({\n          string: targetString.substring(indices[k].end),\n          shouldHighlight: false\n        });\n      } else {\n        textParts.push({\n          string: targetString.substring(indices[k].end, indices[k + 1].start),\n          shouldHighlight: false\n        });\n      }\n    }\n  }\n\n  if (textParts.length === 0) {\n    textParts.push({\n      string: targetString,\n      shouldHighlight: false\n    });\n  }\n\n  return textParts;\n}\n\nexport { getPartsByHighlight, getTextPartsByHighlight, getArrayPartsByHighlight };","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/utils/textUtils.js"],"names":["isEmpty","toLower","getPartsByHighlight","targetString","highlightString","trim","string","shouldHighlight","getTextPartsByHighlight","getArrayPartsByHighlight","textParts","highlightIndex","toLowerCase","indexOf","push","substring","substr","length","target","indices","index","lastWordLength","j","word","targetSuffix","i","newIndex","start","end","k"],"mappings":"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","sourcesContent":["import { isEmpty, toLower } from 'lodash';\n\nfunction getPartsByHighlight(targetString = '', highlightString) {\n  if (typeof highlightString === 'string') {\n    if (isEmpty(highlightString.trim())) {\n      return [{\n        string: targetString,\n        shouldHighlight: false\n      }];\n    }\n\n    return getTextPartsByHighlight(targetString, highlightString);\n  } else {\n    return getArrayPartsByHighlight(targetString, highlightString);\n  }\n}\n\nfunction getTextPartsByHighlight(targetString = '', highlightString = '') {\n  if (highlightString === '') {\n    return [{\n      string: targetString,\n      shouldHighlight: false\n    }];\n  }\n\n  const textParts = [];\n  let highlightIndex;\n\n  do {\n    highlightIndex = targetString.toLowerCase().indexOf(highlightString.toLowerCase());\n\n    if (highlightIndex !== -1) {\n      if (highlightIndex > 0) {\n        textParts.push({\n          string: targetString.substring(0, highlightIndex),\n          shouldHighlight: false\n        });\n      }\n\n      textParts.push({\n        string: targetString.substr(highlightIndex, highlightString.length),\n        shouldHighlight: true\n      });\n      targetString = targetString.substr(highlightIndex + highlightString.length);\n    } else {\n      textParts.push({\n        string: targetString,\n        shouldHighlight: false\n      });\n    }\n  } while (highlightIndex !== -1 && targetString.length > 0);\n\n  return textParts;\n}\n\nfunction getArrayPartsByHighlight(targetString = '', highlightString = ['']) {\n  const target = toLower(targetString);\n  const indices = [];\n  let index = 0;\n  let lastWordLength = 0;\n\n  for (let j = 0; j < highlightString.length; j++) {\n    const word = toLower(highlightString[j]);\n\n    if (word.length === 0) {\n      break;\n    }\n\n    const targetSuffix = target.substring(index + lastWordLength);\n    const i = targetSuffix.indexOf(word);\n\n    if (i >= 0) {\n      const newIndex = index + lastWordLength + i;\n      indices.push({\n        start: index + lastWordLength + i,\n        end: index + lastWordLength + i + word.length\n      });\n      index = newIndex;\n      lastWordLength = word.length;\n    } else {\n      break;\n    }\n  }\n\n  const textParts = [];\n\n  for (let k = 0; k < indices.length; k++) {\n    if (k === 0 && indices[k].start !== 0) {\n      textParts.push({\n        string: targetString.substring(0, indices[k].start),\n        shouldHighlight: false\n      });\n    }\n\n    textParts.push({\n      string: targetString.substring(indices[k].start, indices[k].end),\n      shouldHighlight: true\n    });\n\n    if (indices[k].end < targetString.length) {\n      if (k === indices.length - 1) {\n        textParts.push({\n          string: targetString.substring(indices[k].end),\n          shouldHighlight: false\n        });\n      } else {\n        textParts.push({\n          string: targetString.substring(indices[k].end, indices[k + 1].start),\n          shouldHighlight: false\n        });\n      }\n    }\n  }\n\n  if (textParts.length === 0) {\n    textParts.push({\n      string: targetString,\n      shouldHighlight: false\n    });\n  }\n\n  return textParts;\n}\n\nexport { getPartsByHighlight, getTextPartsByHighlight, getArrayPartsByHighlight };"]},"metadata":{},"sourceType":"module"}