{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"text\", \"renderContent\", \"showKnob\", \"showDivider\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { isEmpty } from 'lodash';\nimport React, { useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport { Spacings, Colors, BorderRadiuses, Dividers } from \"../../style\";\nimport View from \"../../components/view\";\nimport HeaderContent from \"./HeaderContent\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar DialogHeader = function DialogHeader() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _props$text = props.text,\n      text = _props$text === void 0 ? {} : _props$text,\n      renderContent = props.renderContent,\n      _props$showKnob = props.showKnob,\n      showKnob = _props$showKnob === void 0 ? true : _props$showKnob,\n      _props$showDivider = props.showDivider,\n      showDivider = _props$showDivider === void 0 ? true : _props$showDivider,\n      others = _objectWithoutProperties(props, _excluded);\n\n  var knob = useMemo(function () {\n    if (showKnob) {\n      return _jsx(View, {\n        style: styles.knob\n      });\n    }\n  }, [showKnob]);\n  var headerContent = useMemo(function () {\n    if (renderContent) {\n      return renderContent(props);\n    }\n\n    return _jsx(HeaderContent, {\n      text: text\n    });\n  }, [renderContent, text]);\n  var divider = useMemo(function () {\n    if (showDivider) {\n      return _jsx(View, {\n        style: Dividers.d10\n      });\n    }\n  }, [showDivider]);\n\n  if (!isEmpty(props)) {\n    return _jsxs(View, _objectSpread(_objectSpread({}, others), {}, {\n      children: [knob, headerContent, divider]\n    }));\n  }\n\n  return null;\n};\n\nexport default asBaseComponent(DialogHeader);\nvar styles = StyleSheet.create({\n  knob: {\n    alignSelf: 'center',\n    width: 44,\n    height: Spacings.s1,\n    marginTop: Spacings.s2,\n    marginBottom: Spacings.s2,\n    backgroundColor: Colors.grey60,\n    borderRadius: BorderRadiuses.br10\n  }\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/Dialog/DialogHeader.js"],"names":["isEmpty","React","useMemo","asBaseComponent","Spacings","Colors","BorderRadiuses","Dividers","View","HeaderContent","DialogHeader","props","text","renderContent","showKnob","showDivider","others","knob","styles","headerContent","divider","d10","StyleSheet","create","alignSelf","width","height","s1","marginTop","s2","marginBottom","backgroundColor","grey60","borderRadius","br10"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;;AAEA,SAASC,eAAT;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,cAA3B,EAA2CC,QAA3C;AACA,OAAOC,IAAP;AACA,OAAOC,aAAP;;;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;;AACnC,oBAMIA,KANJ,CACEC,IADF;AAAA,MACEA,IADF,4BACS,EADT;AAAA,MAEEC,aAFF,GAMIF,KANJ,CAEEE,aAFF;AAAA,wBAMIF,KANJ,CAGEG,QAHF;AAAA,MAGEA,QAHF,gCAGa,IAHb;AAAA,2BAMIH,KANJ,CAIEI,WAJF;AAAA,MAIEA,WAJF,mCAIgB,IAJhB;AAAA,MAKKC,MALL,4BAMIL,KANJ;;AAOA,MAAMM,IAAI,GAAGf,OAAO,CAAC,YAAM;AACzB,QAAIY,QAAJ,EAAc;AACZ,aAAO,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEI,MAAM,CAACD;AAApB,QAAP;AACD;AACF,GAJmB,EAIjB,CAACH,QAAD,CAJiB,CAApB;AAKA,MAAMK,aAAa,GAAGjB,OAAO,CAAC,YAAM;AAClC,QAAIW,aAAJ,EAAmB;AACjB,aAAOA,aAAa,CAACF,KAAD,CAApB;AACD;;AAED,WAAO,KAAC,aAAD;AAAe,MAAA,IAAI,EAAEC;AAArB,MAAP;AACD,GAN4B,EAM1B,CAACC,aAAD,EAAgBD,IAAhB,CAN0B,CAA7B;AAOA,MAAMQ,OAAO,GAAGlB,OAAO,CAAC,YAAM;AAC5B,QAAIa,WAAJ,EAAiB;AACf,aAAO,KAAC,IAAD;AAAM,QAAA,KAAK,EAAER,QAAQ,CAACc;AAAtB,QAAP;AACD;AACF,GAJsB,EAIpB,CAACN,WAAD,CAJoB,CAAvB;;AAMA,MAAI,CAACf,OAAO,CAACW,KAAD,CAAZ,EAAqB;AACnB,WAAO,MAAC,IAAD,kCAAUK,MAAV;AAAA,iBACFC,IADE,EAEFE,aAFE,EAGFC,OAHE;AAAA,OAAP;AAKD;;AAED,SAAO,IAAP;AACD,CAnCD;;AAqCA,eAAejB,eAAe,CAACO,YAAD,CAA9B;AACA,IAAMQ,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,IAAI,EAAE;AACJO,IAAAA,SAAS,EAAE,QADP;AAEJC,IAAAA,KAAK,EAAE,EAFH;AAGJC,IAAAA,MAAM,EAAEtB,QAAQ,CAACuB,EAHb;AAIJC,IAAAA,SAAS,EAAExB,QAAQ,CAACyB,EAJhB;AAKJC,IAAAA,YAAY,EAAE1B,QAAQ,CAACyB,EALnB;AAMJE,IAAAA,eAAe,EAAE1B,MAAM,CAAC2B,MANpB;AAOJC,IAAAA,YAAY,EAAE3B,cAAc,CAAC4B;AAPzB;AADyB,CAAlB,CAAf","sourcesContent":["import { isEmpty } from 'lodash';\nimport React, { useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { asBaseComponent } from \"../../commons/new\";\nimport { Spacings, Colors, BorderRadiuses, Dividers } from \"../../style\";\nimport View from \"../../components/view\";\nimport HeaderContent from \"./HeaderContent\";\n\nconst DialogHeader = (props = {}) => {\n  const {\n    text = {},\n    renderContent,\n    showKnob = true,\n    showDivider = true,\n    ...others\n  } = props;\n  const knob = useMemo(() => {\n    if (showKnob) {\n      return <View style={styles.knob} />;\n    }\n  }, [showKnob]);\n  const headerContent = useMemo(() => {\n    if (renderContent) {\n      return renderContent(props);\n    }\n\n    return <HeaderContent text={text} />; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [renderContent, text]);\n  const divider = useMemo(() => {\n    if (showDivider) {\n      return <View style={Dividers.d10} />;\n    }\n  }, [showDivider]);\n\n  if (!isEmpty(props)) {\n    return <View {...others}>\n        {knob}\n        {headerContent}\n        {divider}\n      </View>;\n  }\n\n  return null;\n};\n\nexport default asBaseComponent(DialogHeader);\nconst styles = StyleSheet.create({\n  knob: {\n    alignSelf: 'center',\n    width: 44,\n    height: Spacings.s1,\n    marginTop: Spacings.s2,\n    marginBottom: Spacings.s2,\n    backgroundColor: Colors.grey60,\n    borderRadius: BorderRadiuses.br10\n  }\n});"]},"metadata":{},"sourceType":"module"}