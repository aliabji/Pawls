{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useState, useEffect } from 'react';\nimport { Text, View } from \"../components/Themed\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport * as Location from 'expo-location';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function AddParks(_ref) {\n  var navigation = _ref.navigation,\n      params = _ref.route.params;\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nearbyParks = _useState6[0],\n      setNearbyParks = _useState6[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              setErrorMsg('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              setLocation(location);\n              fetch(listParksApiUrl(location.coords.latitude, location.coords.longitude)).then(function (res) {\n                return res.json();\n              }).then(function (data) {\n                return setNearbyParks(data);\n              }).catch(function (err) {\n                return console.log('error', err);\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var postPark = function postPark(park) {\n    return _regeneratorRuntime.async(function postPark$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            try {\n              fetch('http://192.168.68.127:3001/parks/create', {\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                method: 'POST',\n                body: JSON.stringify({\n                  name: park.name,\n                  place_id: park.place_id,\n                  vicinity: park.vicinity\n                })\n              }).then(function (data) {\n                return data.json();\n              }).then(function (res) {\n                if (res.park) {\n                  console.log(res.park);\n                  console.log(res.park.name + \" was successfully added to your profile \");\n                } else {\n                  console.log(\"dog submission failed \", res.errors);\n                }\n              }).catch(function (err) {\n                console.log(err);\n                console.log('error adding park: ', err);\n              });\n            } catch (err) {\n              console.log(\"Unrecoverable error occured \", err);\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Select a park to take your dog too\"\n    }), _jsx(ScrollView, {\n      children: nearbyParks && nearbyParks.results && nearbyParks.results.map(function (park, key) {\n        return _jsxs(View, {\n          children: [_jsxs(Text, {\n            children: [park.name, \" \", park.rating, \" \", park.vicinity]\n          }), _jsx(Button, {\n            title: \"Add Park\",\n            onPress: function onPress() {\n              return postPark(park);\n            }\n          })]\n        }, key);\n      })\n    }), _jsx(GooglePlacesAutocomplete, {\n      placeholder: \"parks\",\n      GooglePlacesSearchQuery: {\n        rankby: 'distance',\n        type: 'park'\n      },\n      query: {\n        key: \"AIzaSyCu79by4xES3ho37NxFqyQacX_Ijxm_lVE\"\n      },\n      onPress: function onPress(data, details) {\n        return console.log(data, details);\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  subHeading: {\n    fontSize: 15\n  }\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/screens/AddParks.tsx"],"names":["useState","useEffect","Text","View","GooglePlacesAutocomplete","Location","AddParks","navigation","params","route","undefined","location","setLocation","errorMsg","setErrorMsg","nearbyParks","setNearbyParks","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","fetch","listParksApiUrl","coords","latitude","longitude","then","res","json","data","catch","err","console","log","postPark","park","headers","method","body","JSON","stringify","name","place_id","vicinity","errors","styles","container","title","results","map","key","rating","rankby","type","details","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","subHeading"],"mappings":"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","sourcesContent":["import { StyleSheet, Button, ScrollView } from 'react-native';\r\nimport {useState, useEffect} from 'react';\r\nimport { Text, View } from '../components/Themed';\r\nimport {LogOutButton} from '../components/LogOutButton';\r\nimport { RootTabScreenProps } from '../types';\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\r\nimport * as Location from 'expo-location';\r\nimport {ParkDisplay} from '../components/ParkDisplay';\r\n\r\nexport default function AddParks({ navigation, route: {params} }: RootTabScreenProps<'AddParks'>) {\r\n    const [location, setLocation] = useState<any>(undefined)\r\n    const [errorMsg, setErrorMsg] = useState<string>();\r\n    const [nearbyParks, setNearbyParks] = useState<any>(undefined);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n          let { status } = await Location.requestForegroundPermissionsAsync();\r\n          if (status !== 'granted') {\r\n            setErrorMsg('Permission to access location was denied');\r\n            return;\r\n          }\r\n    \r\n          let location = await Location.getCurrentPositionAsync({});\r\n          setLocation(location);\r\n\r\n          fetch(listParksApiUrl(location.coords.latitude, location.coords.longitude)).then(res => res.json()).then(data => setNearbyParks(data)).catch(err => console.log('error', err))\r\n        })();\r\n      }, []);\r\n\r\n    const postPark = async (park: any) => {\r\n        try {\r\n          fetch('http://192.168.68.127:3001/parks/create', {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            method: 'POST',\r\n            body: JSON.stringify({name: park.name, place_id: park.place_id, vicinity: park.vicinity})\r\n            }).then((data) => data.json()).then((res) =>{\r\n              if (res.park) {\r\n                  console.log(res.park)\r\n                console.log(`${res.park.name} was successfully added to your profile `)\r\n              } else {\r\n                console.log(\"dog submission failed \", res.errors)\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err)\r\n              console.log('error adding park: ', err)\r\n            })\r\n        } catch (err) {\r\n          console.log(\"Unrecoverable error occured \", err)\r\n        }\r\n    }\r\n\r\n    return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Select a park to take your dog too</Text>\r\n      <ScrollView>\r\n        {nearbyParks && nearbyParks.results && nearbyParks.results.map((park: any, key: any) => {\r\n            return (\r\n                <View key={key}>\r\n                    <Text>{park.name} {park.rating} {park.vicinity}</Text>\r\n                    <Button title=\"Add Park\" onPress={() => postPark(park)} />\r\n                </View>\r\n            )\r\n        })\r\n        }\r\n      </ScrollView>\r\n      <GooglePlacesAutocomplete\r\n        placeholder=\"parks\"\r\n        GooglePlacesSearchQuery={\r\n            { rankby: 'distance', type: 'park' }\r\n        }\r\n        query={\r\n            {\r\n                key: process.env.GOOGLE_PLACES_API_KEY,\r\n            }\r\n        }\r\n        onPress={(data, details) => console.log(data, details)}\r\n        \r\n      />\r\n\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n  },\r\n  subHeading: {\r\n    fontSize: 15,\r\n    // fontWeight: 'bold',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}