{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"tintColor\", \"style\", \"supportRTL\", \"source\", \"assetGroup\", \"assetName\", \"modifiers\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _pt from \"prop-types\";\nimport isUndefined from 'lodash/isUndefined';\nimport React, { useMemo } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { asBaseComponent, Constants } from \"../../commons/new\";\nimport { getAsset, isSvg } from \"../../utils/imageUtils\";\nimport SvgImage from \"../svgImage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Icon = function Icon(props) {\n  var size = props.size,\n      tintColor = props.tintColor,\n      style = props.style,\n      supportRTL = props.supportRTL,\n      source = props.source,\n      assetGroup = props.assetGroup,\n      assetName = props.assetName,\n      modifiers = props.modifiers,\n      others = _objectWithoutProperties(props, _excluded);\n\n  var margins = modifiers.margins;\n  var iconSize = size ? {\n    width: size,\n    height: size\n  } : undefined;\n  var shouldFlipRTL = supportRTL && Constants.isRTL;\n  var iconSource = useMemo(function () {\n    if (!isUndefined(assetName)) {\n      return getAsset(assetName, assetGroup);\n    }\n\n    return source;\n  }, [source, assetGroup, assetName]);\n  return isSvg(source) ? _jsx(SvgImage, _objectSpread({\n    data: source\n  }, props)) : _jsx(Image, _objectSpread(_objectSpread({}, others), {}, {\n    source: iconSource,\n    style: [style, margins, iconSize, shouldFlipRTL && styles.rtlFlipped, !!tintColor && {\n      tintColor: tintColor\n    }]\n  }));\n};\n\nIcon.propTypes = {\n  assetName: _pt.string,\n  assetGroup: _pt.string,\n  tintColor: _pt.string,\n  size: _pt.number,\n  supportRTL: _pt.bool\n};\nIcon.displayName = 'Icon';\nIcon.defaultProps = {\n  assetGroup: 'icons'\n};\nexport default asBaseComponent(Icon);\nvar styles = StyleSheet.create({\n  rtlFlipped: {\n    transform: [{\n      scaleX: -1\n    }]\n  }\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/icon/index.js"],"names":["_pt","isUndefined","React","useMemo","asBaseComponent","Constants","getAsset","isSvg","SvgImage","Icon","props","size","tintColor","style","supportRTL","source","assetGroup","assetName","modifiers","others","margins","iconSize","width","height","undefined","shouldFlipRTL","isRTL","iconSource","styles","rtlFlipped","propTypes","string","number","bool","displayName","defaultProps","StyleSheet","create","transform","scaleX"],"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;;;AAEA,SAASC,eAAT,EAA0BC,SAA1B;AACA,SAASC,QAAT,EAAmBC,KAAnB;AACA,OAAOC,QAAP;;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AACpB,MACEC,IADF,GAUID,KAVJ,CACEC,IADF;AAAA,MAEEC,SAFF,GAUIF,KAVJ,CAEEE,SAFF;AAAA,MAGEC,KAHF,GAUIH,KAVJ,CAGEG,KAHF;AAAA,MAIEC,UAJF,GAUIJ,KAVJ,CAIEI,UAJF;AAAA,MAKEC,MALF,GAUIL,KAVJ,CAKEK,MALF;AAAA,MAMEC,UANF,GAUIN,KAVJ,CAMEM,UANF;AAAA,MAOEC,SAPF,GAUIP,KAVJ,CAOEO,SAPF;AAAA,MAQEC,SARF,GAUIR,KAVJ,CAQEQ,SARF;AAAA,MASKC,MATL,4BAUIT,KAVJ;;AAWA,MACEU,OADF,GAEIF,SAFJ,CACEE,OADF;AAGA,MAAMC,QAAQ,GAAGV,IAAI,GAAG;AACtBW,IAAAA,KAAK,EAAEX,IADe;AAEtBY,IAAAA,MAAM,EAAEZ;AAFc,GAAH,GAGjBa,SAHJ;AAIA,MAAMC,aAAa,GAAGX,UAAU,IAAIT,SAAS,CAACqB,KAA9C;AACA,MAAMC,UAAU,GAAGxB,OAAO,CAAC,YAAM;AAC/B,QAAI,CAACF,WAAW,CAACgB,SAAD,CAAhB,EAA6B;AAC3B,aAAOX,QAAQ,CAACW,SAAD,EAAYD,UAAZ,CAAf;AACD;;AAED,WAAOD,MAAP;AACD,GANyB,EAMvB,CAACA,MAAD,EAASC,UAAT,EAAqBC,SAArB,CANuB,CAA1B;AAOA,SAAOV,KAAK,CAACQ,MAAD,CAAL,GAAgB,KAAC,QAAD;AAAU,IAAA,IAAI,EAAEA;AAAhB,KAA4BL,KAA5B,EAAhB,GAAwD,KAAC,KAAD,kCAAWS,MAAX;AAAmB,IAAA,MAAM,EAAEQ,UAA3B;AAAuC,IAAA,KAAK,EAAE,CAACd,KAAD,EAAQO,OAAR,EAAiBC,QAAjB,EAA2BI,aAAa,IAAIG,MAAM,CAACC,UAAnD,EAA+D,CAAC,CAACjB,SAAF,IAAe;AACzLA,MAAAA,SAAS,EAATA;AADyL,KAA9E;AAA9C,KAA/D;AAGD,CA9BD;;AAgCAH,IAAI,CAACqB,SAAL,GAAiB;AAIfb,EAAAA,SAAS,EAAEjB,GAAG,CAAC+B,MAJA;AASff,EAAAA,UAAU,EAAEhB,GAAG,CAAC+B,MATD;AAcfnB,EAAAA,SAAS,EAAEZ,GAAG,CAAC+B,MAdA;AAmBfpB,EAAAA,IAAI,EAAEX,GAAG,CAACgC,MAnBK;AAwBflB,EAAAA,UAAU,EAAEd,GAAG,CAACiC;AAxBD,CAAjB;AA0BAxB,IAAI,CAACyB,WAAL,GAAmB,MAAnB;AACAzB,IAAI,CAAC0B,YAAL,GAAoB;AAClBnB,EAAAA,UAAU,EAAE;AADM,CAApB;AAGA,eAAeZ,eAAe,CAACK,IAAD,CAA9B;AACA,IAAMmB,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,UAAU,EAAE;AACVS,IAAAA,SAAS,EAAE,CAAC;AACVC,MAAAA,MAAM,EAAE,CAAC;AADC,KAAD;AADD;AADmB,CAAlB,CAAf","sourcesContent":["import _pt from \"prop-types\";\nimport isUndefined from 'lodash/isUndefined';\nimport React, { useMemo } from 'react';\nimport { Image, StyleSheet } from 'react-native';\nimport { asBaseComponent, Constants } from \"../../commons/new\";\nimport { getAsset, isSvg } from \"../../utils/imageUtils\";\nimport SvgImage from \"../svgImage\";\n\nconst Icon = props => {\n  const {\n    size,\n    tintColor,\n    style,\n    supportRTL,\n    source,\n    assetGroup,\n    assetName,\n    modifiers,\n    ...others\n  } = props;\n  const {\n    margins\n  } = modifiers;\n  const iconSize = size ? {\n    width: size,\n    height: size\n  } : undefined;\n  const shouldFlipRTL = supportRTL && Constants.isRTL;\n  const iconSource = useMemo(() => {\n    if (!isUndefined(assetName)) {\n      return getAsset(assetName, assetGroup);\n    }\n\n    return source;\n  }, [source, assetGroup, assetName]);\n  return isSvg(source) ? <SvgImage data={source} {...props} /> : <Image {...others} source={iconSource} style={[style, margins, iconSize, shouldFlipRTL && styles.rtlFlipped, !!tintColor && {\n    tintColor\n  }]} />;\n};\n\nIcon.propTypes = {\n  /**\n       * if provided icon source will be driven from asset name\n       */\n  assetName: _pt.string,\n\n  /**\n       * the asset group, default is \"icons\"\n       */\n  assetGroup: _pt.string,\n\n  /**\n       * the icon tint\n       */\n  tintColor: _pt.string,\n\n  /**\n       * the icon size\n       */\n  size: _pt.number,\n\n  /**\n       * whether the icon should flip horizontally on RTL\n       */\n  supportRTL: _pt.bool\n};\nIcon.displayName = 'Icon';\nIcon.defaultProps = {\n  assetGroup: 'icons'\n};\nexport default asBaseComponent(Icon);\nconst styles = StyleSheet.create({\n  rtlFlipped: {\n    transform: [{\n      scaleX: -1\n    }]\n  }\n});"]},"metadata":{},"sourceType":"module"}