{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport moment from 'moment';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { DateTimePickerPackage as RNDateTimePicker } from \"../../optionalDependencies\";\nimport { Colors } from \"../../style\";\nimport Assets from \"../../assets\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport TextField from \"../textField\";\nimport Dialog from \"../dialog\";\nimport View from \"../view\";\nimport Button from \"../button\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar MODES = {\n  DATE: 'date',\n  TIME: 'time'\n};\n\nvar DateTimePicker = function (_Component) {\n  _inherits(DateTimePicker, _Component);\n\n  var _super = _createSuper(DateTimePicker);\n\n  function DateTimePicker(props) {\n    var _this;\n\n    _classCallCheck(this, DateTimePicker);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function () {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var date = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (event.type !== 'dismissed' && date !== undefined) {\n        _this.chosenDate = date;\n\n        if (Constants.isAndroid) {\n          _this.onDonePressed();\n        }\n      } else if (event.type === 'dismissed' && Constants.isAndroid) {\n        _this.toggleExpandableOverlay();\n      }\n    };\n\n    _this.toggleExpandableOverlay = function (callback) {\n      _this.setState({\n        showExpandableOverlay: !_this.state.showExpandableOverlay\n      }, function () {\n        if (_.isFunction(callback)) {\n          callback();\n        }\n      });\n    };\n\n    _this.onToggleExpandableModal = function (value) {\n      _this.toggleExpandableOverlay();\n\n      _.invoke(_this.props, 'onToggleExpandableModal', value);\n    };\n\n    _this.onDonePressed = function () {\n      return _this.toggleExpandableOverlay(function () {\n        if (Constants.isIOS && !_this.chosenDate) {\n          _this.chosenDate = new Date();\n        }\n\n        _.invoke(_this.props, 'onChange', _this.chosenDate);\n\n        _this.setState({\n          value: _this.chosenDate\n        });\n      });\n    };\n\n    _this.getStringValue = function () {\n      var value = _this.state.value;\n      var _this$props = _this.props,\n          mode = _this$props.mode,\n          dateFormat = _this$props.dateFormat,\n          timeFormat = _this$props.timeFormat,\n          dateFormatter = _this$props.dateFormatter,\n          timeFormatter = _this$props.timeFormatter;\n\n      if (value) {\n        switch (mode) {\n          case MODES.DATE:\n            return dateFormatter ? dateFormatter(value) : dateFormat ? moment(value).format(dateFormat) : value.toLocaleDateString();\n\n          case MODES.TIME:\n            return timeFormatter ? timeFormatter(value) : timeFormat ? moment(value).format(timeFormat) : value.toLocaleTimeString();\n        }\n      }\n    };\n\n    _this.renderExpandableOverlay = function () {\n      var _this$props2 = _this.props,\n          testID = _this$props2.testID,\n          dialogProps = _this$props2.dialogProps;\n      var showExpandableOverlay = _this.state.showExpandableOverlay;\n      return _jsx(Dialog, _objectSpread(_objectSpread({\n        visible: showExpandableOverlay,\n        width: \"100%\",\n        height: null,\n        bottom: true,\n        centerH: true,\n        onDismiss: _this.toggleExpandableOverlay,\n        containerStyle: styles.dialog,\n        testID: testID + \".dialog\",\n        supportedOrientations: ['portrait', 'landscape', 'landscape-left', 'landscape-right']\n      }, dialogProps), {}, {\n        children: _jsxs(View, {\n          children: [_this.renderHeader(), _this.renderDateTimePicker()]\n        })\n      }));\n    };\n\n    _this.renderExpandable = function () {\n      return Constants.isAndroid ? _this.renderDateTimePicker() : _this.renderExpandableOverlay();\n    };\n\n    _this.chosenDate = props.value;\n    _this.state = {\n      showExpandableOverlay: false,\n      prevValue: props.value,\n      value: props.value\n    };\n\n    if (!RNDateTimePicker) {\n      console.error(\"RNUILib DateTimePicker component requires installing \\\"@react-native-community/datetimepicker\\\" dependency\");\n    }\n\n    return _this;\n  }\n\n  _createClass(DateTimePicker, [{\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var _this$props3 = this.props,\n          headerStyle = _this$props3.headerStyle,\n          useCustomTheme = _this$props3.useCustomTheme;\n      return _jsxs(View, {\n        row: true,\n        spread: true,\n        \"bg-white\": true,\n        \"paddingH-20\": true,\n        style: [styles.header, headerStyle],\n        children: [_jsx(Button, {\n          link: true,\n          iconSource: Assets.icons.x,\n          iconStyle: {\n            tintColor: Colors.grey10\n          },\n          onPress: this.toggleExpandableOverlay\n        }), _jsx(Button, {\n          link: true,\n          iconSource: Assets.icons.check,\n          useCustomTheme: useCustomTheme,\n          onPress: this.onDonePressed\n        })]\n      });\n    }\n  }, {\n    key: \"renderDateTimePicker\",\n    value: function renderDateTimePicker() {\n      if (!RNDateTimePicker) {\n        return null;\n      }\n\n      var _this$state = this.state,\n          value = _this$state.value,\n          showExpandableOverlay = _this$state.showExpandableOverlay;\n      var _this$props4 = this.props,\n          mode = _this$props4.mode,\n          minimumDate = _this$props4.minimumDate,\n          maximumDate = _this$props4.maximumDate,\n          locale = _this$props4.locale,\n          is24Hour = _this$props4.is24Hour,\n          minuteInterval = _this$props4.minuteInterval,\n          timeZoneOffsetInMinutes = _this$props4.timeZoneOffsetInMinutes,\n          themeVariant = _this$props4.themeVariant;\n\n      if (showExpandableOverlay) {\n        return _jsx(RNDateTimePicker, {\n          mode: mode,\n          value: value || new Date(),\n          onChange: this.handleChange,\n          minimumDate: minimumDate,\n          maximumDate: maximumDate,\n          locale: locale,\n          is24Hour: is24Hour,\n          minuteInterval: minuteInterval,\n          timeZoneOffsetInMinutes: timeZoneOffsetInMinutes,\n          display: Constants.isIOS ? 'spinner' : undefined,\n          themeVariant: themeVariant\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var textInputProps = TextField.extractOwnProps(this.props);\n      var renderInput = this.props.renderInput;\n      return _jsx(TextField, _objectSpread(_objectSpread({\n        renderExpandableInput: renderInput\n      }, textInputProps), {}, {\n        value: this.getStringValue(),\n        expandable: true,\n        renderExpandable: this.renderExpandable,\n        onToggleExpandableModal: this.onToggleExpandableModal\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.value !== prevState.prevValue) {\n        return {\n          prevValue: prevState.value,\n          value: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return DateTimePicker;\n}(Component);\n\nDateTimePicker.propTypes = {\n  mode: _pt.oneOf(['date', 'time']),\n  value: _pt.instanceOf(Date),\n  onChange: _pt.func,\n  minimumDate: _pt.instanceOf(Date),\n  maximumDate: _pt.instanceOf(Date),\n  dateFormat: _pt.string,\n  dateFormatter: _pt.func,\n  timeFormat: _pt.string,\n  timeFormatter: _pt.func,\n  locale: _pt.string,\n  is24Hour: _pt.bool,\n  minuteInterval: _pt.number,\n  timeZoneOffsetInMinutes: _pt.number,\n  renderInput: _pt.func,\n  themeVariant: _pt.oneOf(['light', 'dark']),\n  testID: _pt.string\n};\nDateTimePicker.displayName = 'DateTimePicker';\nDateTimePicker.defaultProps = _objectSpread(_objectSpread({}, TextField.defaultProps), {}, {\n  mode: MODES.DATE\n});\nexport { DateTimePicker };\nexport default asBaseComponent(DateTimePicker);\nvar styles = StyleSheet.create({\n  header: {\n    height: 56,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.grey80\n  },\n  dialog: {\n    backgroundColor: Colors.white,\n    borderTopLeftRadius: 12,\n    borderTopRightRadius: 12\n  }\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/dateTimePicker/index.js"],"names":["_pt","_","moment","React","Component","DateTimePickerPackage","RNDateTimePicker","Colors","Assets","Constants","asBaseComponent","TextField","Dialog","View","Button","MODES","DATE","TIME","DateTimePicker","props","handleChange","event","date","type","undefined","chosenDate","isAndroid","onDonePressed","toggleExpandableOverlay","callback","setState","showExpandableOverlay","state","isFunction","onToggleExpandableModal","value","invoke","isIOS","Date","getStringValue","mode","dateFormat","timeFormat","dateFormatter","timeFormatter","format","toLocaleDateString","toLocaleTimeString","renderExpandableOverlay","testID","dialogProps","styles","dialog","renderHeader","renderDateTimePicker","renderExpandable","prevValue","console","error","headerStyle","useCustomTheme","header","icons","x","tintColor","grey10","check","minimumDate","maximumDate","locale","is24Hour","minuteInterval","timeZoneOffsetInMinutes","themeVariant","textInputProps","extractOwnProps","renderInput","nextProps","prevState","propTypes","oneOf","instanceOf","onChange","func","string","bool","number","displayName","defaultProps","StyleSheet","create","height","borderBottomWidth","borderBottomColor","grey80","backgroundColor","white","borderTopLeftRadius","borderTopRightRadius"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport moment from 'moment';\nimport React, { Component } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { DateTimePickerPackage as RNDateTimePicker } from \"../../optionalDependencies\";\nimport { Colors } from \"../../style\";\nimport Assets from \"../../assets\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport TextField from \"../textField\";\nimport Dialog from \"../dialog\";\nimport View from \"../view\";\nimport Button from \"../button\";\nconst MODES = {\n  DATE: 'date',\n  TIME: 'time'\n};\n/*eslint-disable*/\n\n/**\n * @description: Date and Time Picker Component that wraps RNDateTimePicker for date and time modes.\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DateTimePickerScreen.js\n * @important: DateTimePicker uses a native library. You MUST add and link the native library to both iOS and Android projects.\n * @extends: TextField, react-native-community/datetimepicker\n * @extendsLink: https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker\n * @gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_iOS.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_Android.gif?raw=true\n */\n\n/*eslint-enable*/\n\nclass DateTimePicker extends Component {\n  static propTypes = {\n    /**\n       * The type of picker to display ('date' or 'time')\n       */\n\n    /* ...TextField.propTypes,*/\n\n    /* TODO: extend TextField props*/\n    mode: _pt.oneOf(['date', 'time']),\n\n    /**\n       * The initial value to set the picker to. Defaults to device's date / time\n       */\n    value: _pt.instanceOf(Date),\n\n    /**\n       * The onChange callback\n       */\n    onChange: _pt.func,\n\n    /**\n       * The minimum date or time value to use\n       */\n    minimumDate: _pt.instanceOf(Date),\n\n    /**\n       * The maximum date or time value to use\n       */\n    maximumDate: _pt.instanceOf(Date),\n\n    /**\n       * The date format for the text display\n       */\n    dateFormat: _pt.string,\n\n    /**\n       * A callback function to format date\n       */\n    dateFormatter: _pt.func,\n\n    /**\n       * The time format for the text display\n       */\n    timeFormat: _pt.string,\n\n    /**\n       * A callback function to format time\n       */\n    timeFormatter: _pt.func,\n\n    /**\n       * Allows changing of the locale of the component (iOS only)\n       */\n    locale: _pt.string,\n\n    /**\n       * Allows changing of the time picker to a 24 hour format (Android only)\n       */\n    is24Hour: _pt.bool,\n\n    /**\n       * The interval at which minutes can be selected. Possible values are: 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30 (iOS only)\n       */\n    minuteInterval: _pt.number,\n\n    /**\n       * Allows changing of the timeZone of the date picker. By default it uses the device's time zone (iOS only)\n       */\n    timeZoneOffsetInMinutes: _pt.number,\n\n    /**\n       * Render custom input\n       */\n    renderInput: _pt.func,\n\n    /**\n       * Override system theme variant (dark or light mode) used by the date picker.\n       */\n    themeVariant: _pt.oneOf(['light', 'dark']),\n\n    /**\n       * The component testID\n       */\n    testID: _pt.string\n  };\n  static displayName = 'DateTimePicker';\n  static defaultProps = { ...TextField.defaultProps,\n    mode: MODES.DATE\n  };\n\n  constructor(props) {\n    super(props);\n    this.chosenDate = props.value;\n    this.state = {\n      showExpandableOverlay: false,\n      prevValue: props.value,\n      value: props.value\n    };\n\n    if (!RNDateTimePicker) {\n      console.error(`RNUILib DateTimePicker component requires installing \"@react-native-community/datetimepicker\" dependency`);\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.value !== prevState.prevValue) {\n      return {\n        prevValue: prevState.value,\n        value: nextProps.value\n      };\n    }\n\n    return null;\n  }\n\n  handleChange = (event = {}, date) => {\n    // NOTE: will be called on Android even when there was no actual change\n    if (event.type !== 'dismissed' && date !== undefined) {\n      this.chosenDate = date;\n\n      if (Constants.isAndroid) {\n        this.onDonePressed();\n      }\n    } else if (event.type === 'dismissed' && Constants.isAndroid) {\n      this.toggleExpandableOverlay();\n    }\n  };\n  toggleExpandableOverlay = callback => {\n    this.setState({\n      showExpandableOverlay: !this.state.showExpandableOverlay\n    }, () => {\n      if (_.isFunction(callback)) {\n        callback();\n      }\n    });\n  };\n  onToggleExpandableModal = value => {\n    this.toggleExpandableOverlay();\n\n    _.invoke(this.props, 'onToggleExpandableModal', value);\n  };\n  onDonePressed = () => this.toggleExpandableOverlay(() => {\n    if (Constants.isIOS && !this.chosenDate) {\n      // since handleChange() is not called on iOS when there is no actual change\n      this.chosenDate = new Date();\n    }\n\n    _.invoke(this.props, 'onChange', this.chosenDate);\n\n    this.setState({\n      value: this.chosenDate\n    });\n  });\n  getStringValue = () => {\n    const {\n      value\n    } = this.state;\n    const {\n      mode,\n      dateFormat,\n      timeFormat,\n      dateFormatter,\n      timeFormatter\n    } = this.props;\n\n    if (value) {\n      switch (mode) {\n        case MODES.DATE:\n          return dateFormatter ? dateFormatter(value) : dateFormat ? moment(value).format(dateFormat) : value.toLocaleDateString();\n\n        case MODES.TIME:\n          return timeFormatter ? timeFormatter(value) : timeFormat ? moment(value).format(timeFormat) : value.toLocaleTimeString();\n      }\n    }\n  };\n  renderExpandableOverlay = () => {\n    const {\n      testID,\n      dialogProps\n    } = this.props;\n    const {\n      showExpandableOverlay\n    } = this.state;\n    return <Dialog visible={showExpandableOverlay} width=\"100%\" height={null} bottom centerH onDismiss={this.toggleExpandableOverlay} containerStyle={styles.dialog} testID={`${testID}.dialog`} supportedOrientations={['portrait', 'landscape', 'landscape-left', 'landscape-right']} // iOS only\n    {...dialogProps}>\n        <View\n      /* useSafeArea */\n      >\n          {this.renderHeader()}\n          {this.renderDateTimePicker()}\n        </View>\n      </Dialog>;\n  };\n\n  renderHeader() {\n    // @ts-expect-error\n    const {\n      headerStyle,\n      useCustomTheme\n    } = this.props;\n    return <View row spread bg-white paddingH-20 style={[styles.header, headerStyle]}>\n        <Button link iconSource={Assets.icons.x} iconStyle={{\n        tintColor: Colors.grey10\n      }} onPress={this.toggleExpandableOverlay} />\n        <Button link iconSource={Assets.icons.check} useCustomTheme={useCustomTheme} onPress={this.onDonePressed} />\n      </View>;\n  }\n\n  renderDateTimePicker() {\n    if (!RNDateTimePicker) {\n      return null;\n    }\n\n    const {\n      value,\n      showExpandableOverlay\n    } = this.state;\n    const {\n      mode,\n      minimumDate,\n      maximumDate,\n      locale,\n      is24Hour,\n      minuteInterval,\n      timeZoneOffsetInMinutes,\n      themeVariant\n    } = this.props;\n\n    if (showExpandableOverlay) {\n      return <RNDateTimePicker mode={mode} value={value || new Date()} onChange={this.handleChange} minimumDate={minimumDate} maximumDate={maximumDate} locale={locale} is24Hour={is24Hour} minuteInterval={minuteInterval} timeZoneOffsetInMinutes={timeZoneOffsetInMinutes} display={Constants.isIOS ? 'spinner' : undefined} themeVariant={themeVariant} />;\n    }\n  }\n\n  renderExpandable = () => {\n    return Constants.isAndroid ? this.renderDateTimePicker() : this.renderExpandableOverlay();\n  };\n\n  render() {\n    // @ts-expect-error\n    const textInputProps = TextField.extractOwnProps(this.props);\n    const {\n      renderInput\n    } = this.props;\n    return (// @ts-expect-error\n      <TextField renderExpandableInput={renderInput} {...textInputProps} value={this.getStringValue()} expandable renderExpandable={this.renderExpandable} onToggleExpandableModal={this.onToggleExpandableModal} />\n    );\n  }\n\n}\n\nexport { DateTimePicker }; // For tests\n\nexport default asBaseComponent(DateTimePicker);\nconst styles = StyleSheet.create({\n  header: {\n    height: 56,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.grey80\n  },\n  dialog: {\n    backgroundColor: Colors.white,\n    borderTopLeftRadius: 12,\n    borderTopRightRadius: 12\n  }\n});"]},"metadata":{},"sourceType":"module"}