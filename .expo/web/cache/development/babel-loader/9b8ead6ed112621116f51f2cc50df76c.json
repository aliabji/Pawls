{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text } from \"./Themed\";\nimport { ActionResponseBlock } from \"./ActionResponseBlock\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { Button } from 'react-native-ui-lib';\nimport { ParkDisplay } from \"./ParkDisplay\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CreateVisit(props) {\n  var now = new Date();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showPicker = _useState2[0],\n      setShowPicker = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      datetime = _useState4[0],\n      setDatetime = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      friendsToInvite = _useState6[0],\n      setFriendsToInvite = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      park = _useState8[0],\n      setPark = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      responseMessage = _useState10[0],\n      setResponseMessage = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      showResponseBlock = _useState12[0],\n      setShowResponseBlock = _useState12[1];\n\n  var formattedTime = function formattedTime() {\n    return console.log(datetime && datetime.toLocaleTimeString('default', {\n      timeStyle: 'short'\n    }));\n  };\n\n  var submit = function submit() {\n    var _visit;\n\n    return _regeneratorRuntime.async(function submit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              console.log(\"vist scheduled\", datetime, friendsToInvite, park);\n              _visit = {\n                park_id: park.id,\n                time: datetime,\n                invitees: friendsToInvite\n              };\n              props.createVisit(_visit);\n            } catch (err) {\n              console.log(\"Unrecoverable error occured \", err);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var datePickerChangeHandler = function datePickerChangeHandler(event) {\n    setDatetime(event.nativeEvent.timestamp);\n    setShowPicker(false);\n  };\n\n  console.log(friendsToInvite, park);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Let's go to the park\"\n    }), _jsx(Button, {\n      label: \"Pick a time\",\n      onPress: function onPress() {\n        return setShowPicker(true);\n      }\n    }), showPicker && _jsx(DateTimePicker, {\n      testID: \"dateTimePicker\",\n      value: now,\n      minimumDate: now,\n      mode: 'time',\n      is24Hour: false,\n      display: \"default\",\n      onChange: function onChange(event) {\n        return datePickerChangeHandler(event);\n      }\n    }), _jsx(Text, {\n      children: datetime && datetime.toLocaleTimeString('default', {\n        hour: '2-digit',\n        minute: '2-digit'\n      }).toString()\n    }), formattedTime(), _jsx(Text, {\n      children: \"Pick friends to invite\"\n    }), props.friends.map(function (friend, key) {\n      return _jsxs(View, {\n        children: [_jsx(Text, {\n          children: friend.username\n        }), _jsx(Button, {\n          label: \"Invite\",\n          onPress: function onPress() {\n            return setFriendsToInvite([].concat(_toConsumableArray(friendsToInvite), [friend.id]));\n          }\n        })]\n      }, key);\n    }), _jsx(Text, {\n      children: \"Which park do you want to go to?\"\n    }), props.parks.map(function (park, key) {\n      return _jsx(ParkDisplay, {\n        park: park\n      }, key);\n    }), _jsx(Button, {\n      label: \"Schedule Visit\",\n      onPress: function onPress() {\n        return submit();\n      }\n    }), showResponseBlock && _jsx(ActionResponseBlock, {\n      success: true,\n      message: responseMessage\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  input: {\n    width: 350,\n    height: 55,\n    backgroundColor: '#42A5F5',\n    margin: 10,\n    padding: 8,\n    color: 'white',\n    borderRadius: 14,\n    fontSize: 18,\n    fontWeight: '500'\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/components/CreateVisit.tsx"],"names":["React","useState","Text","ActionResponseBlock","DateTimePicker","Button","ParkDisplay","CreateVisit","props","now","Date","showPicker","setShowPicker","datetime","setDatetime","friendsToInvite","setFriendsToInvite","park","setPark","responseMessage","setResponseMessage","showResponseBlock","setShowResponseBlock","formattedTime","console","log","toLocaleTimeString","timeStyle","submit","visit","park_id","id","time","invitees","createVisit","err","datePickerChangeHandler","event","nativeEvent","timestamp","styles","container","hour","minute","toString","friends","map","friend","key","username","parks","StyleSheet","create","input","width","height","backgroundColor","margin","padding","color","borderRadius","fontSize","fontWeight","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {\n  View,\n  TextInput,\n  StyleSheet\n} from 'react-native'\nimport { Text } from './Themed';\nimport {createDog} from '../utils/apiService';\nimport {ActionResponseBlock} from './ActionResponseBlock';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport {Button} from 'react-native-ui-lib'\nimport {ParkDisplay} from './ParkDisplay';\n\nexport interface CreateVisitProps {\n    friends: any[];\n    parks: any;\n    createVisit: (visit: any) => void;\n}\n\nexport default function CreateVisit(props: CreateVisitProps) {\n    const now = new Date();\n    const [showPicker, setShowPicker] = useState<boolean>(false);\n    const [datetime, setDatetime] = useState<Date>()\n    const [friendsToInvite, setFriendsToInvite] = useState<string[]>([])\n    const [park, setPark] = useState<any>()\n    const [responseMessage, setResponseMessage] = useState<string>(\"\")\n    const [showResponseBlock, setShowResponseBlock] = useState<boolean>(false)\n    \n    const formattedTime = () => (\n        console.log(datetime && datetime.toLocaleTimeString('default', {timeStyle: 'short'}))\n    )\n\n    const submit = async () => {\n        try {\n            console.log(\"vist scheduled\", datetime, friendsToInvite, park)\n            const visit = {\n                park_id: park.id,\n                time: datetime,\n                invitees: friendsToInvite\n            }\n            props.createVisit(visit)\n\n        } catch (err) {\n        console.log(\"Unrecoverable error occured \", err)\n        }\n    }\n\n    const datePickerChangeHandler = (event: any) => {\n        setDatetime(event.nativeEvent.timestamp)\n        setShowPicker(false)\n    }\n\n    console.log(friendsToInvite, park)\n \n    return (\n        <View style={styles.container}>\n            <Text>Let's go to the park</Text>\n            <Button label=\"Pick a time\" onPress={() => setShowPicker(true)} />\n            {showPicker && (\n                <DateTimePicker\n                testID=\"dateTimePicker\"\n                value={now}\n                minimumDate={now}\n                mode={'time'}\n                is24Hour={false}\n                display=\"default\"\n                onChange={(event: any) => datePickerChangeHandler(event)}\n                />\n            )}\n            <Text>{datetime && datetime.toLocaleTimeString('default', {\n                hour: '2-digit',\n                minute: '2-digit'\n            }).toString()}</Text>\n            {formattedTime()}\n            <Text>Pick friends to invite</Text>\n            {props.friends.map((friend, key) => {\n                return (\n                    <View key={key}>\n                        <Text>{friend.username}</Text>\n                        <Button label=\"Invite\" onPress={() => setFriendsToInvite([...friendsToInvite, friend.id])} />\n                    </View>\n                )\n            })}\n            <Text>Which park do you want to go to?</Text>\n            {props.parks.map((park, key) => {\n                return (\n                    <ParkDisplay key={key} park={park} />\n                    // <View key={key}>\n                    //     <Text>{park.name}</Text>\n                    //     <Button label=\"Select\" onPress={() => setPark(park)} />\n                    // </View>\n                )\n            })}\n            <Button\n                label='Schedule Visit'\n                onPress={() => submit()}\n            />\n            {showResponseBlock && (\n                <ActionResponseBlock success={true} message={responseMessage} />\n            )}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n  input: {\n    width: 350,\n    height: 55,\n    backgroundColor: '#42A5F5',\n    margin: 10,\n    padding: 8,\n    color: 'white',\n    borderRadius: 14,\n    fontSize: 18,\n    fontWeight: '500',\n  },\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n})"]},"metadata":{},"sourceType":"module"}