{"ast":null,"code":"import React, { useEffect, useCallback } from 'react';\nimport { runOnJS } from 'react-native-reanimated';\nimport useAnimatedTranslator, { TransitionViewDirectionEnum } from \"./useAnimatedTranslator\";\nimport useAnimationEndNotifier from \"./useAnimationEndNotifier\";\nexport default function useAnimatedTransition(props) {\n  var hiddenLocation = props.hiddenLocation,\n      enterFrom = props.enterFrom,\n      exitTo = props.exitTo,\n      onAnimationStart = props.onAnimationStart,\n      onAnimationEnd = props.onAnimationEnd;\n\n  var _useAnimatedTranslato = useAnimatedTranslator({\n    initialVisibility: !enterFrom\n  }),\n      init = _useAnimatedTranslato.init,\n      animate = _useAnimatedTranslato.animate,\n      animatedStyle = _useAnimatedTranslato.animatedStyle;\n\n  var _useAnimationEndNotif = useAnimationEndNotifier({\n    onAnimationEnd: onAnimationEnd\n  }),\n      onEnterAnimationEnd = _useAnimationEndNotif.onEnterAnimationEnd,\n      onExitAnimationEnd = _useAnimationEndNotif.onExitAnimationEnd;\n\n  var getLocation = function getLocation(direction) {\n    return {\n      x: direction && [TransitionViewDirectionEnum.LEFT, TransitionViewDirectionEnum.RIGHT].includes(direction) ? hiddenLocation[direction] : 0,\n      y: direction && [TransitionViewDirectionEnum.UP, TransitionViewDirectionEnum.DOWN].includes(direction) ? hiddenLocation[direction] : 0\n    };\n  };\n\n  useEffect(function () {\n    if (!hiddenLocation.isDefault && enterFrom) {\n      var location = getLocation(enterFrom);\n      init(location, enterFrom, enter);\n    }\n  }, [hiddenLocation.isDefault]);\n  var enter = useCallback(function () {\n    var _f = function _f() {\n      if (enterFrom) {\n        if (onAnimationStart) {\n          runOnJS(onAnimationStart)('enter');\n        }\n\n        animate({\n          x: 0,\n          y: 0\n        }, enterFrom, onEnterAnimationEnd);\n      }\n    };\n\n    _f._closure = {\n      enterFrom: enterFrom,\n      onAnimationStart: onAnimationStart,\n      runOnJS: runOnJS,\n      animate: animate,\n      onEnterAnimationEnd: onEnterAnimationEnd\n    };\n    _f.asString = \"function _f(){const{enterFrom,onAnimationStart,runOnJS,animate,onEnterAnimationEnd}=jsThis._closure;{if(enterFrom){if(onAnimationStart){runOnJS(onAnimationStart)('enter');}animate({x:0,y:0},enterFrom,onEnterAnimationEnd);}}}\";\n    _f.__workletHash = 5522317889996;\n    _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TransitionView/useAnimatedTransition.js (43:28)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [onEnterAnimationEnd]);\n  var exit = useCallback(function () {\n    var _f = function _f() {\n      if (exitTo) {\n        if (onAnimationStart) {\n          runOnJS(onAnimationStart)('exit');\n        }\n\n        animate(getLocation(exitTo), exitTo, onExitAnimationEnd);\n      }\n    };\n\n    _f._closure = {\n      exitTo: exitTo,\n      onAnimationStart: onAnimationStart,\n      runOnJS: runOnJS,\n      animate: animate,\n      getLocation: getLocation,\n      onExitAnimationEnd: onExitAnimationEnd\n    };\n    _f.asString = \"function _f(){const{exitTo,onAnimationStart,runOnJS,animate,getLocation,onExitAnimationEnd}=jsThis._closure;{if(exitTo){if(onAnimationStart){runOnJS(onAnimationStart)('exit');}animate(getLocation(exitTo),exitTo,onExitAnimationEnd);}}}\";\n    _f.__workletHash = 16131848432796;\n    _f.__location = \"/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TransitionView/useAnimatedTransition.js (57:27)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [hiddenLocation, exitTo, onExitAnimationEnd]);\n  return {\n    exit: exit,\n    animatedStyle: animatedStyle\n  };\n}","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TransitionView/useAnimatedTransition.js"],"names":["React","useEffect","useCallback","runOnJS","useAnimatedTranslator","TransitionViewDirectionEnum","useAnimationEndNotifier","useAnimatedTransition","props","hiddenLocation","enterFrom","exitTo","onAnimationStart","onAnimationEnd","initialVisibility","init","animate","animatedStyle","onEnterAnimationEnd","onExitAnimationEnd","getLocation","direction","x","LEFT","RIGHT","includes","y","UP","DOWN","isDefault","location","enter","exit"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useCallback } from 'react';\nimport { runOnJS } from 'react-native-reanimated';\nimport useAnimatedTranslator, { TransitionViewDirectionEnum } from \"./useAnimatedTranslator\";\nimport useAnimationEndNotifier from \"./useAnimationEndNotifier\";\nexport default function useAnimatedTransition(props) {\n  const {\n    hiddenLocation,\n    enterFrom,\n    exitTo,\n    onAnimationStart,\n    onAnimationEnd\n  } = props;\n  const {\n    init,\n    animate,\n    animatedStyle\n  } = useAnimatedTranslator({\n    initialVisibility: !enterFrom\n  });\n  const {\n    onEnterAnimationEnd,\n    onExitAnimationEnd\n  } = useAnimationEndNotifier({\n    onAnimationEnd\n  });\n\n  const getLocation = direction => {\n    return {\n      x: //@ts-expect-error\n      direction && [TransitionViewDirectionEnum.LEFT, TransitionViewDirectionEnum.RIGHT].includes(direction) ? hiddenLocation[direction] : 0,\n      y: //@ts-expect-error\n      direction && [TransitionViewDirectionEnum.UP, TransitionViewDirectionEnum.DOWN].includes(direction) ? hiddenLocation[direction] : 0\n    };\n  };\n\n  useEffect(() => {\n    if (!hiddenLocation.isDefault && enterFrom) {\n      const location = getLocation(enterFrom);\n      init(location, enterFrom, enter);\n    }\n  }, [hiddenLocation.isDefault]);\n  const enter = useCallback(() => {\n    'worklet';\n\n    if (enterFrom) {\n      if (onAnimationStart) {\n        runOnJS(onAnimationStart)('enter');\n      }\n\n      animate({\n        x: 0,\n        y: 0\n      }, enterFrom, onEnterAnimationEnd);\n    }\n  }, [onEnterAnimationEnd]);\n  const exit = useCallback(() => {\n    'worklet';\n\n    if (exitTo) {\n      if (onAnimationStart) {\n        runOnJS(onAnimationStart)('exit');\n      }\n\n      animate(getLocation(exitTo), exitTo, onExitAnimationEnd);\n    }\n  }, [hiddenLocation, exitTo, onExitAnimationEnd]);\n  return {\n    exit,\n    animatedStyle\n  };\n}"]},"metadata":{},"sourceType":"module"}