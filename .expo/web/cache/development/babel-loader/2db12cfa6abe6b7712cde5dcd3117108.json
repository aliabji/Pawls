{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _pt from \"prop-types\";\nimport React, { useContext, useEffect, useRef, useCallback, useState, useMemo } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ValidationMessagePosition } from \"./types\";\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport { Constants } from \"../../commons/new\";\nimport View from \"../../components/view\";\nimport Text from \"../../components/text\";\nimport FieldContext from \"./FieldContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar FLOATING_PLACEHOLDER_SCALE = 0.875;\n\nvar FloatingPlaceholder = function FloatingPlaceholder(_ref) {\n  var placeholder = _ref.placeholder,\n      _ref$floatingPlacehol = _ref.floatingPlaceholderColor,\n      floatingPlaceholderColor = _ref$floatingPlacehol === void 0 ? Colors.grey40 : _ref$floatingPlacehol,\n      floatingPlaceholderStyle = _ref.floatingPlaceholderStyle,\n      floatOnFocus = _ref.floatOnFocus,\n      validationMessagePosition = _ref.validationMessagePosition,\n      _ref$extraOffset = _ref.extraOffset,\n      extraOffset = _ref$extraOffset === void 0 ? 0 : _ref$extraOffset,\n      testID = _ref.testID;\n  var context = useContext(FieldContext);\n\n  var _useState = useState({\n    top: 0,\n    left: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      placeholderOffset = _useState2[0],\n      setPlaceholderOffset = _useState2[1];\n\n  var animation = useRef(new Animated.Value(Number(context.isFocused))).current;\n  var hidePlaceholder = !context.isValid && validationMessagePosition === ValidationMessagePosition.TOP;\n  var animatedStyle = useMemo(function () {\n    return {\n      transform: [{\n        scale: interpolateValue(animation, [1, FLOATING_PLACEHOLDER_SCALE])\n      }, {\n        translateX: interpolateValue(animation, [0, -placeholderOffset.left - extraOffset / FLOATING_PLACEHOLDER_SCALE])\n      }, {\n        translateY: interpolateValue(animation, [0, -placeholderOffset.top])\n      }]\n    };\n  }, [placeholderOffset, extraOffset]);\n  useEffect(function () {\n    var toValue = floatOnFocus ? context.isFocused || context.hasValue : context.hasValue;\n    Animated.timing(animation, {\n      toValue: Number(toValue),\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  }, [floatOnFocus, context.isFocused, context.hasValue]);\n  var onPlaceholderLayout = useCallback(function (event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n    var translate = width / 2 - width * FLOATING_PLACEHOLDER_SCALE / 2;\n    translate = Constants.isRTL ? -translate : translate;\n    setPlaceholderOffset({\n      left: translate / FLOATING_PLACEHOLDER_SCALE,\n      top: height\n    });\n  }, []);\n  return _jsx(View, {\n    absF: true,\n    style: hidePlaceholder && styles.hidden,\n    children: _jsx(Text, {\n      animated: true,\n      color: getColorByState(floatingPlaceholderColor, context),\n      style: [styles.placeholder, floatingPlaceholderStyle, animatedStyle],\n      onLayout: onPlaceholderLayout,\n      testID: testID,\n      children: placeholder\n    })\n  });\n};\n\nFloatingPlaceholder.propTypes = {\n  placeholder: _pt.string,\n  floatOnFocus: _pt.bool,\n  extraOffset: _pt.number,\n  testID: _pt.string.isRequired\n};\nvar styles = StyleSheet.create({\n  placeholder: _objectSpread({}, Platform.select({\n    android: {\n      textAlignVertical: 'center',\n      flex: 1\n    }\n  })),\n  hidden: {\n    opacity: 0\n  }\n});\n\nfunction interpolateValue(animatedValue, outputRange) {\n  return animatedValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: outputRange\n  });\n}\n\nFloatingPlaceholder.displayName = 'Incubator.TextField';\nexport default FloatingPlaceholder;","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/TextField/FloatingPlaceholder.js"],"names":["_pt","React","useContext","useEffect","useRef","useCallback","useState","useMemo","ValidationMessagePosition","getColorByState","Colors","Constants","View","Text","FieldContext","FLOATING_PLACEHOLDER_SCALE","FloatingPlaceholder","placeholder","floatingPlaceholderColor","grey40","floatingPlaceholderStyle","floatOnFocus","validationMessagePosition","extraOffset","testID","context","top","left","placeholderOffset","setPlaceholderOffset","animation","Animated","Value","Number","isFocused","current","hidePlaceholder","isValid","TOP","animatedStyle","transform","scale","interpolateValue","translateX","translateY","toValue","hasValue","timing","duration","useNativeDriver","start","onPlaceholderLayout","event","nativeEvent","layout","width","height","translate","isRTL","styles","hidden","propTypes","string","bool","number","isRequired","StyleSheet","create","Platform","select","android","textAlignVertical","flex","opacity","animatedValue","outputRange","interpolate","inputRange","displayName"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React, { useContext, useEffect, useRef, useCallback, useState, useMemo } from 'react';\nimport { Animated, StyleSheet, Platform } from 'react-native';\nimport { ValidationMessagePosition } from \"./types\";\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport { Constants } from \"../../commons/new\";\nimport View from \"../../components/view\";\nimport Text from \"../../components/text\";\nimport FieldContext from \"./FieldContext\";\nconst FLOATING_PLACEHOLDER_SCALE = 0.875;\n\nconst FloatingPlaceholder = ({\n  placeholder,\n  floatingPlaceholderColor = Colors.grey40,\n  floatingPlaceholderStyle,\n  floatOnFocus,\n  validationMessagePosition,\n  extraOffset = 0,\n  testID\n}) => {\n  const context = useContext(FieldContext);\n  const [placeholderOffset, setPlaceholderOffset] = useState({\n    top: 0,\n    left: 0\n  });\n  const animation = useRef(new Animated.Value(Number(context.isFocused))).current;\n  const hidePlaceholder = !context.isValid && validationMessagePosition === ValidationMessagePosition.TOP;\n  const animatedStyle = useMemo(() => {\n    return {\n      transform: [{\n        scale: interpolateValue(animation, [1, FLOATING_PLACEHOLDER_SCALE])\n      }, {\n        translateX: interpolateValue(animation, [0, -placeholderOffset.left - extraOffset / FLOATING_PLACEHOLDER_SCALE])\n      }, {\n        translateY: interpolateValue(animation, [0, -placeholderOffset.top])\n      }]\n    };\n  }, [placeholderOffset, extraOffset]);\n  useEffect(() => {\n    const toValue = floatOnFocus ? context.isFocused || context.hasValue : context.hasValue;\n    Animated.timing(animation, {\n      toValue: Number(toValue),\n      duration: 200,\n      useNativeDriver: true\n    }).start();\n  }, [floatOnFocus, context.isFocused, context.hasValue]);\n  const onPlaceholderLayout = useCallback(event => {\n    const {\n      width,\n      height\n    } = event.nativeEvent.layout;\n    let translate = width / 2 - width * FLOATING_PLACEHOLDER_SCALE / 2;\n    translate = Constants.isRTL ? -translate : translate;\n    setPlaceholderOffset({\n      left: translate / FLOATING_PLACEHOLDER_SCALE,\n      top: height\n    });\n  }, []);\n  return <View absF style={hidePlaceholder && styles.hidden}>\n      <Text animated color={getColorByState(floatingPlaceholderColor, context)} style={[styles.placeholder, floatingPlaceholderStyle, animatedStyle]} onLayout={onPlaceholderLayout} testID={testID}>\n        {placeholder}\n      </Text>\n    </View>;\n};\n\nFloatingPlaceholder.propTypes = {\n  /**\n     * The placeholder for the field\n     */\n  placeholder: _pt.string,\n\n  /**\n     * Should placeholder float on focus or when start typing\n     */\n  floatOnFocus: _pt.bool,\n  extraOffset: _pt.number,\n  testID: _pt.string.isRequired\n};\nconst styles = StyleSheet.create({\n  placeholder: { ...Platform.select({\n      android: {\n        textAlignVertical: 'center',\n        flex: 1\n      }\n    })\n  },\n  hidden: {\n    opacity: 0\n  }\n});\n\nfunction interpolateValue(animatedValue, outputRange) {\n  return animatedValue.interpolate({\n    inputRange: [0, 1],\n    outputRange\n  });\n}\n\nFloatingPlaceholder.displayName = 'Incubator.TextField';\nexport default FloatingPlaceholder;"]},"metadata":{},"sourceType":"module"}