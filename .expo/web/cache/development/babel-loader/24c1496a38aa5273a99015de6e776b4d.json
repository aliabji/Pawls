{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"chips\", \"defaultChipProps\", \"invalidChipProps\", \"leadingAccessory\", \"onChange\", \"fieldStyle\", \"maxChips\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useMemo, useRef, useState, forwardRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { isUndefined, map } from 'lodash';\nimport { Constants } from \"../../commons/new\";\nimport { useCombinedRefs } from \"../../hooks\";\nimport TextField from \"../TextField\";\nimport Chip from \"../../components/chip\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar removeIcon = require(\"./assets/xSmall.png\");\n\nexport var ChipsInputChangeReason;\n\n(function (ChipsInputChangeReason) {\n  ChipsInputChangeReason[\"Added\"] = \"added\";\n  ChipsInputChangeReason[\"Removed\"] = \"removed\";\n})(ChipsInputChangeReason || (ChipsInputChangeReason = {}));\n\nvar ChipsInput = forwardRef(function (props, refToForward) {\n  var fieldRef = useCombinedRefs(refToForward);\n\n  var _props$chips = props.chips,\n      chips = _props$chips === void 0 ? [] : _props$chips,\n      defaultChipProps = props.defaultChipProps,\n      invalidChipProps = props.invalidChipProps,\n      leadingAccessory = props.leadingAccessory,\n      onChange = props.onChange,\n      fieldStyle = props.fieldStyle,\n      maxChips = props.maxChips,\n      others = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      markedForRemoval = _useState2[0],\n      setMarkedForRemoval = _useState2[1];\n\n  var fieldValue = useRef(others.value);\n  var addChip = useCallback(function () {\n    var reachedMaximum = maxChips && (chips == null ? void 0 : chips.length) >= maxChips;\n\n    if (fieldValue.current && !reachedMaximum) {\n      var newChip = {\n        label: fieldValue.current\n      };\n      setMarkedForRemoval(undefined);\n      fieldRef.current.clear();\n      fieldValue.current = '';\n      setTimeout(function () {\n        onChange == null ? void 0 : onChange([].concat(_toConsumableArray(chips), [newChip]), ChipsInputChangeReason.Added, newChip);\n      }, 0);\n    }\n  }, [onChange, chips, maxChips]);\n  var removeMarkedChip = useCallback(function () {\n    if (!isUndefined(markedForRemoval)) {\n      var removedChip = chips == null ? void 0 : chips.splice(markedForRemoval, 1);\n      onChange == null ? void 0 : onChange(_toConsumableArray(chips), ChipsInputChangeReason.Removed, removedChip == null ? void 0 : removedChip[0]);\n      setMarkedForRemoval(undefined);\n    }\n  }, [chips, markedForRemoval, onChange]);\n  var onChipPress = useCallback(function (_ref) {\n    var index = _ref.customValue;\n    var selectedChip = chips[index];\n    selectedChip == null ? void 0 : selectedChip.onPress == null ? void 0 : selectedChip.onPress();\n    setMarkedForRemoval(index);\n  }, [chips]);\n  var onChangeText = useCallback(function (value) {\n    fieldValue.current = value;\n    props.onChangeText == null ? void 0 : props.onChangeText(value);\n\n    if (!isUndefined(markedForRemoval)) {\n      setMarkedForRemoval(undefined);\n    }\n  }, [props.onChangeText, markedForRemoval]);\n  var onKeyPress = useCallback(function (event) {\n    var _event$nativeEvent;\n\n    props.onKeyPress == null ? void 0 : props.onKeyPress(event);\n    var keyCode = event == null ? void 0 : (_event$nativeEvent = event.nativeEvent) == null ? void 0 : _event$nativeEvent.key;\n    var pressedBackspace = keyCode === Constants.backspaceKey;\n\n    if (pressedBackspace && !fieldValue.current) {\n      if (isUndefined(markedForRemoval) || markedForRemoval !== chips.length - 1) {\n        setMarkedForRemoval(chips.length - 1);\n      } else {\n        removeMarkedChip();\n      }\n    }\n  }, [chips, props.onKeyPress, markedForRemoval, removeMarkedChip]);\n  var chipList = useMemo(function () {\n    return _jsxs(_Fragment, {\n      children: [leadingAccessory, map(chips, function (chip, index) {\n        var isMarkedForRemoval = index === markedForRemoval;\n        return _jsx(Chip, _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n          customValue: index,\n          \"marginR-s2\": true,\n          \"marginB-s2\": true,\n          dismissIcon: removeIcon\n        }, defaultChipProps), chip.invalid ? invalidChipProps : undefined), chip), {}, {\n          onPress: onChipPress,\n          onDismiss: isMarkedForRemoval ? removeMarkedChip : undefined\n        }), index);\n      })]\n    });\n  }, [chips, leadingAccessory, defaultChipProps, removeMarkedChip, markedForRemoval]);\n  return _jsx(TextField, _objectSpread(_objectSpread({\n    ref: fieldRef,\n    leadingAccessory: chipList,\n    blurOnSubmit: false\n  }, others), {}, {\n    onChangeText: onChangeText,\n    onSubmitEditing: addChip,\n    fieldStyle: [fieldStyle, styles.fieldStyle],\n    onKeyPress: onKeyPress,\n    accessibilityHint: props.editable ? 'press keyboard delete button to remove last tag' : undefined\n  }));\n});\nvar styles = StyleSheet.create({\n  fieldStyle: {\n    flexWrap: 'wrap'\n  }\n});\nChipsInput.changeReasons = {\n  ADDED: 'added',\n  REMOVED: 'removed'\n};\nexport default ChipsInput;","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/ChipsInput/index.js"],"names":["React","useCallback","useMemo","useRef","useState","forwardRef","isUndefined","map","Constants","useCombinedRefs","TextField","Chip","removeIcon","require","ChipsInputChangeReason","ChipsInput","props","refToForward","fieldRef","chips","defaultChipProps","invalidChipProps","leadingAccessory","onChange","fieldStyle","maxChips","others","undefined","markedForRemoval","setMarkedForRemoval","fieldValue","value","addChip","reachedMaximum","length","current","newChip","label","clear","setTimeout","Added","removeMarkedChip","removedChip","splice","Removed","onChipPress","index","customValue","selectedChip","onPress","onChangeText","onKeyPress","event","keyCode","nativeEvent","key","pressedBackspace","backspaceKey","chipList","chip","isMarkedForRemoval","invalid","styles","editable","StyleSheet","create","flexWrap","changeReasons","ADDED","REMOVED"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef, useState, forwardRef } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { isUndefined, map } from 'lodash';\nimport { Constants } from \"../../commons/new\";\nimport { useCombinedRefs } from \"../../hooks\";\nimport TextField from \"../TextField\";\nimport Chip from \"../../components/chip\";\n\nconst removeIcon = require(\"./assets/xSmall.png\");\n\nexport let ChipsInputChangeReason;\n\n(function (ChipsInputChangeReason) {\n  ChipsInputChangeReason[\"Added\"] = \"added\";\n  ChipsInputChangeReason[\"Removed\"] = \"removed\";\n})(ChipsInputChangeReason || (ChipsInputChangeReason = {}));\n\nconst ChipsInput = forwardRef((props, refToForward) => {\n  const fieldRef = useCombinedRefs(refToForward);\n  const {\n    chips = [],\n    defaultChipProps,\n    invalidChipProps,\n    leadingAccessory,\n    onChange,\n    fieldStyle,\n    maxChips,\n    ...others\n  } = props;\n  const [markedForRemoval, setMarkedForRemoval] = useState(undefined);\n  const fieldValue = useRef(others.value);\n  const addChip = useCallback(() => {\n    const reachedMaximum = maxChips && chips?.length >= maxChips;\n\n    if (fieldValue.current && !reachedMaximum) {\n      const newChip = {\n        label: fieldValue.current\n      };\n      setMarkedForRemoval(undefined); // @ts-expect-error\n\n      fieldRef.current.clear();\n      fieldValue.current = '';\n      /* NOTE: Delay change event to give clear field time to complete and avoid a flickering */\n\n      setTimeout(() => {\n        onChange?.([...chips, newChip], ChipsInputChangeReason.Added, newChip);\n      }, 0);\n    }\n  }, [onChange, chips, maxChips]);\n  const removeMarkedChip = useCallback(() => {\n    if (!isUndefined(markedForRemoval)) {\n      const removedChip = chips?.splice(markedForRemoval, 1);\n      onChange?.([...chips], ChipsInputChangeReason.Removed, removedChip?.[0]);\n      setMarkedForRemoval(undefined);\n    }\n  }, [chips, markedForRemoval, onChange]);\n  const onChipPress = useCallback(({\n    customValue: index\n  }) => {\n    const selectedChip = chips[index];\n    selectedChip?.onPress?.();\n    setMarkedForRemoval(index);\n  }, [chips]);\n  const onChangeText = useCallback(value => {\n    fieldValue.current = value;\n    props.onChangeText?.(value);\n\n    if (!isUndefined(markedForRemoval)) {\n      setMarkedForRemoval(undefined);\n    }\n  }, [props.onChangeText, markedForRemoval]);\n  const onKeyPress = useCallback(event => {\n    props.onKeyPress?.(event);\n    const keyCode = event?.nativeEvent?.key;\n    const pressedBackspace = keyCode === Constants.backspaceKey;\n\n    if (pressedBackspace && !fieldValue.current) {\n      if (isUndefined(markedForRemoval) || markedForRemoval !== chips.length - 1) {\n        setMarkedForRemoval(chips.length - 1);\n      } else {\n        removeMarkedChip();\n      }\n    }\n  }, [chips, props.onKeyPress, markedForRemoval, removeMarkedChip]);\n  const chipList = useMemo(() => {\n    return <>\n        {leadingAccessory}\n        {map(chips, (chip, index) => {\n        const isMarkedForRemoval = index === markedForRemoval;\n        return <Chip key={index} customValue={index} // resetSpacings\n        // paddingH-s2\n        marginR-s2 marginB-s2 dismissIcon={removeIcon} {...defaultChipProps} {...chip.invalid ? invalidChipProps : undefined} {...chip} onPress={onChipPress} onDismiss={isMarkedForRemoval ? removeMarkedChip : undefined} />;\n      })}\n      </>;\n  }, [chips, leadingAccessory, defaultChipProps, removeMarkedChip, markedForRemoval]);\n  return <TextField // @ts-expect-error\n  ref={fieldRef} leadingAccessory={chipList} blurOnSubmit={false} {...others} onChangeText={onChangeText} onSubmitEditing={addChip} fieldStyle={[fieldStyle, styles.fieldStyle]} onKeyPress={onKeyPress} accessibilityHint={props.editable ? 'press keyboard delete button to remove last tag' : undefined} />;\n});\nconst styles = StyleSheet.create({\n  fieldStyle: {\n    flexWrap: 'wrap'\n  }\n}); // @ts-expect-error\n\nChipsInput.changeReasons = {\n  ADDED: 'added',\n  REMOVED: 'removed'\n};\nexport default ChipsInput;"]},"metadata":{},"sourceType":"module"}