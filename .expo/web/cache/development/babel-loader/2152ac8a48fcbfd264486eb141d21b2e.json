{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"expandableContent\", \"useDialog\", \"modalProps\", \"dialogProps\", \"showTopBar\", \"topBarProps\", \"renderCustomOverlay\", \"disabled\", \"testID\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport Dialog from \"../../components/dialog\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ExpandableOverlay = function ExpandableOverlay(props, ref) {\n  var children = props.children,\n      expandableContent = props.expandableContent,\n      useDialog = props.useDialog,\n      modalProps = props.modalProps,\n      dialogProps = props.dialogProps,\n      showTopBar = props.showTopBar,\n      topBarProps = props.topBarProps,\n      renderCustomOverlay = props.renderCustomOverlay,\n      disabled = props.disabled,\n      testID = props.testID,\n      others = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setExpandableVisible = _useState2[1];\n\n  var openExpandable = useCallback(function () {\n    return setExpandableVisible(true);\n  }, []);\n  var closeExpandable = useCallback(function () {\n    setExpandableVisible(false);\n    useDialog ? dialogProps == null ? void 0 : dialogProps.onDismiss == null ? void 0 : dialogProps.onDismiss() : modalProps == null ? void 0 : modalProps.onDismiss == null ? void 0 : modalProps.onDismiss();\n  }, [useDialog, dialogProps == null ? void 0 : dialogProps.onDismiss, modalProps == null ? void 0 : modalProps.onDismiss]);\n  var toggleExpandable = useCallback(function () {\n    return visible ? closeExpandable() : openExpandable();\n  }, [visible, openExpandable, closeExpandable]);\n  useImperativeHandle(ref, function () {\n    return {\n      openExpandable: openExpandable,\n      closeExpandable: closeExpandable,\n      toggleExpandable: toggleExpandable\n    };\n  });\n\n  var renderModal = function renderModal() {\n    return _jsxs(Modal, _objectSpread(_objectSpread({\n      testID: testID + \".overlay\"\n    }, modalProps), {}, {\n      visible: visible,\n      onDismiss: closeExpandable,\n      children: [showTopBar && _jsx(Modal.TopBar, _objectSpread({\n        onDone: closeExpandable\n      }, topBarProps)), expandableContent]\n    }));\n  };\n\n  var renderDialog = function renderDialog() {\n    return _jsx(Dialog, _objectSpread(_objectSpread({\n      testID: testID + \".overlay\"\n    }, dialogProps), {}, {\n      visible: visible,\n      onDismiss: closeExpandable,\n      children: expandableContent\n    }));\n  };\n\n  var renderOverlay = function renderOverlay() {\n    if (renderCustomOverlay) {\n      return renderCustomOverlay({\n        visible: visible,\n        openExpandable: openExpandable,\n        closeExpandable: closeExpandable,\n        toggleExpandable: toggleExpandable\n      });\n    } else {\n      return useDialog ? renderDialog() : renderModal();\n    }\n  };\n\n  return _jsxs(TouchableOpacity, _objectSpread(_objectSpread({}, others), {}, {\n    onPress: openExpandable,\n    disabled: disabled,\n    testID: testID,\n    children: [_jsx(View, {\n      pointerEvents: \"none\",\n      children: children\n    }), renderOverlay()]\n  }));\n};\n\nexport default forwardRef(ExpandableOverlay);","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/expandableOverlay/index.js"],"names":["React","useCallback","useState","forwardRef","useImperativeHandle","TouchableOpacity","View","Modal","Dialog","ExpandableOverlay","props","ref","children","expandableContent","useDialog","modalProps","dialogProps","showTopBar","topBarProps","renderCustomOverlay","disabled","testID","others","visible","setExpandableVisible","openExpandable","closeExpandable","onDismiss","toggleExpandable","renderModal","renderDialog","renderOverlay"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport Dialog from \"../../components/dialog\";\n\nconst ExpandableOverlay = (props, ref) => {\n  const {\n    children,\n    expandableContent,\n    useDialog,\n    modalProps,\n    dialogProps,\n    showTopBar,\n    topBarProps,\n    renderCustomOverlay,\n    disabled,\n    testID,\n    ...others\n  } = props;\n  const [visible, setExpandableVisible] = useState(false);\n  const openExpandable = useCallback(() => setExpandableVisible(true), []);\n  const closeExpandable = useCallback(() => {\n    setExpandableVisible(false);\n    useDialog ? dialogProps?.onDismiss?.() : modalProps?.onDismiss?.();\n  }, [useDialog, dialogProps?.onDismiss, modalProps?.onDismiss]);\n  const toggleExpandable = useCallback(() => visible ? closeExpandable() : openExpandable(), [visible, openExpandable, closeExpandable]);\n  useImperativeHandle(ref, () => ({\n    openExpandable,\n    closeExpandable,\n    toggleExpandable\n  }));\n\n  const renderModal = () => {\n    return <Modal testID={`${testID}.overlay`} {...modalProps} visible={visible} onDismiss={closeExpandable}>\n        {showTopBar && <Modal.TopBar onDone={closeExpandable} {...topBarProps} />}\n        {expandableContent}\n      </Modal>;\n  };\n\n  const renderDialog = () => {\n    return <Dialog testID={`${testID}.overlay`} {...dialogProps} visible={visible} onDismiss={closeExpandable}>\n        {expandableContent}\n      </Dialog>;\n  };\n\n  const renderOverlay = () => {\n    if (renderCustomOverlay) {\n      return renderCustomOverlay({\n        visible,\n        openExpandable,\n        closeExpandable,\n        toggleExpandable\n      });\n    } else {\n      return useDialog ? renderDialog() : renderModal();\n    }\n  };\n\n  return <TouchableOpacity {...others} onPress={openExpandable} disabled={disabled} testID={testID}>\n      <View pointerEvents=\"none\">{children}</View>\n      {renderOverlay()}\n    </TouchableOpacity>;\n};\n\nexport default forwardRef(ExpandableOverlay);"]},"metadata":{},"sourceType":"module"}