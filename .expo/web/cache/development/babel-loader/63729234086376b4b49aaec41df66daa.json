{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport memoize from 'memoize-one';\nimport { LogService } from \"../../services\";\nimport { Colors, BorderRadiuses } from \"../../style\";\nimport { forwardRef, asBaseComponent } from \"../../commons/new\";\nimport { extractAccessibilityProps } from \"../../commons/modifiers\";\nimport Badge from \"../badge\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport Image from \"../image\";\nimport AnimatedImage from \"../animatedImage\";\nimport * as AvatarHelper from \"../../helpers/AvatarHelper\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var BadgePosition;\n\n(function (BadgePosition) {\n  BadgePosition[\"TOP_RIGHT\"] = \"TOP_RIGHT\";\n  BadgePosition[\"TOP_LEFT\"] = \"TOP_LEFT\";\n  BadgePosition[\"BOTTOM_RIGHT\"] = \"BOTTOM_RIGHT\";\n  BadgePosition[\"BOTTOM_LEFT\"] = \"BOTTOM_LEFT\";\n})(BadgePosition || (BadgePosition = {}));\n\nvar DEFAULT_BADGE_SIZE = 10;\n\nvar Avatar = function (_PureComponent) {\n  _inherits(Avatar, _PureComponent);\n\n  var _super = _createSuper(Avatar);\n\n  function Avatar(props) {\n    var _this;\n\n    _classCallCheck(this, Avatar);\n\n    _this = _super.call(this, props);\n\n    _this.getBadgeBorderWidth = function () {\n      return _.get(_this.props, 'badgeProps.borderWidth', 0);\n    };\n\n    _this.getBadgeSize = function () {\n      var _this$props, _this$props$badgeProp;\n\n      return ((_this$props = _this.props) == null ? void 0 : (_this$props$badgeProp = _this$props.badgeProps) == null ? void 0 : _this$props$badgeProp.size) || DEFAULT_BADGE_SIZE;\n    };\n\n    _this.getBadgePosition = function () {\n      var _badgeAlignment;\n\n      var _this$props2 = _this.props,\n          size = _this$props2.size,\n          badgePosition = _this$props2.badgePosition;\n      var radius = size / 2;\n      var x = Math.sqrt(Math.pow(radius, 2) * 2);\n      var y = x - radius;\n      var shift = Math.sqrt(Math.pow(y, 2) / 2) - (_this.getBadgeSize() + _this.getBadgeBorderWidth() * 2) / 2;\n\n      var badgeLocation = _.split(_.toLower(badgePosition), '_', 2);\n\n      var badgeAlignment = (_badgeAlignment = {\n        position: 'absolute'\n      }, _defineProperty(_badgeAlignment, badgeLocation[0], shift), _defineProperty(_badgeAlignment, badgeLocation[1], shift), _badgeAlignment);\n      return badgeAlignment;\n    };\n\n    _this.getText = memoize(function (label, name) {\n      var text = label;\n\n      if (_.isNil(label) && !_.isNil(name)) {\n        text = AvatarHelper.getInitials(name);\n      }\n\n      return text;\n    });\n    _this.getBackgroundColor = memoize(function (text, avatarColors, hashFunction, defaultColor) {\n      return AvatarHelper.getBackgroundColor(text, avatarColors, hashFunction, defaultColor);\n    });\n    _this.styles = createStyles(props);\n\n    if (props.imageSource) {\n      LogService.warn('uilib: imageSource prop is deprecated, use source instead.');\n    }\n\n    return _this;\n  }\n\n  _createClass(Avatar, [{\n    key: \"source\",\n    get: function get() {\n      return this.props.source || this.props.imageSource;\n    }\n  }, {\n    key: \"getContainerStyle\",\n    value: function getContainerStyle() {\n      var size = this.props.size;\n      return {\n        width: size,\n        height: size,\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: BorderRadiuses.br100\n      };\n    }\n  }, {\n    key: \"getInitialsContainer\",\n    value: function getInitialsContainer() {\n      return _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: BorderRadiuses.br100\n      });\n    }\n  }, {\n    key: \"getRibbonStyle\",\n    value: function getRibbonStyle() {\n      var size = this.props.size;\n      return {\n        position: 'absolute',\n        top: '10%',\n        left: size / 1.7,\n        borderRadius: size / 2\n      };\n    }\n  }, {\n    key: \"getBadgeColor\",\n    value: function getBadgeColor() {\n      return _.get(this.props, 'badgeProps.backgroundColor');\n    }\n  }, {\n    key: \"renderBadge\",\n    value: function renderBadge() {\n      var _this$props3 = this.props,\n          testID = _this$props3.testID,\n          badgeProps = _this$props3.badgeProps;\n\n      if (badgeProps || this.getBadgeColor()) {\n        return _jsx(Badge, _objectSpread(_objectSpread({\n          backgroundColor: this.getBadgeColor(),\n          size: this.getBadgeSize()\n        }, badgeProps), {}, {\n          containerStyle: this.getBadgePosition(),\n          testID: testID + \".onlineBadge\"\n        }));\n      }\n    }\n  }, {\n    key: \"renderRibbon\",\n    value: function renderRibbon() {\n      var _this$props4 = this.props,\n          ribbonLabel = _this$props4.ribbonLabel,\n          ribbonStyle = _this$props4.ribbonStyle,\n          ribbonLabelStyle = _this$props4.ribbonLabelStyle,\n          customRibbon = _this$props4.customRibbon;\n\n      if (ribbonLabel) {\n        return customRibbon ? _jsx(View, {\n          style: this.getRibbonStyle(),\n          children: customRibbon\n        }) : _jsx(View, {\n          style: [this.getRibbonStyle(), this.styles.ribbon, ribbonStyle],\n          children: _jsx(Text, {\n            numberOfLines: 1,\n            text100: true,\n            white: true,\n            style: [ribbonLabelStyle],\n            children: ribbonLabel\n          })\n        });\n      }\n    }\n  }, {\n    key: \"renderImage\",\n    value: function renderImage() {\n      var _this$props5 = this.props,\n          animate = _this$props5.animate,\n          onImageLoadStart = _this$props5.onImageLoadStart,\n          onImageLoadEnd = _this$props5.onImageLoadEnd,\n          onImageLoadError = _this$props5.onImageLoadError,\n          testID = _this$props5.testID,\n          imageProps = _this$props5.imageProps,\n          imageStyle = _this$props5.imageStyle;\n      var hasImage = !_.isUndefined(this.source);\n      var ImageContainer = animate ? AnimatedImage : Image;\n\n      if (hasImage) {\n        return _jsx(ImageContainer, _objectSpread({\n          animate: animate,\n          style: [this.getContainerStyle(), StyleSheet.absoluteFillObject, imageStyle],\n          source: this.source,\n          onLoadStart: onImageLoadStart,\n          onLoadEnd: onImageLoadEnd,\n          onError: onImageLoadError,\n          testID: testID + \".image\",\n          containerStyle: this.getContainerStyle()\n        }, imageProps));\n      }\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      var _this$props6 = this.props,\n          label = _this$props6.label,\n          name = _this$props6.name;\n      return this.getText(label, name);\n    }\n  }, {\n    key: \"backgroundColor\",\n    get: function get() {\n      var _this$props7 = this.props,\n          backgroundColor = _this$props7.backgroundColor,\n          useAutoColors = _this$props7.useAutoColors,\n          autoColorsConfig = _this$props7.autoColorsConfig,\n          name = _this$props7.name;\n\n      if (backgroundColor) {\n        return backgroundColor;\n      }\n\n      var _ref = autoColorsConfig || {},\n          _ref$avatarColors = _ref.avatarColors,\n          avatarColors = _ref$avatarColors === void 0 ? AvatarHelper.getAvatarColors() : _ref$avatarColors,\n          _ref$hashFunction = _ref.hashFunction,\n          hashFunction = _ref$hashFunction === void 0 ? AvatarHelper.hashStringToNumber : _ref$hashFunction,\n          _ref$defaultColor = _ref.defaultColor,\n          defaultColor = _ref$defaultColor === void 0 ? Colors.grey80 : _ref$defaultColor;\n\n      if (useAutoColors) {\n        return this.getBackgroundColor(name, avatarColors, hashFunction, defaultColor);\n      } else {\n        return defaultColor;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props8 = this.props,\n          color = _this$props8.labelColor,\n          onPress = _this$props8.onPress,\n          containerStyle = _this$props8.containerStyle,\n          children = _this$props8.children,\n          size = _this$props8.size,\n          testID = _this$props8.testID,\n          forwardedRef = _this$props8.forwardedRef;\n      var Container = onPress ? TouchableOpacity : View;\n      var hasImage = !_.isUndefined(this.source);\n      var fontSizeToImageSizeRatio = 0.32;\n      var fontSize = size * fontSizeToImageSizeRatio;\n      var text = this.text;\n      return _jsxs(Container, _objectSpread(_objectSpread({\n        style: [this.getContainerStyle(), containerStyle],\n        ref: forwardedRef,\n        testID: testID,\n        onPress: onPress,\n        accessible: !_.isUndefined(onPress),\n        accessibilityLabel: 'Avatar',\n        accessibilityRole: onPress ? 'button' : 'image'\n      }, extractAccessibilityProps(this.props)), {}, {\n        children: [_jsx(View, {\n          testID: testID + \".container\",\n          style: [this.getInitialsContainer(), {\n            backgroundColor: this.backgroundColor\n          }, hasImage && this.styles.initialsContainerWithInset],\n          children: !_.isUndefined(text) && _jsx(Text, {\n            numberOfLines: 1,\n            style: [{\n              fontSize: fontSize\n            }, this.styles.initials, {\n              color: color\n            }],\n            testID: testID + \".label\",\n            children: text\n          })\n        }), this.renderImage(), this.renderBadge(), this.renderRibbon(), children]\n      }));\n    }\n  }]);\n\n  return Avatar;\n}(PureComponent);\n\nAvatar.propTypes = {\n  animate: _pt.bool,\n  backgroundColor: _pt.string,\n  badgePosition: _pt.oneOf([\"TOP_RIGHT\", \"TOP_LEFT\", \"BOTTOM_RIGHT\", \"BOTTOM_LEFT\"]),\n  name: _pt.string,\n  useAutoColors: _pt.bool,\n  autoColorsConfig: _pt.shape({\n    avatarColors: _pt.arrayOf(_pt.string),\n    hashFunction: _pt.func,\n    defaultColor: _pt.string\n  }),\n  label: _pt.string,\n  labelColor: _pt.string,\n  ribbonLabel: _pt.string,\n  customRibbon: _pt.element,\n  size: _pt.number,\n  onPress: _pt.func,\n  testID: _pt.string\n};\nAvatar.displayName = 'Avatar';\nAvatar.defaultProps = {\n  animate: false,\n  size: 50,\n  labelColor: Colors.grey10,\n  badgePosition: BadgePosition.TOP_RIGHT\n};\nAvatar.badgePosition = BadgePosition;\n\nfunction createStyles(props) {\n  var labelColor = props.labelColor;\n  var styles = StyleSheet.create({\n    initialsContainerWithInset: {\n      top: 1,\n      right: 1,\n      bottom: 1,\n      left: 1\n    },\n    initials: {\n      color: labelColor,\n      backgroundColor: 'transparent',\n      lineHeight: undefined\n    },\n    ribbon: {\n      backgroundColor: Colors.primary,\n      paddingHorizontal: 6,\n      paddingVertical: 3\n    }\n  });\n  return styles;\n}\n\nexport { Avatar };\nexport default asBaseComponent(forwardRef(Avatar));","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/components/avatar/index.js"],"names":["_pt","_","React","PureComponent","memoize","LogService","Colors","BorderRadiuses","forwardRef","asBaseComponent","extractAccessibilityProps","Badge","View","Text","Image","AnimatedImage","AvatarHelper","BadgePosition","DEFAULT_BADGE_SIZE","Avatar","props","getBadgeBorderWidth","get","getBadgeSize","badgeProps","size","getBadgePosition","badgePosition","radius","x","Math","sqrt","y","shift","badgeLocation","split","toLower","badgeAlignment","position","getText","label","name","text","isNil","getInitials","getBackgroundColor","avatarColors","hashFunction","defaultColor","styles","createStyles","imageSource","warn","source","width","height","alignItems","justifyContent","borderRadius","br100","StyleSheet","absoluteFillObject","top","left","testID","getBadgeColor","ribbonLabel","ribbonStyle","ribbonLabelStyle","customRibbon","getRibbonStyle","ribbon","animate","onImageLoadStart","onImageLoadEnd","onImageLoadError","imageProps","imageStyle","hasImage","isUndefined","ImageContainer","getContainerStyle","backgroundColor","useAutoColors","autoColorsConfig","getAvatarColors","hashStringToNumber","grey80","color","labelColor","onPress","containerStyle","children","forwardedRef","Container","TouchableOpacity","fontSizeToImageSizeRatio","fontSize","getInitialsContainer","initialsContainerWithInset","initials","renderImage","renderBadge","renderRibbon","propTypes","bool","string","oneOf","shape","arrayOf","func","element","number","displayName","defaultProps","grey10","TOP_RIGHT","create","right","bottom","lineHeight","undefined","primary","paddingHorizontal","paddingVertical"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\nimport memoize from 'memoize-one';\nimport { LogService } from \"../../services\";\nimport { Colors, BorderRadiuses } from \"../../style\";\nimport { forwardRef, asBaseComponent } from \"../../commons/new\";\nimport { extractAccessibilityProps } from \"../../commons/modifiers\";\nimport Badge from \"../badge\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport Image from \"../image\"; // @ts-ignore\n\nimport AnimatedImage from \"../animatedImage\";\nimport * as AvatarHelper from \"../../helpers/AvatarHelper\";\nexport let BadgePosition;\n\n(function (BadgePosition) {\n  BadgePosition[\"TOP_RIGHT\"] = \"TOP_RIGHT\";\n  BadgePosition[\"TOP_LEFT\"] = \"TOP_LEFT\";\n  BadgePosition[\"BOTTOM_RIGHT\"] = \"BOTTOM_RIGHT\";\n  BadgePosition[\"BOTTOM_LEFT\"] = \"BOTTOM_LEFT\";\n})(BadgePosition || (BadgePosition = {}));\n\nconst DEFAULT_BADGE_SIZE = 10;\n\n/**\n * @description: Avatar component for displaying user profile images\n * @extends: TouchableOpacity, Image\n * @image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_1.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_2.png?raw=true\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AvatarsScreen.tsx\n */\nclass Avatar extends PureComponent {\n  static propTypes = {\n    /**\n       * Adds fade in animation when Avatar image loads\n       */\n    animate: _pt.bool,\n\n    /**\n       * Background color for Avatar\n       */\n    backgroundColor: _pt.string,\n\n    /**\n       * Badge location on Avatar\n       */\n    badgePosition: _pt.oneOf([\"TOP_RIGHT\", \"TOP_LEFT\", \"BOTTOM_RIGHT\", \"BOTTOM_LEFT\"]),\n\n    /**\n       * The name of the avatar user.\n       * If no label is provided, the initials will be generated from the name.\n       * autoColorsConfig will use the name to create the background color of the Avatar.\n       */\n    name: _pt.string,\n\n    /**\n       * Hash the name (or label) to get a color, so each name will have a specific color.\n       * Default is false.\n       */\n    useAutoColors: _pt.bool,\n\n    /**\n       * Send this to use the name to infer a backgroundColor\n       */\n    autoColorsConfig: _pt.shape({\n      /**\n         * Avatar colors to be used when useAutoColors is true\n         */\n      avatarColors: _pt.arrayOf(_pt.string),\n\n      /**\n         * Replace the default hashing function (name -> number)\n         */\n      hashFunction: _pt.func,\n\n      /**\n         * Background color in cases where the getBackgroundColor returns undefined.\n         */\n      defaultColor: _pt.string\n    }),\n\n    /**\n       * Label that can represent initials\n       */\n    label: _pt.string,\n\n    /**\n       * The label color\n       */\n    labelColor: _pt.string,\n\n    /**\n       * ribbon label to display on the avatar\n       */\n    ribbonLabel: _pt.string,\n\n    /**\n       * Custom ribbon\n       */\n    customRibbon: _pt.element,\n\n    /**\n       * Custom size for the Avatar\n       */\n    size: _pt.number,\n\n    /**\n       * Press handler\n       */\n    onPress: _pt.func,\n\n    /**\n       * Used as a testing identifier\n       */\n    testID: _pt.string\n  };\n  static displayName = 'Avatar';\n\n  constructor(props) {\n    super(props);\n    this.styles = createStyles(props);\n\n    if (props.imageSource) {\n      LogService.warn('uilib: imageSource prop is deprecated, use source instead.');\n    }\n  }\n\n  static defaultProps = {\n    animate: false,\n    size: 50,\n    labelColor: Colors.grey10,\n    badgePosition: BadgePosition.TOP_RIGHT\n  };\n  static badgePosition = BadgePosition;\n\n  get source() {\n    return this.props.source || this.props.imageSource;\n  }\n\n  getContainerStyle() {\n    const {\n      size\n    } = this.props;\n    return {\n      width: size,\n      height: size,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: BorderRadiuses.br100\n    };\n  }\n\n  getInitialsContainer() {\n    return { ...StyleSheet.absoluteFillObject,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: BorderRadiuses.br100\n    };\n  }\n\n  getRibbonStyle() {\n    const {\n      size\n    } = this.props;\n    return {\n      position: 'absolute',\n      top: '10%',\n      left: size / 1.7,\n      borderRadius: size / 2\n    };\n  }\n\n  getBadgeBorderWidth = () => _.get(this.props, 'badgeProps.borderWidth', 0);\n\n  getBadgeColor() {\n    return _.get(this.props, 'badgeProps.backgroundColor');\n  }\n\n  getBadgeSize = () => {\n    return this.props?.badgeProps?.size || DEFAULT_BADGE_SIZE;\n  };\n  getBadgePosition = () => {\n    const {\n      size,\n      badgePosition\n    } = this.props;\n    const radius = size / 2;\n    const x = Math.sqrt(radius ** 2 * 2);\n    const y = x - radius;\n    const shift = Math.sqrt(y ** 2 / 2) - (this.getBadgeSize() + this.getBadgeBorderWidth() * 2) / 2;\n\n    const badgeLocation = _.split(_.toLower(badgePosition), '_', 2);\n\n    const badgeAlignment = {\n      position: 'absolute',\n      [badgeLocation[0]]: shift,\n      [badgeLocation[1]]: shift\n    };\n    return badgeAlignment;\n  };\n\n  renderBadge() {\n    const {\n      testID,\n      badgeProps\n    } = this.props;\n\n    if (badgeProps || this.getBadgeColor()) {\n      return <Badge backgroundColor={this.getBadgeColor()} size={this.getBadgeSize()} {...badgeProps} containerStyle={this.getBadgePosition()} testID={`${testID}.onlineBadge`} />;\n    }\n  }\n\n  renderRibbon() {\n    const {\n      ribbonLabel,\n      ribbonStyle,\n      ribbonLabelStyle,\n      customRibbon\n    } = this.props;\n\n    if (ribbonLabel) {\n      return customRibbon ? <View style={this.getRibbonStyle()}>{customRibbon}</View> : <View style={[this.getRibbonStyle(), this.styles.ribbon, ribbonStyle]}>\n          <Text numberOfLines={1} text100 white style={[ribbonLabelStyle]}>\n            {ribbonLabel}\n          </Text>\n        </View>;\n    }\n  }\n\n  renderImage() {\n    const {\n      animate,\n      // @ts-ignore\n      onImageLoadStart,\n      onImageLoadEnd,\n      onImageLoadError,\n      testID,\n      imageProps,\n      imageStyle\n    } = this.props;\n    const hasImage = !_.isUndefined(this.source);\n    const ImageContainer = animate ? AnimatedImage : Image;\n\n    if (hasImage) {\n      return <ImageContainer animate={animate} style={[this.getContainerStyle(), StyleSheet.absoluteFillObject, imageStyle]} source={this.source} onLoadStart={onImageLoadStart} onLoadEnd={onImageLoadEnd} onError={onImageLoadError} testID={`${testID}.image`} containerStyle={this.getContainerStyle()} {...imageProps} />;\n    }\n  }\n\n  getText = memoize((label, name) => {\n    let text = label;\n\n    if (_.isNil(label) && !_.isNil(name)) {\n      text = AvatarHelper.getInitials(name);\n    }\n\n    return text;\n  });\n\n  get text() {\n    const {\n      label,\n      name\n    } = this.props;\n    return this.getText(label, name);\n  }\n\n  getBackgroundColor = memoize((text, avatarColors, hashFunction, defaultColor) => {\n    return AvatarHelper.getBackgroundColor(text, avatarColors, hashFunction, defaultColor);\n  });\n\n  get backgroundColor() {\n    const {\n      backgroundColor,\n      useAutoColors,\n      autoColorsConfig,\n      name\n    } = this.props;\n\n    if (backgroundColor) {\n      return backgroundColor;\n    }\n\n    const {\n      avatarColors = AvatarHelper.getAvatarColors(),\n      hashFunction = AvatarHelper.hashStringToNumber,\n      defaultColor = Colors.grey80\n    } = autoColorsConfig || {};\n\n    if (useAutoColors) {\n      return this.getBackgroundColor(name, avatarColors, hashFunction, defaultColor);\n    } else {\n      return defaultColor;\n    }\n  }\n\n  render() {\n    const {\n      labelColor: color,\n      onPress,\n      containerStyle,\n      children,\n      size,\n      testID,\n      //@ts-ignore\n      forwardedRef\n    } = this.props;\n    const Container = onPress ? TouchableOpacity : View;\n    const hasImage = !_.isUndefined(this.source);\n    const fontSizeToImageSizeRatio = 0.32;\n    const fontSize = size * fontSizeToImageSizeRatio;\n    const text = this.text;\n    return <Container style={[this.getContainerStyle(), containerStyle]} ref={forwardedRef} testID={testID} onPress={onPress} accessible={!_.isUndefined(onPress)} accessibilityLabel={'Avatar'} accessibilityRole={onPress ? 'button' : 'image'} {...extractAccessibilityProps(this.props)}>\n        <View testID={`${testID}.container`} style={[this.getInitialsContainer(), {\n        backgroundColor: this.backgroundColor\n      }, hasImage && this.styles.initialsContainerWithInset]}>\n          {!_.isUndefined(text) && <Text numberOfLines={1} style={[{\n          fontSize\n        }, this.styles.initials, {\n          color\n        }]} testID={`${testID}.label`}>\n              {text}\n            </Text>}\n        </View>\n        {this.renderImage()}\n        {this.renderBadge()}\n        {this.renderRibbon()}\n        {children}\n      </Container>;\n  }\n\n}\n\nfunction createStyles(props) {\n  const {\n    labelColor\n  } = props;\n  const styles = StyleSheet.create({\n    initialsContainerWithInset: {\n      top: 1,\n      right: 1,\n      bottom: 1,\n      left: 1\n    },\n    initials: {\n      color: labelColor,\n      backgroundColor: 'transparent',\n      lineHeight: undefined\n    },\n    ribbon: {\n      backgroundColor: Colors.primary,\n      paddingHorizontal: 6,\n      paddingVertical: 3\n    }\n  });\n  return styles;\n}\n\nexport { Avatar }; // For tests\n\nexport default asBaseComponent(forwardRef(Avatar));"]},"metadata":{},"sourceType":"module"}