{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"overlayBackgroundColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useMemo, useCallback, useState, useImperativeHandle, forwardRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport TransitionView from \"../TransitionView\";\nimport PanView from \"../panView\";\nimport useAlignmentStyle from \"./helpers/useAlignmentStyle\";\nimport useSafeAreaView from \"./helpers/useSafeAreaView\";\nimport useFadeView from \"./helpers/useFadeView\";\nimport { DialogDirections, DialogDirectionsEnum } from \"./types\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { DialogDirections, DialogDirectionsEnum };\n\nvar ImperativeDialog = function ImperativeDialog(props, ref) {\n  var _props$initialVisibil = props.initialVisibility,\n      initialVisibility = _props$initialVisibil === void 0 ? false : _props$initialVisibil,\n      onDismiss = props.onDismiss,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? DialogDirectionsEnum.DOWN : _props$direction,\n      children = props.children,\n      ignoreBackgroundPress = props.ignoreBackgroundPress,\n      _props$modalProps = props.modalProps,\n      modalProps = _props$modalProps === void 0 ? {} : _props$modalProps,\n      useSafeArea = props.useSafeArea,\n      testID = props.testID;\n  var transitionAnimatorRef = React.createRef();\n\n  var overlayBackgroundColor = modalProps.overlayBackgroundColor,\n      otherModalProps = _objectWithoutProperties(modalProps, _excluded);\n\n  var _useState = useState(initialVisibility),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var _useAlignmentStyle = useAlignmentStyle(props),\n      alignmentType = _useAlignmentStyle.alignmentType,\n      alignmentStyle = _useAlignmentStyle.alignmentStyle;\n\n  var _useSafeAreaView = useSafeAreaView({\n    useSafeArea: useSafeArea,\n    alignmentType: alignmentType\n  }),\n      topSafeArea = _useSafeAreaView.topSafeArea,\n      bottomSafeArea = _useSafeAreaView.bottomSafeArea;\n\n  var _useFadeView = useFadeView({\n    initialVisibility: initialVisibility,\n    testID: testID + \".overlayFadingBackground\",\n    overlayBackgroundColor: overlayBackgroundColor\n  }),\n      FadeView = _useFadeView.FadeView,\n      hideNow = _useFadeView.hideNow,\n      fade = _useFadeView.fade;\n\n  var open = useCallback(function () {\n    if (!visible) {\n      setVisible(true);\n    }\n  }, [visible, setVisible]);\n  var close = useCallback(function () {\n    if (visible) {\n      var _transitionAnimatorRe;\n\n      (_transitionAnimatorRe = transitionAnimatorRef.current) == null ? void 0 : _transitionAnimatorRe.animateOut();\n    }\n  }, [visible, transitionAnimatorRef]);\n  useImperativeHandle(ref, function () {\n    return {\n      open: open,\n      close: close\n    };\n  });\n  var directions = useMemo(function () {\n    return [direction];\n  }, [direction]);\n  var onBackgroundPress = useCallback(function () {\n    close();\n  }, [close]);\n  var onPanViewDismiss = useCallback(function () {\n    hideNow();\n    setVisible(false);\n    onDismiss == null ? void 0 : onDismiss();\n  }, [hideNow, onDismiss, setVisible]);\n  var onTransitionAnimationEnd = useCallback(function (type) {\n    if (type === 'exit') {\n      setVisible(false);\n      onDismiss == null ? void 0 : onDismiss();\n    }\n  }, [onDismiss, setVisible]);\n\n  var renderDialog = function renderDialog() {\n    return _jsx(PanView, {\n      directions: directions,\n      dismissible: true,\n      animateToOrigin: true,\n      containerStyle: styles.panView,\n      onDismiss: onPanViewDismiss,\n      children: _jsxs(TransitionView, {\n        ref: transitionAnimatorRef,\n        enterFrom: direction,\n        exitTo: direction,\n        onAnimationStart: fade,\n        onAnimationEnd: onTransitionAnimationEnd,\n        children: [topSafeArea, children, bottomSafeArea]\n      })\n    });\n  };\n\n  return _jsxs(Modal, _objectSpread(_objectSpread({\n    transparent: true,\n    animationType: 'none'\n  }, otherModalProps), {}, {\n    testID: testID + \".modal\",\n    useGestureHandlerRootView: true,\n    visible: visible,\n    onBackgroundPress: ignoreBackgroundPress ? undefined : onBackgroundPress,\n    onRequestClose: ignoreBackgroundPress ? undefined : onBackgroundPress,\n    onDismiss: undefined,\n    children: [FadeView, _jsx(View, {\n      pointerEvents: 'box-none',\n      style: alignmentStyle,\n      children: renderDialog()\n    })]\n  }));\n};\n\nImperativeDialog.displayName = 'IGNORE';\nexport default forwardRef(ImperativeDialog);\nvar styles = StyleSheet.create({\n  panView: {\n    position: 'absolute'\n  }\n});","map":{"version":3,"sources":["/Users/aliabji/code/dogs/Pawls/node_modules/react-native-ui-lib/src/incubator/Dialog/ImperativeDialog.js"],"names":["React","useMemo","useCallback","useState","useImperativeHandle","forwardRef","View","Modal","TransitionView","PanView","useAlignmentStyle","useSafeAreaView","useFadeView","DialogDirections","DialogDirectionsEnum","ImperativeDialog","props","ref","initialVisibility","onDismiss","direction","DOWN","children","ignoreBackgroundPress","modalProps","useSafeArea","testID","transitionAnimatorRef","createRef","overlayBackgroundColor","otherModalProps","visible","setVisible","alignmentType","alignmentStyle","topSafeArea","bottomSafeArea","FadeView","hideNow","fade","open","close","current","animateOut","directions","onBackgroundPress","onPanViewDismiss","onTransitionAnimationEnd","type","renderDialog","styles","panView","undefined","displayName","StyleSheet","create","position"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, useState, useImperativeHandle, forwardRef } from 'react';\nimport { StyleSheet } from 'react-native';\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport TransitionView from \"../TransitionView\";\nimport PanView from \"../panView\";\nimport useAlignmentStyle from \"./helpers/useAlignmentStyle\";\nimport useSafeAreaView from \"./helpers/useSafeAreaView\";\nimport useFadeView from \"./helpers/useFadeView\";\nimport { DialogDirections, DialogDirectionsEnum } from \"./types\";\nexport { DialogDirections, DialogDirectionsEnum };\n\nconst ImperativeDialog = (props, ref) => {\n  const {\n    initialVisibility = false,\n    onDismiss,\n    direction = DialogDirectionsEnum.DOWN,\n    children,\n    ignoreBackgroundPress,\n    modalProps = {},\n    useSafeArea,\n    testID\n  } = props;\n  const transitionAnimatorRef = React.createRef();\n  const {\n    overlayBackgroundColor,\n    ...otherModalProps\n  } = modalProps;\n  const [visible, setVisible] = useState(initialVisibility);\n  const {\n    alignmentType,\n    alignmentStyle\n  } = useAlignmentStyle(props);\n  const {\n    topSafeArea,\n    bottomSafeArea\n  } = useSafeAreaView({\n    useSafeArea,\n    alignmentType\n  });\n  const {\n    FadeView,\n    hideNow,\n    fade\n  } = useFadeView({\n    initialVisibility,\n    testID: `${testID}.overlayFadingBackground`,\n    overlayBackgroundColor\n  });\n  const open = useCallback(() => {\n    if (!visible) {\n      setVisible(true);\n    }\n  }, [visible, setVisible]);\n  const close = useCallback(() => {\n    if (visible) {\n      transitionAnimatorRef.current?.animateOut();\n    }\n  }, [visible, transitionAnimatorRef]);\n  useImperativeHandle(ref, () => ({\n    open,\n    close\n  }));\n  const directions = useMemo(() => {\n    return [direction];\n  }, [direction]);\n  const onBackgroundPress = useCallback(() => {\n    close();\n  }, [close]);\n  const onPanViewDismiss = useCallback(() => {\n    hideNow();\n    setVisible(false);\n    onDismiss?.();\n  }, [hideNow, onDismiss, setVisible]);\n  const onTransitionAnimationEnd = useCallback(type => {\n    if (type === 'exit') {\n      setVisible(false);\n      onDismiss?.();\n    }\n  }, [onDismiss, setVisible]);\n\n  const renderDialog = () => {\n    return <PanView directions={directions} dismissible animateToOrigin containerStyle={styles.panView} onDismiss={onPanViewDismiss}>\n        <TransitionView ref={transitionAnimatorRef} enterFrom={direction} exitTo={direction} onAnimationStart={fade} onAnimationEnd={onTransitionAnimationEnd}>\n          {topSafeArea}\n          {children}\n          {bottomSafeArea}\n        </TransitionView>\n      </PanView>;\n  };\n\n  return <Modal transparent animationType={'none'} {...otherModalProps} testID={`${testID}.modal`} useGestureHandlerRootView visible={visible} onBackgroundPress={ignoreBackgroundPress ? undefined : onBackgroundPress} onRequestClose={ignoreBackgroundPress ? undefined : onBackgroundPress} onDismiss={undefined}>\n      {FadeView}\n      <View pointerEvents={'box-none'} style={alignmentStyle}>\n        {renderDialog()}\n      </View>\n    </Modal>;\n};\n\nImperativeDialog.displayName = 'IGNORE';\nexport default forwardRef(ImperativeDialog);\nconst styles = StyleSheet.create({\n  panView: {\n    position: 'absolute'\n  }\n});"]},"metadata":{},"sourceType":"module"}